
2024 LTU FE Temp Sensing ECU Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053ac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080054c0  080054c0  000154c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005530  08005530  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08005530  08005530  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005530  08005530  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005530  08005530  00015530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005534  08005534  00015534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005538  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000080  080055b8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  080055b8  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008cda  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ad4  00000000  00000000  00028dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000858  00000000  00000000  0002a8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000064c  00000000  00000000  0002b0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000181d4  00000000  00000000  0002b744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009d3e  00000000  00000000  00043918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008de6e  00000000  00000000  0004d656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002720  00000000  00000000  000db4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  000ddbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	080054a4 	.word	0x080054a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	080054a4 	.word	0x080054a4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <TS_ECU_SYNC_RX1_FilterConfig>:
 */

#include <CAN.h>

void TS_ECU_SYNC_RX1_FilterConfig(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	filter.FilterActivation = CAN_FILTER_ENABLE;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	623b      	str	r3, [r7, #32]
	filter.FilterBank = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
	filter.FilterIdHigh = (TS_ECU_SYNC_RX1_CANID << 5);
 8000b2a:	f246 0320 	movw	r3, #24608	; 0x6020
 8000b2e:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (0x000U);
 8000b30:	2300      	movs	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = (TS_ECU_SYNC_RX1_CANID << 5);
 8000b34:	f246 0320 	movw	r3, #24608	; 0x6020
 8000b38:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (0x000U);
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
	filter.FilterMode = CAN_FILTERMODE_IDLIST;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b42:	2301      	movs	r3, #1
 8000b44:	61fb      	str	r3, [r7, #28]
	filter.SlaveStartFilterBank = 15;
 8000b46:	230f      	movs	r3, #15
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK)
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4806      	ldr	r0, [pc, #24]	; (8000b68 <TS_ECU_SYNC_RX1_FilterConfig+0x50>)
 8000b50:	f001 ffc4 	bl	8002adc <HAL_CAN_ConfigFilter>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <TS_ECU_SYNC_RX1_FilterConfig+0x46>
	{
		Error_Handler();
 8000b5a:	f001 f81d 	bl	8001b98 <Error_Handler>
	}
}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	; 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200000d0 	.word	0x200000d0

08000b6c <TS_ECU_SYNC_RX2_FilterConfig>:

void TS_ECU_SYNC_RX2_FilterConfig(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	filter.FilterActivation = CAN_FILTER_ENABLE;
 8000b72:	2301      	movs	r3, #1
 8000b74:	623b      	str	r3, [r7, #32]
	filter.FilterBank = 1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
	filter.FilterIdHigh = (TS_ECU_SYNC_RX2_CANID << 5);
 8000b7e:	f246 0340 	movw	r3, #24640	; 0x6040
 8000b82:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (0x000U);
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = (TS_ECU_SYNC_RX2_CANID << 5);
 8000b88:	f246 0340 	movw	r3, #24640	; 0x6040
 8000b8c:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (0x000U);
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
	filter.FilterMode = CAN_FILTERMODE_IDLIST;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b96:	2301      	movs	r3, #1
 8000b98:	61fb      	str	r3, [r7, #28]
	filter.SlaveStartFilterBank = 15;
 8000b9a:	230f      	movs	r3, #15
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK)
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4806      	ldr	r0, [pc, #24]	; (8000bbc <TS_ECU_SYNC_RX2_FilterConfig+0x50>)
 8000ba4:	f001 ff9a 	bl	8002adc <HAL_CAN_ConfigFilter>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <TS_ECU_SYNC_RX2_FilterConfig+0x46>
	{
		Error_Handler();
 8000bae:	f000 fff3 	bl	8001b98 <Error_Handler>
	}
}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	; 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200000d0 	.word	0x200000d0

08000bc0 <TS_ECU_ChargingStateTrigFilterConfig>:

void TS_ECU_ChargingStateTrigFilterConfig(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	filter.FilterActivation = CAN_FILTER_ENABLE;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	623b      	str	r3, [r7, #32]
	filter.FilterBank = 2;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	617b      	str	r3, [r7, #20]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
	filter.FilterIdHigh = (TS_ECU_ChargingStateTrigger_CANID << 5);
 8000bd2:	f245 7340 	movw	r3, #22336	; 0x5740
 8000bd6:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (0x000U);
 8000bd8:	2300      	movs	r3, #0
 8000bda:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = (TS_ECU_ChargingStateTrigger_CANID << 5);
 8000bdc:	f245 7340 	movw	r3, #22336	; 0x5740
 8000be0:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (0x000U);
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
	filter.FilterMode = CAN_FILTERMODE_IDLIST;
 8000be6:	2301      	movs	r3, #1
 8000be8:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000bea:	2301      	movs	r3, #1
 8000bec:	61fb      	str	r3, [r7, #28]
	filter.SlaveStartFilterBank = 15;
 8000bee:	230f      	movs	r3, #15
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK)
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4806      	ldr	r0, [pc, #24]	; (8000c10 <TS_ECU_ChargingStateTrigFilterConfig+0x50>)
 8000bf8:	f001 ff70 	bl	8002adc <HAL_CAN_ConfigFilter>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <TS_ECU_ChargingStateTrigFilterConfig+0x46>
	{
		Error_Handler();
 8000c02:	f000 ffc9 	bl	8001b98 <Error_Handler>
	}
}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	; 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000d0 	.word	0x200000d0

08000c14 <TS_ECU1_SendDiagnosticData>:

void TS_ECU1_SendDiagnosticData(TS_ECU1_TX1_t* _tx1_t)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08c      	sub	sp, #48	; 0x30
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[5];
	uint32_t mailbox;
	uint8_t dlc, ide;

	Pack_TS_ECU1_TX1_Temp(_tx1_t, data, &dlc, &ide);
 8000c1c:	f107 030a 	add.w	r3, r7, #10
 8000c20:	f107 020b 	add.w	r2, r7, #11
 8000c24:	f107 0110 	add.w	r1, r7, #16
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f001 f8f7 	bl	8001e1c <Pack_TS_ECU1_TX1_Temp>

	txHeader.DLC = TS_ECU1_TX1_DLC;
 8000c2e:	2305      	movs	r3, #5
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
	txHeader.ExtId = DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
	txHeader.IDE = TS_ECU1_TX1_IDE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
	txHeader.StdId = TS_ECU1_TX1_CANID;
 8000c3e:	f240 3311 	movw	r3, #785	; 0x311
 8000c42:	61bb      	str	r3, [r7, #24]
	txHeader.TransmitGlobalTime = DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	if (HAL_CAN_AddTxMessage(&hcan, &txHeader, data, &mailbox) != HAL_OK)
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	f107 0210 	add.w	r2, r7, #16
 8000c52:	f107 0118 	add.w	r1, r7, #24
 8000c56:	480b      	ldr	r0, [pc, #44]	; (8000c84 <TS_ECU1_SendDiagnosticData+0x70>)
 8000c58:	f002 f84d 	bl	8002cf6 <HAL_CAN_AddTxMessage>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <TS_ECU1_SendDiagnosticData+0x52>
	{
		Error_Handler();
 8000c62:	f000 ff99 	bl	8001b98 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan, mailbox));
 8000c66:	bf00      	nop
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <TS_ECU1_SendDiagnosticData+0x70>)
 8000c6e:	f002 f911 	bl	8002e94 <HAL_CAN_IsTxMessagePending>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1f7      	bne.n	8000c68 <TS_ECU1_SendDiagnosticData+0x54>

}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	3730      	adds	r7, #48	; 0x30
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200000d0 	.word	0x200000d0

08000c88 <TS_ECU1_SendTemperatures>:

void TS_ECU1_SendTemperatures(int* _tempArray)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b09c      	sub	sp, #112	; 0x70
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeaderOne, txHeaderTwo, txHeaderThree;
	uint8_t dataTX2[8], dataTX3[8], dataTX4[8];
	uint32_t mailbox;

    for(int i = 0; i < 8; i++) {
 8000c90:	2300      	movs	r3, #0
 8000c92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000c94:	e02e      	b.n	8000cf4 <TS_ECU1_SendTemperatures+0x6c>
        dataTX2[i] = ((_tempArray[i] & (0xFFU)) + 40);
 8000c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	3328      	adds	r3, #40	; 0x28
 8000ca4:	b2d9      	uxtb	r1, r3
 8000ca6:	f107 021c 	add.w	r2, r7, #28
 8000caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cac:	4413      	add	r3, r2
 8000cae:	460a      	mov	r2, r1
 8000cb0:	701a      	strb	r2, [r3, #0]
        dataTX3[i] = ((_tempArray[i + 8] & (0xFFU)) + 40);
 8000cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cb4:	3308      	adds	r3, #8
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	4413      	add	r3, r2
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	3328      	adds	r3, #40	; 0x28
 8000cc2:	b2d9      	uxtb	r1, r3
 8000cc4:	f107 0214 	add.w	r2, r7, #20
 8000cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cca:	4413      	add	r3, r2
 8000ccc:	460a      	mov	r2, r1
 8000cce:	701a      	strb	r2, [r3, #0]
        dataTX4[i] = ((_tempArray[i + 16] & (0xFFU)) + 40);
 8000cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cd2:	3310      	adds	r3, #16
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	3328      	adds	r3, #40	; 0x28
 8000ce0:	b2d9      	uxtb	r1, r3
 8000ce2:	f107 020c 	add.w	r2, r7, #12
 8000ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ce8:	4413      	add	r3, r2
 8000cea:	460a      	mov	r2, r1
 8000cec:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 8; i++) {
 8000cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cf6:	2b07      	cmp	r3, #7
 8000cf8:	ddcd      	ble.n	8000c96 <TS_ECU1_SendTemperatures+0xe>
    }

    txHeaderOne.DLC = TS_ECU1_TX2_DLC;
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	667b      	str	r3, [r7, #100]	; 0x64
    txHeaderOne.ExtId = DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	65bb      	str	r3, [r7, #88]	; 0x58
    txHeaderOne.IDE = TS_ECU1_TX2_IDE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	65fb      	str	r3, [r7, #92]	; 0x5c
    txHeaderOne.RTR = CAN_RTR_DATA;
 8000d06:	2300      	movs	r3, #0
 8000d08:	663b      	str	r3, [r7, #96]	; 0x60
    txHeaderOne.StdId = TS_ECU1_TX2_CANID;
 8000d0a:	f240 3312 	movw	r3, #786	; 0x312
 8000d0e:	657b      	str	r3, [r7, #84]	; 0x54
    txHeaderOne.TransmitGlobalTime = DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

    txHeaderTwo.DLC = TS_ECU1_TX3_DLC;
 8000d16:	2308      	movs	r3, #8
 8000d18:	64fb      	str	r3, [r7, #76]	; 0x4c
    txHeaderTwo.ExtId = DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	643b      	str	r3, [r7, #64]	; 0x40
    txHeaderTwo.IDE = TS_ECU1_TX3_IDE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	647b      	str	r3, [r7, #68]	; 0x44
    txHeaderTwo.RTR = CAN_RTR_DATA;
 8000d22:	2300      	movs	r3, #0
 8000d24:	64bb      	str	r3, [r7, #72]	; 0x48
    txHeaderTwo.StdId = TS_ECU1_TX3_CANID;
 8000d26:	f240 3313 	movw	r3, #787	; 0x313
 8000d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    txHeaderTwo.TransmitGlobalTime = DISABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

    txHeaderThree.DLC = TS_ECU1_TX4_DLC;
 8000d32:	2308      	movs	r3, #8
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
    txHeaderThree.ExtId = DISABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
    txHeaderThree.IDE = TS_ECU1_TX4_IDE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    txHeaderThree.RTR = CAN_RTR_DATA;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
    txHeaderThree.StdId = TS_ECU1_TX4_CANID;
 8000d42:	f44f 7345 	mov.w	r3, #788	; 0x314
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
    txHeaderThree.TransmitGlobalTime = DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

	if (HAL_CAN_AddTxMessage(&hcan, &txHeaderOne, dataTX2, &mailbox) != HAL_OK)
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	f107 021c 	add.w	r2, r7, #28
 8000d56:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000d5a:	4822      	ldr	r0, [pc, #136]	; (8000de4 <TS_ECU1_SendTemperatures+0x15c>)
 8000d5c:	f001 ffcb 	bl	8002cf6 <HAL_CAN_AddTxMessage>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <TS_ECU1_SendTemperatures+0xe2>
	{
		Error_Handler();
 8000d66:	f000 ff17 	bl	8001b98 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan, mailbox));
 8000d6a:	bf00      	nop
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	481c      	ldr	r0, [pc, #112]	; (8000de4 <TS_ECU1_SendTemperatures+0x15c>)
 8000d72:	f002 f88f 	bl	8002e94 <HAL_CAN_IsTxMessagePending>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d1f7      	bne.n	8000d6c <TS_ECU1_SendTemperatures+0xe4>

	if (HAL_CAN_AddTxMessage(&hcan, &txHeaderTwo, dataTX3, &mailbox) != HAL_OK)
 8000d7c:	f107 0308 	add.w	r3, r7, #8
 8000d80:	f107 0214 	add.w	r2, r7, #20
 8000d84:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000d88:	4816      	ldr	r0, [pc, #88]	; (8000de4 <TS_ECU1_SendTemperatures+0x15c>)
 8000d8a:	f001 ffb4 	bl	8002cf6 <HAL_CAN_AddTxMessage>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <TS_ECU1_SendTemperatures+0x110>
	{
		Error_Handler();
 8000d94:	f000 ff00 	bl	8001b98 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan, mailbox));
 8000d98:	bf00      	nop
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4811      	ldr	r0, [pc, #68]	; (8000de4 <TS_ECU1_SendTemperatures+0x15c>)
 8000da0:	f002 f878 	bl	8002e94 <HAL_CAN_IsTxMessagePending>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f7      	bne.n	8000d9a <TS_ECU1_SendTemperatures+0x112>

	if (HAL_CAN_AddTxMessage(&hcan, &txHeaderThree, dataTX4, &mailbox) != HAL_OK)
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	f107 020c 	add.w	r2, r7, #12
 8000db2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000db6:	480b      	ldr	r0, [pc, #44]	; (8000de4 <TS_ECU1_SendTemperatures+0x15c>)
 8000db8:	f001 ff9d 	bl	8002cf6 <HAL_CAN_AddTxMessage>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <TS_ECU1_SendTemperatures+0x13e>
	{
		Error_Handler();
 8000dc2:	f000 fee9 	bl	8001b98 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan, mailbox));
 8000dc6:	bf00      	nop
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <TS_ECU1_SendTemperatures+0x15c>)
 8000dce:	f002 f861 	bl	8002e94 <HAL_CAN_IsTxMessagePending>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1f7      	bne.n	8000dc8 <TS_ECU1_SendTemperatures+0x140>
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3770      	adds	r7, #112	; 0x70
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200000d0 	.word	0x200000d0

08000de8 <HAL_CAN_RxFifo0MsgPendingCallback>:
static int getTempCH1(ADC_HandleTypeDef* hadc);
static int getTempCH2(ADC_HandleTypeDef* hadc);

// CAN ISR
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  //UNUSED(hcan);

	if (hcan->Instance == CAN1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d108      	bne.n	8000e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeaderFIFO0, dataFIFO0);
 8000dfa:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f002 f86a 	bl	8002eda <HAL_CAN_GetRxMessage>

		msgPendingFlag = true;
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	701a      	strb	r2, [r3, #0]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40006400 	.word	0x40006400
 8000e18:	20000188 	.word	0x20000188
 8000e1c:	2000016c 	.word	0x2000016c
 8000e20:	200001a2 	.word	0x200001a2

08000e24 <HAL_GPIO_EXTI_Callback>:

// Fault ISR
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  //UNUSED(GPIO_Pin);

	if (GPIO_Pin == FAULT_IN_PIN)
 8000e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d113      	bne.n	8000e60 <HAL_GPIO_EXTI_Callback+0x3c>
	{
		tx1_t.TS_ECU_FaultInState = HAL_GPIO_ReadPin(FAULT_PIN_PORT, FAULT_IN_PIN);
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x44>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 fe44 	bl	8003ad0 <HAL_GPIO_ReadPin>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <HAL_GPIO_EXTI_Callback+0x48>)
 8000e4e:	71da      	strb	r2, [r3, #7]

		HAL_GPIO_WritePin(FAULT_PIN_PORT, FAULT_OUT_PIN, GPIO_PIN_RESET);
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x44>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e58:	2200      	movs	r2, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f002 fe4f 	bl	8003afe <HAL_GPIO_WritePin>
	}

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	20000194 	.word	0x20000194

08000e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e76:	f001 f87d 	bl	8001f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7a:	f000 fb4f 	bl	800151c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7e:	f000 fc2d 	bl	80016dc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e82:	f000 fba7 	bl	80015d4 <MX_ADC1_Init>
  MX_CAN_Init();
 8000e86:	f000 fbf3 	bl	8001670 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  // Initial State
  ecuState = DISCHARGE_STATE;
 8000e8a:	4b89      	ldr	r3, [pc, #548]	; (80010b0 <main+0x240>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(FAULT_PIN_PORT, FAULT_OUT_PIN, GPIO_PIN_SET);
 8000e90:	4b88      	ldr	r3, [pc, #544]	; (80010b4 <main+0x244>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f002 fe2f 	bl	8003afe <HAL_GPIO_WritePin>

  tx1_t.TS_ECU_FaultOutState = GPIO_PIN_SET;
 8000ea0:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <main+0x248>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	721a      	strb	r2, [r3, #8]

  tx1_t.TS_ECU_FaultInState = HAL_GPIO_ReadPin(FAULT_PIN_PORT, FAULT_IN_PIN);
 8000ea6:	4b83      	ldr	r3, [pc, #524]	; (80010b4 <main+0x244>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f002 fe0d 	bl	8003ad0 <HAL_GPIO_ReadPin>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b7f      	ldr	r3, [pc, #508]	; (80010b8 <main+0x248>)
 8000ebc:	71da      	strb	r2, [r3, #7]

  // Initialize CAN
  HAL_CAN_Start(&hcan);
 8000ebe:	487f      	ldr	r0, [pc, #508]	; (80010bc <main+0x24c>)
 8000ec0:	f001 fed5 	bl	8002c6e <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	487d      	ldr	r0, [pc, #500]	; (80010bc <main+0x24c>)
 8000ec8:	f002 f928 	bl	800311c <HAL_CAN_ActivateNotification>

  // CAN Filter Configuration
  TS_ECU_ChargingStateTrigFilterConfig();
 8000ecc:	f7ff fe78 	bl	8000bc0 <TS_ECU_ChargingStateTrigFilterConfig>

  TS_ECU_SYNC_RX1_FilterConfig();
 8000ed0:	f7ff fe22 	bl	8000b18 <TS_ECU_SYNC_RX1_FilterConfig>

  TS_ECU_SYNC_RX2_FilterConfig();
 8000ed4:	f7ff fe4a 	bl	8000b6c <TS_ECU_SYNC_RX2_FilterConfig>

  tx1_t.TS_ECU_OpenCircuitFault = false;
 8000ed8:	4b77      	ldr	r3, [pc, #476]	; (80010b8 <main+0x248>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	729a      	strb	r2, [r3, #10]
  tx1_t.TS_ECU_TempThresholdFault = false;
 8000ede:	4b76      	ldr	r3, [pc, #472]	; (80010b8 <main+0x248>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	725a      	strb	r2, [r3, #9]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // CAN Message Processing
	  if (msgPendingFlag == true)
 8000ee4:	4b76      	ldr	r3, [pc, #472]	; (80010c0 <main+0x250>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d149      	bne.n	8000f82 <main+0x112>
	  {
		  if (rxHeaderFIFO0.StdId == TS_ECU_SYNC_RX1_CANID && (((dataFIFO0[0] & (0xFFU)) == (0x00U)) || ((dataFIFO0[0] & (0xFFU)) == SEGMENT_ID)))
 8000eee:	4b75      	ldr	r3, [pc, #468]	; (80010c4 <main+0x254>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f240 3201 	movw	r2, #769	; 0x301
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d10b      	bne.n	8000f12 <main+0xa2>
 8000efa:	4b73      	ldr	r3, [pc, #460]	; (80010c8 <main+0x258>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <main+0x9a>
 8000f02:	4b71      	ldr	r3, [pc, #452]	; (80010c8 <main+0x258>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d103      	bne.n	8000f12 <main+0xa2>
		  {
			  syncOneFlag = true;
 8000f0a:	4b70      	ldr	r3, [pc, #448]	; (80010cc <main+0x25c>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	701a      	strb	r2, [r3, #0]
 8000f10:	e034      	b.n	8000f7c <main+0x10c>

			  //syncOneTime = HAL_GetTick();
		  }
		  else if (rxHeaderFIFO0.StdId == TS_ECU_SYNC_RX2_CANID && (((dataFIFO0[0] & (0xFFU)) == (0x00U)) || ((dataFIFO0[0] & (0xFFU)) == SEGMENT_ID)))
 8000f12:	4b6c      	ldr	r3, [pc, #432]	; (80010c4 <main+0x254>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f240 3202 	movw	r2, #770	; 0x302
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d110      	bne.n	8000f40 <main+0xd0>
 8000f1e:	4b6a      	ldr	r3, [pc, #424]	; (80010c8 <main+0x258>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <main+0xbe>
 8000f26:	4b68      	ldr	r3, [pc, #416]	; (80010c8 <main+0x258>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d108      	bne.n	8000f40 <main+0xd0>
		  {
			  syncTwoFlag = true;
 8000f2e:	4b68      	ldr	r3, [pc, #416]	; (80010d0 <main+0x260>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]

			  syncTwoTime = HAL_GetTick();
 8000f34:	f001 f876 	bl	8002024 <HAL_GetTick>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a66      	ldr	r2, [pc, #408]	; (80010d4 <main+0x264>)
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	e01d      	b.n	8000f7c <main+0x10c>
		  }
		  else if (rxHeaderFIFO0.StdId == TS_ECU_ChargingStateTrigger_CANID)
 8000f40:	4b60      	ldr	r3, [pc, #384]	; (80010c4 <main+0x254>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f240 22ba 	movw	r2, #698	; 0x2ba
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d117      	bne.n	8000f7c <main+0x10c>
		  {
			  Unpack_TS_ECU_ChargingStateTrigger_Temp(&stateTrigger_t, dataFIFO0, TS_ECU_ChargingStateTrigger_DLC);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	495e      	ldr	r1, [pc, #376]	; (80010c8 <main+0x258>)
 8000f50:	4861      	ldr	r0, [pc, #388]	; (80010d8 <main+0x268>)
 8000f52:	f000 ff45 	bl	8001de0 <Unpack_TS_ECU_ChargingStateTrigger_Temp>

			  if (stateTrigger_t.Orion_2_ChargePowerState == (0x01U) && stateTrigger_t.Orion_2_ChargeSafetyState == (0x01U))
 8000f56:	4b60      	ldr	r3, [pc, #384]	; (80010d8 <main+0x268>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d10e      	bne.n	8000f7c <main+0x10c>
 8000f5e:	4b5e      	ldr	r3, [pc, #376]	; (80010d8 <main+0x268>)
 8000f60:	785b      	ldrb	r3, [r3, #1]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d10a      	bne.n	8000f7c <main+0x10c>
			  {
				  ecuState = CHARGING_STATE;
 8000f66:	4b52      	ldr	r3, [pc, #328]	; (80010b0 <main+0x240>)
 8000f68:	2202      	movs	r2, #2
 8000f6a:	701a      	strb	r2, [r3, #0]

				  chargingTriggerFlag = true;
 8000f6c:	4b5b      	ldr	r3, [pc, #364]	; (80010dc <main+0x26c>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]

				  currentChargingTriggerTime = HAL_GetTick();
 8000f72:	f001 f857 	bl	8002024 <HAL_GetTick>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a59      	ldr	r2, [pc, #356]	; (80010e0 <main+0x270>)
 8000f7a:	6013      	str	r3, [r2, #0]
			  }
		  }

		  msgPendingFlag = false;
 8000f7c:	4b50      	ldr	r3, [pc, #320]	; (80010c0 <main+0x250>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
	  }

	  // Process Temperatures
	  for (int s3 = 0; s3 <= 1; s3++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	e1ad      	b.n	80012e4 <main+0x474>
	  {
		  for (int s2 = 0; s2 <= 1; s2++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	e1a3      	b.n	80012d6 <main+0x466>
		  {
			  for (int s1 = 0; s1 <= 1; s1++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	e199      	b.n	80012c8 <main+0x458>
			  {
				  for (int s0 = 0; s0 <= 1; s0++)
 8000f94:	2300      	movs	r3, #0
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	e18f      	b.n	80012ba <main+0x44a>
				  {
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, s3);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	2120      	movs	r1, #32
 8000fa2:	4850      	ldr	r0, [pc, #320]	; (80010e4 <main+0x274>)
 8000fa4:	f002 fdab 	bl	8003afe <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, s2);
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	2140      	movs	r1, #64	; 0x40
 8000fb0:	484c      	ldr	r0, [pc, #304]	; (80010e4 <main+0x274>)
 8000fb2:	f002 fda4 	bl	8003afe <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, s1);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	461a      	mov	r2, r3
 8000fbc:	2108      	movs	r1, #8
 8000fbe:	4849      	ldr	r0, [pc, #292]	; (80010e4 <main+0x274>)
 8000fc0:	f002 fd9d 	bl	8003afe <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, s0);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	2110      	movs	r1, #16
 8000fcc:	4845      	ldr	r0, [pc, #276]	; (80010e4 <main+0x274>)
 8000fce:	f002 fd96 	bl	8003afe <HAL_GPIO_WritePin>

					  if ((s3 == 1 && s2 == 1 && s1 == 1) || (s0 == 1 && s2 == 1 && s3 == 1) || (s3 == 1 && s2 == 1 && s1 == 0 && s0 == 0))
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d106      	bne.n	8000fe6 <main+0x176>
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d103      	bne.n	8000fe6 <main+0x176>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	f000 8166 	beq.w	80012b2 <main+0x442>
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d106      	bne.n	8000ffa <main+0x18a>
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d103      	bne.n	8000ffa <main+0x18a>
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	f000 815c 	beq.w	80012b2 <main+0x442>
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d109      	bne.n	8001014 <main+0x1a4>
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d106      	bne.n	8001014 <main+0x1a4>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d103      	bne.n	8001014 <main+0x1a4>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	f000 814f 	beq.w	80012b2 <main+0x442>
						  continue;
					  }

					  /*******************************  Cell 1-12 *******************************/

					  tempArray[counterCH1] = getTempCH1(&hadc1);
 8001014:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <main+0x278>)
 8001016:	681c      	ldr	r4, [r3, #0]
 8001018:	4834      	ldr	r0, [pc, #208]	; (80010ec <main+0x27c>)
 800101a:	f000 fbe5 	bl	80017e8 <getTempCH1>
 800101e:	4603      	mov	r3, r0
 8001020:	4a33      	ldr	r2, [pc, #204]	; (80010f0 <main+0x280>)
 8001022:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

					  if (tempArray[counterCH1] < OPEN_CIRCUIT_THRESHOLD)
 8001026:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <main+0x278>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a31      	ldr	r2, [pc, #196]	; (80010f0 <main+0x280>)
 800102c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001030:	f513 6f7a 	cmn.w	r3, #4000	; 0xfa0
 8001034:	da13      	bge.n	800105e <main+0x1ee>
					  {
						  HAL_GPIO_WritePin(FAULT_PIN_PORT, FAULT_OUT_PIN, GPIO_PIN_RESET);
 8001036:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <main+0x244>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103e:	2200      	movs	r2, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f002 fd5c 	bl	8003afe <HAL_GPIO_WritePin>

						  tempArray[counterCH1] = 200;
 8001046:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <main+0x278>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a29      	ldr	r2, [pc, #164]	; (80010f0 <main+0x280>)
 800104c:	21c8      	movs	r1, #200	; 0xc8
 800104e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

						  tx1_t.TS_ECU_OpenCircuitFault = true;
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <main+0x248>)
 8001054:	2201      	movs	r2, #1
 8001056:	729a      	strb	r2, [r3, #10]

						  tx1_t.TS_ECU_FaultOutState = GPIO_PIN_RESET;
 8001058:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <main+0x248>)
 800105a:	2200      	movs	r2, #0
 800105c:	721a      	strb	r2, [r3, #8]
					  }

					  if (tempArray[counterCH1] > SHORT_TO_GROUND_THRESHOLD)
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <main+0x278>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a23      	ldr	r2, [pc, #140]	; (80010f0 <main+0x280>)
 8001064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001068:	f243 62b0 	movw	r2, #14000	; 0x36b0
 800106c:	4293      	cmp	r3, r2
 800106e:	dd13      	ble.n	8001098 <main+0x228>
					  {
						  HAL_GPIO_WritePin(FAULT_PIN_PORT, FAULT_OUT_PIN, GPIO_PIN_RESET);
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <main+0x244>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001078:	2200      	movs	r2, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f002 fd3f 	bl	8003afe <HAL_GPIO_WritePin>

						  tempArray[counterCH1] = 200;
 8001080:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <main+0x278>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a1a      	ldr	r2, [pc, #104]	; (80010f0 <main+0x280>)
 8001086:	21c8      	movs	r1, #200	; 0xc8
 8001088:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

						  tx1_t.FAN_ECU_ShortToGroundFault = true;
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <main+0x248>)
 800108e:	2201      	movs	r2, #1
 8001090:	72da      	strb	r2, [r3, #11]

						  tx1_t.TS_ECU_FaultOutState = GPIO_PIN_RESET;
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <main+0x248>)
 8001094:	2200      	movs	r2, #0
 8001096:	721a      	strb	r2, [r3, #8]
					  }

					  if (tempArray[counterCH1] == 200)
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <main+0x278>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <main+0x280>)
 800109e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a2:	2bc8      	cmp	r3, #200	; 0xc8
 80010a4:	d128      	bne.n	80010f8 <main+0x288>
					  {
						  cellTempSum += 0;
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <main+0x284>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <main+0x284>)
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	e02d      	b.n	800110c <main+0x29c>
 80010b0:	2000009c 	.word	0x2000009c
 80010b4:	20000000 	.word	0x20000000
 80010b8:	20000194 	.word	0x20000194
 80010bc:	200000d0 	.word	0x200000d0
 80010c0:	200001a2 	.word	0x200001a2
 80010c4:	2000016c 	.word	0x2000016c
 80010c8:	20000188 	.word	0x20000188
 80010cc:	200001ad 	.word	0x200001ad
 80010d0:	200001ae 	.word	0x200001ae
 80010d4:	200001a8 	.word	0x200001a8
 80010d8:	20000190 	.word	0x20000190
 80010dc:	200001ac 	.word	0x200001ac
 80010e0:	200001a4 	.word	0x200001a4
 80010e4:	40010800 	.word	0x40010800
 80010e8:	20000158 	.word	0x20000158
 80010ec:	200000a0 	.word	0x200000a0
 80010f0:	200000f8 	.word	0x200000f8
 80010f4:	20000160 	.word	0x20000160
					  }
					  else
					  {
						  cellTempSum += tempArray[counterCH1];
 80010f8:	4b8d      	ldr	r3, [pc, #564]	; (8001330 <main+0x4c0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a8d      	ldr	r2, [pc, #564]	; (8001334 <main+0x4c4>)
 80010fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001102:	4b8d      	ldr	r3, [pc, #564]	; (8001338 <main+0x4c8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a8b      	ldr	r2, [pc, #556]	; (8001338 <main+0x4c8>)
 800110a:	6013      	str	r3, [r2, #0]
					  }

					  if (tempArray[counterCH1] > highestTemp && tempArray[counterCH1] < ERROR_THRESHOLD)
 800110c:	4b88      	ldr	r3, [pc, #544]	; (8001330 <main+0x4c0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a88      	ldr	r2, [pc, #544]	; (8001334 <main+0x4c4>)
 8001112:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001116:	4b89      	ldr	r3, [pc, #548]	; (800133c <main+0x4cc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	429a      	cmp	r2, r3
 800111c:	dd10      	ble.n	8001140 <main+0x2d0>
 800111e:	4b84      	ldr	r3, [pc, #528]	; (8001330 <main+0x4c0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a84      	ldr	r2, [pc, #528]	; (8001334 <main+0x4c4>)
 8001124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001128:	2b77      	cmp	r3, #119	; 0x77
 800112a:	dc09      	bgt.n	8001140 <main+0x2d0>
					  {
						  highestTemp = tempArray[counterCH1];
 800112c:	4b80      	ldr	r3, [pc, #512]	; (8001330 <main+0x4c0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a80      	ldr	r2, [pc, #512]	; (8001334 <main+0x4c4>)
 8001132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001136:	4a81      	ldr	r2, [pc, #516]	; (800133c <main+0x4cc>)
 8001138:	6013      	str	r3, [r2, #0]

						  highestTempCellCount = 0;
 800113a:	4b81      	ldr	r3, [pc, #516]	; (8001340 <main+0x4d0>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
					  }

					  if (tempArray[counterCH1] < lowestTemp)
 8001140:	4b7b      	ldr	r3, [pc, #492]	; (8001330 <main+0x4c0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a7b      	ldr	r2, [pc, #492]	; (8001334 <main+0x4c4>)
 8001146:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800114a:	4b7e      	ldr	r3, [pc, #504]	; (8001344 <main+0x4d4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	429a      	cmp	r2, r3
 8001150:	da06      	bge.n	8001160 <main+0x2f0>
					  {
						  lowestTemp = tempArray[counterCH1];
 8001152:	4b77      	ldr	r3, [pc, #476]	; (8001330 <main+0x4c0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a77      	ldr	r2, [pc, #476]	; (8001334 <main+0x4c4>)
 8001158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115c:	4a79      	ldr	r2, [pc, #484]	; (8001344 <main+0x4d4>)
 800115e:	6013      	str	r3, [r2, #0]
					  }

					  if (tempArray[counterCH1] == highestTemp)
 8001160:	4b73      	ldr	r3, [pc, #460]	; (8001330 <main+0x4c0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a73      	ldr	r2, [pc, #460]	; (8001334 <main+0x4c4>)
 8001166:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800116a:	4b74      	ldr	r3, [pc, #464]	; (800133c <main+0x4cc>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d104      	bne.n	800117c <main+0x30c>
					  {
						  highestTempCellCount++;
 8001172:	4b73      	ldr	r3, [pc, #460]	; (8001340 <main+0x4d0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	3301      	adds	r3, #1
 8001178:	4a71      	ldr	r2, [pc, #452]	; (8001340 <main+0x4d0>)
 800117a:	6013      	str	r3, [r2, #0]
					  }

					  /*******************************  Cell 13-24 *******************************/

					  tempArray[counterCH2] = getTempCH2(&hadc1);
 800117c:	4b72      	ldr	r3, [pc, #456]	; (8001348 <main+0x4d8>)
 800117e:	681c      	ldr	r4, [r3, #0]
 8001180:	4872      	ldr	r0, [pc, #456]	; (800134c <main+0x4dc>)
 8001182:	f000 fc1d 	bl	80019c0 <getTempCH2>
 8001186:	4603      	mov	r3, r0
 8001188:	4a6a      	ldr	r2, [pc, #424]	; (8001334 <main+0x4c4>)
 800118a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

					  if (tempArray[counterCH2] < OPEN_CIRCUIT_THRESHOLD)
 800118e:	4b6e      	ldr	r3, [pc, #440]	; (8001348 <main+0x4d8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a68      	ldr	r2, [pc, #416]	; (8001334 <main+0x4c4>)
 8001194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001198:	f513 6f7a 	cmn.w	r3, #4000	; 0xfa0
 800119c:	da13      	bge.n	80011c6 <main+0x356>
					  {
						  HAL_GPIO_WritePin(FAULT_PIN_PORT, FAULT_OUT_PIN, GPIO_PIN_RESET);
 800119e:	4b6c      	ldr	r3, [pc, #432]	; (8001350 <main+0x4e0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a6:	2200      	movs	r2, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 fca8 	bl	8003afe <HAL_GPIO_WritePin>

						  tempArray[counterCH2] = 200;
 80011ae:	4b66      	ldr	r3, [pc, #408]	; (8001348 <main+0x4d8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a60      	ldr	r2, [pc, #384]	; (8001334 <main+0x4c4>)
 80011b4:	21c8      	movs	r1, #200	; 0xc8
 80011b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

						  tx1_t.TS_ECU_OpenCircuitFault = true;
 80011ba:	4b66      	ldr	r3, [pc, #408]	; (8001354 <main+0x4e4>)
 80011bc:	2201      	movs	r2, #1
 80011be:	729a      	strb	r2, [r3, #10]

						  tx1_t.TS_ECU_FaultOutState = GPIO_PIN_RESET;
 80011c0:	4b64      	ldr	r3, [pc, #400]	; (8001354 <main+0x4e4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	721a      	strb	r2, [r3, #8]
					  }

					  if (tempArray[counterCH2] > SHORT_TO_GROUND_THRESHOLD)
 80011c6:	4b60      	ldr	r3, [pc, #384]	; (8001348 <main+0x4d8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a5a      	ldr	r2, [pc, #360]	; (8001334 <main+0x4c4>)
 80011cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d0:	f243 62b0 	movw	r2, #14000	; 0x36b0
 80011d4:	4293      	cmp	r3, r2
 80011d6:	dd13      	ble.n	8001200 <main+0x390>
					  {
						  HAL_GPIO_WritePin(FAULT_PIN_PORT, FAULT_OUT_PIN, GPIO_PIN_RESET);
 80011d8:	4b5d      	ldr	r3, [pc, #372]	; (8001350 <main+0x4e0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e0:	2200      	movs	r2, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 fc8b 	bl	8003afe <HAL_GPIO_WritePin>

						  tempArray[counterCH2] = 200;
 80011e8:	4b57      	ldr	r3, [pc, #348]	; (8001348 <main+0x4d8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a51      	ldr	r2, [pc, #324]	; (8001334 <main+0x4c4>)
 80011ee:	21c8      	movs	r1, #200	; 0xc8
 80011f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

						  tx1_t.FAN_ECU_ShortToGroundFault = true;
 80011f4:	4b57      	ldr	r3, [pc, #348]	; (8001354 <main+0x4e4>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	72da      	strb	r2, [r3, #11]

						  tx1_t.TS_ECU_FaultOutState = GPIO_PIN_RESET;
 80011fa:	4b56      	ldr	r3, [pc, #344]	; (8001354 <main+0x4e4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	721a      	strb	r2, [r3, #8]
					  }

					  if (tempArray[counterCH2] == 200)
 8001200:	4b51      	ldr	r3, [pc, #324]	; (8001348 <main+0x4d8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a4b      	ldr	r2, [pc, #300]	; (8001334 <main+0x4c4>)
 8001206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120a:	2bc8      	cmp	r3, #200	; 0xc8
 800120c:	d104      	bne.n	8001218 <main+0x3a8>
					  {
						  cellTempSum += 0;
 800120e:	4b4a      	ldr	r3, [pc, #296]	; (8001338 <main+0x4c8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a49      	ldr	r2, [pc, #292]	; (8001338 <main+0x4c8>)
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e009      	b.n	800122c <main+0x3bc>
					  }
					  else
					  {
						  cellTempSum += tempArray[counterCH2];
 8001218:	4b4b      	ldr	r3, [pc, #300]	; (8001348 <main+0x4d8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a45      	ldr	r2, [pc, #276]	; (8001334 <main+0x4c4>)
 800121e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001222:	4b45      	ldr	r3, [pc, #276]	; (8001338 <main+0x4c8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a43      	ldr	r2, [pc, #268]	; (8001338 <main+0x4c8>)
 800122a:	6013      	str	r3, [r2, #0]
					  }

					  if (tempArray[counterCH2] > highestTemp && tempArray[counterCH2] < ERROR_THRESHOLD)
 800122c:	4b46      	ldr	r3, [pc, #280]	; (8001348 <main+0x4d8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a40      	ldr	r2, [pc, #256]	; (8001334 <main+0x4c4>)
 8001232:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001236:	4b41      	ldr	r3, [pc, #260]	; (800133c <main+0x4cc>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	dd10      	ble.n	8001260 <main+0x3f0>
 800123e:	4b42      	ldr	r3, [pc, #264]	; (8001348 <main+0x4d8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a3c      	ldr	r2, [pc, #240]	; (8001334 <main+0x4c4>)
 8001244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001248:	2b77      	cmp	r3, #119	; 0x77
 800124a:	dc09      	bgt.n	8001260 <main+0x3f0>
					  {
						  highestTemp = tempArray[counterCH2];
 800124c:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <main+0x4d8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a38      	ldr	r2, [pc, #224]	; (8001334 <main+0x4c4>)
 8001252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001256:	4a39      	ldr	r2, [pc, #228]	; (800133c <main+0x4cc>)
 8001258:	6013      	str	r3, [r2, #0]

						  highestTempCellCount = 0;
 800125a:	4b39      	ldr	r3, [pc, #228]	; (8001340 <main+0x4d0>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
					  }

					  if (tempArray[counterCH2] < lowestTemp)
 8001260:	4b39      	ldr	r3, [pc, #228]	; (8001348 <main+0x4d8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a33      	ldr	r2, [pc, #204]	; (8001334 <main+0x4c4>)
 8001266:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800126a:	4b36      	ldr	r3, [pc, #216]	; (8001344 <main+0x4d4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	da06      	bge.n	8001280 <main+0x410>
					  {
						  lowestTemp = tempArray[counterCH2];
 8001272:	4b35      	ldr	r3, [pc, #212]	; (8001348 <main+0x4d8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a2f      	ldr	r2, [pc, #188]	; (8001334 <main+0x4c4>)
 8001278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127c:	4a31      	ldr	r2, [pc, #196]	; (8001344 <main+0x4d4>)
 800127e:	6013      	str	r3, [r2, #0]
					  }

					  if (tempArray[counterCH2] == highestTemp)
 8001280:	4b31      	ldr	r3, [pc, #196]	; (8001348 <main+0x4d8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a2b      	ldr	r2, [pc, #172]	; (8001334 <main+0x4c4>)
 8001286:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800128a:	4b2c      	ldr	r3, [pc, #176]	; (800133c <main+0x4cc>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d104      	bne.n	800129c <main+0x42c>
					  {
						  highestTempCellCount++;
 8001292:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <main+0x4d0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	4a29      	ldr	r2, [pc, #164]	; (8001340 <main+0x4d0>)
 800129a:	6013      	str	r3, [r2, #0]
					  }

					  counterCH1++;
 800129c:	4b24      	ldr	r3, [pc, #144]	; (8001330 <main+0x4c0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	4a23      	ldr	r2, [pc, #140]	; (8001330 <main+0x4c0>)
 80012a4:	6013      	str	r3, [r2, #0]

					  counterCH2++;
 80012a6:	4b28      	ldr	r3, [pc, #160]	; (8001348 <main+0x4d8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	3301      	adds	r3, #1
 80012ac:	4a26      	ldr	r2, [pc, #152]	; (8001348 <main+0x4d8>)
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	e000      	b.n	80012b4 <main+0x444>
						  continue;
 80012b2:	bf00      	nop
				  for (int s0 = 0; s0 <= 1; s0++)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	3301      	adds	r3, #1
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	f77f ae6c 	ble.w	8000f9a <main+0x12a>
			  for (int s1 = 0; s1 <= 1; s1++)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3301      	adds	r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	f77f ae62 	ble.w	8000f94 <main+0x124>
		  for (int s2 = 0; s2 <= 1; s2++)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	3301      	adds	r3, #1
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	f77f ae58 	ble.w	8000f8e <main+0x11e>
	  for (int s3 = 0; s3 <= 1; s3++)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3301      	adds	r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	f77f ae4e 	ble.w	8000f88 <main+0x118>
				  }
			  }
		  }
	  }

	  averageSegmentTemp = (cellTempSum / CELL_COUNT);
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <main+0x4c8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a19      	ldr	r2, [pc, #100]	; (8001358 <main+0x4e8>)
 80012f2:	fb82 1203 	smull	r1, r2, r2, r3
 80012f6:	1092      	asrs	r2, r2, #2
 80012f8:	17db      	asrs	r3, r3, #31
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	4a17      	ldr	r2, [pc, #92]	; (800135c <main+0x4ec>)
 80012fe:	6013      	str	r3, [r2, #0]

	  // Charging State Watchdog
	  if (HAL_GetTick() - currentChargingTriggerTime > 5000)
 8001300:	f000 fe90 	bl	8002024 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <main+0x4f0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001310:	4293      	cmp	r3, r2
 8001312:	d905      	bls.n	8001320 <main+0x4b0>
	  {
		  ecuState = DISCHARGE_STATE;
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <main+0x4f4>)
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]

		  chargingTriggerFlag = false;
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <main+0x4f8>)
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
	  }

	  // Temperature Threshold Check
	  switch (ecuState)
 8001320:	4b10      	ldr	r3, [pc, #64]	; (8001364 <main+0x4f4>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d021      	beq.n	800136c <main+0x4fc>
 8001328:	2b02      	cmp	r3, #2
 800132a:	d048      	beq.n	80013be <main+0x54e>
 800132c:	e072      	b.n	8001414 <main+0x5a4>
 800132e:	bf00      	nop
 8001330:	20000158 	.word	0x20000158
 8001334:	200000f8 	.word	0x200000f8
 8001338:	20000160 	.word	0x20000160
 800133c:	20000004 	.word	0x20000004
 8001340:	20000168 	.word	0x20000168
 8001344:	20000008 	.word	0x20000008
 8001348:	2000000c 	.word	0x2000000c
 800134c:	200000a0 	.word	0x200000a0
 8001350:	20000000 	.word	0x20000000
 8001354:	20000194 	.word	0x20000194
 8001358:	2aaaaaab 	.word	0x2aaaaaab
 800135c:	20000164 	.word	0x20000164
 8001360:	200001a4 	.word	0x200001a4
 8001364:	2000009c 	.word	0x2000009c
 8001368:	200001ac 	.word	0x200001ac
	  {
	  case DISCHARGE_STATE:

		  if ((highestTemp > DISCHARGE_TEMP_MAX_LIMIT && highestTemp < ERROR_THRESHOLD)  || lowestTemp < DISCHARGE_TEMP_MIN_LIMIT)
 800136c:	4b5c      	ldr	r3, [pc, #368]	; (80014e0 <main+0x670>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b3c      	cmp	r3, #60	; 0x3c
 8001372:	dd03      	ble.n	800137c <main+0x50c>
 8001374:	4b5a      	ldr	r3, [pc, #360]	; (80014e0 <main+0x670>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b77      	cmp	r3, #119	; 0x77
 800137a:	dd04      	ble.n	8001386 <main+0x516>
 800137c:	4b59      	ldr	r3, [pc, #356]	; (80014e4 <main+0x674>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f113 0f14 	cmn.w	r3, #20
 8001384:	da43      	bge.n	800140e <main+0x59e>
		  {
			  if (faultCounter == 4)
 8001386:	4b58      	ldr	r3, [pc, #352]	; (80014e8 <main+0x678>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b04      	cmp	r3, #4
 800138c:	d111      	bne.n	80013b2 <main+0x542>
			  {
				  HAL_GPIO_WritePin(FAULT_PIN_PORT, FAULT_OUT_PIN, GPIO_PIN_RESET);
 800138e:	4b57      	ldr	r3, [pc, #348]	; (80014ec <main+0x67c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001396:	2200      	movs	r2, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f002 fbb0 	bl	8003afe <HAL_GPIO_WritePin>

				  tx1_t.TS_ECU_TempThresholdFault = true;
 800139e:	4b54      	ldr	r3, [pc, #336]	; (80014f0 <main+0x680>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	725a      	strb	r2, [r3, #9]

				  tx1_t.TS_ECU_FaultOutState = GPIO_PIN_RESET;
 80013a4:	4b52      	ldr	r3, [pc, #328]	; (80014f0 <main+0x680>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	721a      	strb	r2, [r3, #8]

				  faultCounter = 0;
 80013aa:	4b4f      	ldr	r3, [pc, #316]	; (80014e8 <main+0x678>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
			  {
				  faultCounter++;
			  }
		  }

		  break;
 80013b0:	e02d      	b.n	800140e <main+0x59e>
				  faultCounter++;
 80013b2:	4b4d      	ldr	r3, [pc, #308]	; (80014e8 <main+0x678>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	4a4b      	ldr	r2, [pc, #300]	; (80014e8 <main+0x678>)
 80013ba:	6013      	str	r3, [r2, #0]
		  break;
 80013bc:	e027      	b.n	800140e <main+0x59e>
	  case CHARGING_STATE:

		  if ((highestTemp > CHARGE_TEMP_MAX_LIMIT && highestTemp < ERROR_THRESHOLD) || lowestTemp < CHARGE_TEMP_MIN_LIMIT)
 80013be:	4b48      	ldr	r3, [pc, #288]	; (80014e0 <main+0x670>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b2d      	cmp	r3, #45	; 0x2d
 80013c4:	dd03      	ble.n	80013ce <main+0x55e>
 80013c6:	4b46      	ldr	r3, [pc, #280]	; (80014e0 <main+0x670>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b77      	cmp	r3, #119	; 0x77
 80013cc:	dd03      	ble.n	80013d6 <main+0x566>
 80013ce:	4b45      	ldr	r3, [pc, #276]	; (80014e4 <main+0x674>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	da1d      	bge.n	8001412 <main+0x5a2>
		  {
			  if (faultCounter == 4)
 80013d6:	4b44      	ldr	r3, [pc, #272]	; (80014e8 <main+0x678>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d111      	bne.n	8001402 <main+0x592>
			  {
				  HAL_GPIO_WritePin(FAULT_PIN_PORT, FAULT_OUT_PIN, GPIO_PIN_RESET);
 80013de:	4b43      	ldr	r3, [pc, #268]	; (80014ec <main+0x67c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e6:	2200      	movs	r2, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 fb88 	bl	8003afe <HAL_GPIO_WritePin>

				  tx1_t.TS_ECU_TempThresholdFault = true;
 80013ee:	4b40      	ldr	r3, [pc, #256]	; (80014f0 <main+0x680>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	725a      	strb	r2, [r3, #9]

				  tx1_t.TS_ECU_FaultOutState = GPIO_PIN_RESET;
 80013f4:	4b3e      	ldr	r3, [pc, #248]	; (80014f0 <main+0x680>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	721a      	strb	r2, [r3, #8]

				  faultCounter = 0;
 80013fa:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <main+0x678>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
			  {
				  faultCounter++;
			  }
		  }

		  break;
 8001400:	e007      	b.n	8001412 <main+0x5a2>
				  faultCounter++;
 8001402:	4b39      	ldr	r3, [pc, #228]	; (80014e8 <main+0x678>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	3301      	adds	r3, #1
 8001408:	4a37      	ldr	r2, [pc, #220]	; (80014e8 <main+0x678>)
 800140a:	6013      	str	r3, [r2, #0]
		  break;
 800140c:	e001      	b.n	8001412 <main+0x5a2>
		  break;
 800140e:	bf00      	nop
 8001410:	e000      	b.n	8001414 <main+0x5a4>
		  break;
 8001412:	bf00      	nop
	  }

	  // Sync One Response
	  if (syncOneFlag == true)
 8001414:	4b37      	ldr	r3, [pc, #220]	; (80014f4 <main+0x684>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d139      	bne.n	8001490 <main+0x620>
	  {
		  tx1_t.TS_ECU_AverageSegmentTemp = TS_ECU1_TX1_TS_ECU_AverageSegmentTemp_toS(averageSegmentTemp);
 800141c:	4b36      	ldr	r3, [pc, #216]	; (80014f8 <main+0x688>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	b29b      	uxth	r3, r3
 8001422:	3328      	adds	r3, #40	; 0x28
 8001424:	b29b      	uxth	r3, r3
 8001426:	b21a      	sxth	r2, r3
 8001428:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <main+0x680>)
 800142a:	809a      	strh	r2, [r3, #4]
		  tx1_t.TS_ECU_MaxSegmentTemperature = TS_ECU1_TX1_TS_ECU_MaxSegmentTemperature_toS(highestTemp);
 800142c:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <main+0x670>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	b29b      	uxth	r3, r3
 8001432:	3328      	adds	r3, #40	; 0x28
 8001434:	b29b      	uxth	r3, r3
 8001436:	b21a      	sxth	r2, r3
 8001438:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <main+0x680>)
 800143a:	801a      	strh	r2, [r3, #0]
		  tx1_t.TS_ECU_MinSegmentTemperature = TS_ECU1_TX1_TS_ECU_MinSegmentTemperature_toS(lowestTemp);
 800143c:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <main+0x674>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	b29b      	uxth	r3, r3
 8001442:	3328      	adds	r3, #40	; 0x28
 8001444:	b29b      	uxth	r3, r3
 8001446:	b21a      	sxth	r2, r3
 8001448:	4b29      	ldr	r3, [pc, #164]	; (80014f0 <main+0x680>)
 800144a:	805a      	strh	r2, [r3, #2]
		  tx1_t.TS_ECU_MaxTemperatureCellCount = highestTempCellCount;
 800144c:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <main+0x68c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <main+0x680>)
 8001454:	719a      	strb	r2, [r3, #6]
		  tx1_t.TS_ECU_FaultInState = HAL_GPIO_ReadPin(FAULT_PIN_PORT, FAULT_IN_PIN);
 8001456:	4b25      	ldr	r3, [pc, #148]	; (80014ec <main+0x67c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f002 fb35 	bl	8003ad0 <HAL_GPIO_ReadPin>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <main+0x680>)
 800146c:	71da      	strb	r2, [r3, #7]

		  if (ecuState == DISCHARGE_STATE)
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <main+0x690>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d103      	bne.n	800147e <main+0x60e>
		  {
			  tx1_t.TS_ECU_CurrentState = 0;
 8001476:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <main+0x680>)
 8001478:	2200      	movs	r2, #0
 800147a:	731a      	strb	r2, [r3, #12]
 800147c:	e002      	b.n	8001484 <main+0x614>
		  }
		  else
		  {
			  tx1_t.TS_ECU_CurrentState = 1;
 800147e:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <main+0x680>)
 8001480:	2201      	movs	r2, #1
 8001482:	731a      	strb	r2, [r3, #12]
		  }

		  TS_ECU1_SendDiagnosticData(&tx1_t);
 8001484:	481a      	ldr	r0, [pc, #104]	; (80014f0 <main+0x680>)
 8001486:	f7ff fbc5 	bl	8000c14 <TS_ECU1_SendDiagnosticData>

		  syncOneFlag = false;
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <main+0x684>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
	  }

	  // Sync Two Response
	  if (syncTwoFlag == true)
 8001490:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <main+0x694>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d10e      	bne.n	80014b6 <main+0x646>
	  {
		  if (HAL_GetTick() - syncTwoTime > SYNC_TIME_SHIFT)
 8001498:	f000 fdc4 	bl	8002024 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <main+0x698>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014a8:	d905      	bls.n	80014b6 <main+0x646>
		  {
			  TS_ECU1_SendTemperatures(tempArray);
 80014aa:	4818      	ldr	r0, [pc, #96]	; (800150c <main+0x69c>)
 80014ac:	f7ff fbec 	bl	8000c88 <TS_ECU1_SendTemperatures>

			  syncTwoFlag = false;
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <main+0x694>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // Reset Counters
	  highestTemp = DISCHARGE_TEMP_MIN_LIMIT;
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <main+0x670>)
 80014b8:	f06f 0213 	mvn.w	r2, #19
 80014bc:	601a      	str	r2, [r3, #0]
	  lowestTemp = DISCHARGE_TEMP_MAX_LIMIT;
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <main+0x674>)
 80014c0:	223c      	movs	r2, #60	; 0x3c
 80014c2:	601a      	str	r2, [r3, #0]
	  highestTempCellCount = 0;
 80014c4:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <main+0x68c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
	  cellTempSum = 0;
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <main+0x6a0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
	  counterCH1 = 0;
 80014d0:	4b10      	ldr	r3, [pc, #64]	; (8001514 <main+0x6a4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
	  counterCH2 = 12;
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <main+0x6a8>)
 80014d8:	220c      	movs	r2, #12
 80014da:	601a      	str	r2, [r3, #0]
	  if (msgPendingFlag == true)
 80014dc:	e502      	b.n	8000ee4 <main+0x74>
 80014de:	bf00      	nop
 80014e0:	20000004 	.word	0x20000004
 80014e4:	20000008 	.word	0x20000008
 80014e8:	2000015c 	.word	0x2000015c
 80014ec:	20000000 	.word	0x20000000
 80014f0:	20000194 	.word	0x20000194
 80014f4:	200001ad 	.word	0x200001ad
 80014f8:	20000164 	.word	0x20000164
 80014fc:	20000168 	.word	0x20000168
 8001500:	2000009c 	.word	0x2000009c
 8001504:	200001ae 	.word	0x200001ae
 8001508:	200001a8 	.word	0x200001a8
 800150c:	200000f8 	.word	0x200000f8
 8001510:	20000160 	.word	0x20000160
 8001514:	20000158 	.word	0x20000158
 8001518:	2000000c 	.word	0x2000000c

0800151c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b094      	sub	sp, #80	; 0x50
 8001520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001526:	2228      	movs	r2, #40	; 0x28
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f003 f880 	bl	8004630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800154c:	2301      	movs	r3, #1
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800155a:	2301      	movs	r3, #1
 800155c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155e:	2302      	movs	r3, #2
 8001560:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001566:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001568:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800156c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001572:	4618      	mov	r0, r3
 8001574:	f002 faf4 	bl	8003b60 <HAL_RCC_OscConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800157e:	f000 fb0b 	bl	8001b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001582:	230f      	movs	r3, #15
 8001584:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001586:	2302      	movs	r3, #2
 8001588:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800158e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001592:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2102      	movs	r1, #2
 800159e:	4618      	mov	r0, r3
 80015a0:	f002 fd60 	bl	8004064 <HAL_RCC_ClockConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <SystemClock_Config+0x92>
  {
    Error_Handler();
 80015aa:	f000 faf5 	bl	8001b98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015ae:	2302      	movs	r3, #2
 80015b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80015b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015b6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	4618      	mov	r0, r3
 80015bc:	f002 fecc 	bl	8004358 <HAL_RCCEx_PeriphCLKConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80015c6:	f000 fae7 	bl	8001b98 <Error_Handler>
  }
}
 80015ca:	bf00      	nop
 80015cc:	3750      	adds	r7, #80	; 0x50
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015e4:	4b20      	ldr	r3, [pc, #128]	; (8001668 <MX_ADC1_Init+0x94>)
 80015e6:	4a21      	ldr	r2, [pc, #132]	; (800166c <MX_ADC1_Init+0x98>)
 80015e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015ea:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <MX_ADC1_Init+0x94>)
 80015ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015f2:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <MX_ADC1_Init+0x94>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015f8:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <MX_ADC1_Init+0x94>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015fe:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <MX_ADC1_Init+0x94>)
 8001600:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001604:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001606:	4b18      	ldr	r3, [pc, #96]	; (8001668 <MX_ADC1_Init+0x94>)
 8001608:	2200      	movs	r2, #0
 800160a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800160c:	4b16      	ldr	r3, [pc, #88]	; (8001668 <MX_ADC1_Init+0x94>)
 800160e:	2201      	movs	r2, #1
 8001610:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001612:	4815      	ldr	r0, [pc, #84]	; (8001668 <MX_ADC1_Init+0x94>)
 8001614:	f000 fd10 	bl	8002038 <HAL_ADC_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800161e:	f000 fabb 	bl	8001b98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001622:	2301      	movs	r3, #1
 8001624:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001626:	2301      	movs	r3, #1
 8001628:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800162a:	2305      	movs	r3, #5
 800162c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4619      	mov	r1, r3
 8001632:	480d      	ldr	r0, [pc, #52]	; (8001668 <MX_ADC1_Init+0x94>)
 8001634:	f000 ffc4 	bl	80025c0 <HAL_ADC_ConfigChannel>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800163e:	f000 faab 	bl	8001b98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001642:	2302      	movs	r3, #2
 8001644:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001646:	2302      	movs	r3, #2
 8001648:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	4619      	mov	r1, r3
 800164e:	4806      	ldr	r0, [pc, #24]	; (8001668 <MX_ADC1_Init+0x94>)
 8001650:	f000 ffb6 	bl	80025c0 <HAL_ADC_ConfigChannel>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800165a:	f000 fa9d 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200000a0 	.word	0x200000a0
 800166c:	40012400 	.word	0x40012400

08001670 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <MX_CAN_Init+0x64>)
 8001676:	4a18      	ldr	r2, [pc, #96]	; (80016d8 <MX_CAN_Init+0x68>)
 8001678:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <MX_CAN_Init+0x64>)
 800167c:	2204      	movs	r2, #4
 800167e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <MX_CAN_Init+0x64>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <MX_CAN_Init+0x64>)
 8001688:	2200      	movs	r2, #0
 800168a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <MX_CAN_Init+0x64>)
 800168e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001692:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <MX_CAN_Init+0x64>)
 8001696:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800169a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800169c:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <MX_CAN_Init+0x64>)
 800169e:	2200      	movs	r2, #0
 80016a0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <MX_CAN_Init+0x64>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <MX_CAN_Init+0x64>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <MX_CAN_Init+0x64>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80016b4:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <MX_CAN_Init+0x64>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <MX_CAN_Init+0x64>)
 80016bc:	2200      	movs	r2, #0
 80016be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80016c0:	4804      	ldr	r0, [pc, #16]	; (80016d4 <MX_CAN_Init+0x64>)
 80016c2:	f001 f910 	bl	80028e6 <HAL_CAN_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80016cc:	f000 fa64 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200000d0 	.word	0x200000d0
 80016d8:	40006400 	.word	0x40006400

080016dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	f107 0310 	add.w	r3, r7, #16
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f0:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <MX_GPIO_Init+0xf8>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a37      	ldr	r2, [pc, #220]	; (80017d4 <MX_GPIO_Init+0xf8>)
 80016f6:	f043 0310 	orr.w	r3, r3, #16
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <MX_GPIO_Init+0xf8>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001708:	4b32      	ldr	r3, [pc, #200]	; (80017d4 <MX_GPIO_Init+0xf8>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a31      	ldr	r2, [pc, #196]	; (80017d4 <MX_GPIO_Init+0xf8>)
 800170e:	f043 0320 	orr.w	r3, r3, #32
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <MX_GPIO_Init+0xf8>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0320 	and.w	r3, r3, #32
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001720:	4b2c      	ldr	r3, [pc, #176]	; (80017d4 <MX_GPIO_Init+0xf8>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a2b      	ldr	r2, [pc, #172]	; (80017d4 <MX_GPIO_Init+0xf8>)
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <MX_GPIO_Init+0xf8>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001738:	4b26      	ldr	r3, [pc, #152]	; (80017d4 <MX_GPIO_Init+0xf8>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a25      	ldr	r2, [pc, #148]	; (80017d4 <MX_GPIO_Init+0xf8>)
 800173e:	f043 0308 	orr.w	r3, r3, #8
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <MX_GPIO_Init+0xf8>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	2178      	movs	r1, #120	; 0x78
 8001754:	4820      	ldr	r0, [pc, #128]	; (80017d8 <MX_GPIO_Init+0xfc>)
 8001756:	f002 f9d2 	bl	8003afe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001760:	481e      	ldr	r0, [pc, #120]	; (80017dc <MX_GPIO_Init+0x100>)
 8001762:	f002 f9cc 	bl	8003afe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001766:	2378      	movs	r3, #120	; 0x78
 8001768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2302      	movs	r3, #2
 8001774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f107 0310 	add.w	r3, r7, #16
 800177a:	4619      	mov	r1, r3
 800177c:	4816      	ldr	r0, [pc, #88]	; (80017d8 <MX_GPIO_Init+0xfc>)
 800177e:	f002 f823 	bl	80037c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2302      	movs	r3, #2
 8001792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	4619      	mov	r1, r3
 800179a:	4810      	ldr	r0, [pc, #64]	; (80017dc <MX_GPIO_Init+0x100>)
 800179c:	f002 f814 	bl	80037c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_GPIO_Init+0x104>)
 80017a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	4619      	mov	r1, r3
 80017b4:	4809      	ldr	r0, [pc, #36]	; (80017dc <MX_GPIO_Init+0x100>)
 80017b6:	f002 f807 	bl	80037c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2102      	movs	r1, #2
 80017be:	2017      	movs	r0, #23
 80017c0:	f001 ffcb 	bl	800375a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017c4:	2017      	movs	r0, #23
 80017c6:	f001 ffe4 	bl	8003792 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017ca:	bf00      	nop
 80017cc:	3720      	adds	r7, #32
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010800 	.word	0x40010800
 80017dc:	40010c00 	.word	0x40010c00
 80017e0:	10110000 	.word	0x10110000
 80017e4:	00000000 	.word	0x00000000

080017e8 <getTempCH1>:

/* USER CODE BEGIN 4 */

static int getTempCH1(ADC_HandleTypeDef* hadc)
{
 80017e8:	b5b0      	push	{r4, r5, r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	uint32_t adcVal = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
	float voltage = 0.0;
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
	int temp = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
	ADC_ChannelConfTypeDef sConfig = {0};
 80017fe:	f107 0308 	add.w	r3, r7, #8
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_1;
 800180a:	2301      	movs	r3, #1
 800180c:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800180e:	2301      	movs	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001812:	2305      	movs	r3, #5
 8001814:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8001816:	f107 0308 	add.w	r3, r7, #8
 800181a:	4619      	mov	r1, r3
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 fecf 	bl	80025c0 <HAL_ADC_ConfigChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <getTempCH1+0x44>
	{
		Error_Handler();
 8001828:	f000 f9b6 	bl	8001b98 <Error_Handler>
	}

	HAL_ADC_Start(hadc);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 fcdb 	bl	80021e8 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(hadc, 1);
 8001832:	2101      	movs	r1, #1
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 fdb1 	bl	800239c <HAL_ADC_PollForConversion>

	adcVal = HAL_ADC_GetValue(hadc);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 feb4 	bl	80025a8 <HAL_ADC_GetValue>
 8001840:	61f8      	str	r0, [r7, #28]

	HAL_ADC_Stop(hadc);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 fd7e 	bl	8002344 <HAL_ADC_Stop>

	adcVal += 105;
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	3369      	adds	r3, #105	; 0x69
 800184c:	61fb      	str	r3, [r7, #28]

	voltage = ((adcVal * 3.3) / 4096);
 800184e:	69f8      	ldr	r0, [r7, #28]
 8001850:	f7fe fdc0 	bl	80003d4 <__aeabi_ui2d>
 8001854:	a348      	add	r3, pc, #288	; (adr r3, 8001978 <getTempCH1+0x190>)
 8001856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185a:	f7fe fe35 	bl	80004c8 <__aeabi_dmul>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	4b51      	ldr	r3, [pc, #324]	; (80019b0 <getTempCH1+0x1c8>)
 800186c:	f7fe ff56 	bl	800071c <__aeabi_ddiv>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	f7ff f8fe 	bl	8000a78 <__aeabi_d2f>
 800187c:	4603      	mov	r3, r0
 800187e:	61bb      	str	r3, [r7, #24]

	temp = (int)(18212.8 - (47967.26*voltage) + (50732.41*pow(voltage, 2)) - (26799.56*pow(voltage, 3)) + (7056.825*pow(voltage, 4))
 8001880:	69b8      	ldr	r0, [r7, #24]
 8001882:	f7fe fdc9 	bl	8000418 <__aeabi_f2d>
 8001886:	a33e      	add	r3, pc, #248	; (adr r3, 8001980 <getTempCH1+0x198>)
 8001888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188c:	f7fe fe1c 	bl	80004c8 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	a13c      	add	r1, pc, #240	; (adr r1, 8001988 <getTempCH1+0x1a0>)
 8001896:	e9d1 0100 	ldrd	r0, r1, [r1]
 800189a:	f7fe fc5d 	bl	8000158 <__aeabi_dsub>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4614      	mov	r4, r2
 80018a4:	461d      	mov	r5, r3
 80018a6:	69b8      	ldr	r0, [r7, #24]
 80018a8:	f7fe fdb6 	bl	8000418 <__aeabi_f2d>
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018b4:	f002 feee 	bl	8004694 <pow>
 80018b8:	a335      	add	r3, pc, #212	; (adr r3, 8001990 <getTempCH1+0x1a8>)
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	f7fe fe03 	bl	80004c8 <__aeabi_dmul>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4620      	mov	r0, r4
 80018c8:	4629      	mov	r1, r5
 80018ca:	f7fe fc47 	bl	800015c <__adddf3>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4614      	mov	r4, r2
 80018d4:	461d      	mov	r5, r3
 80018d6:	69b8      	ldr	r0, [r7, #24]
 80018d8:	f7fe fd9e 	bl	8000418 <__aeabi_f2d>
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	4b34      	ldr	r3, [pc, #208]	; (80019b4 <getTempCH1+0x1cc>)
 80018e2:	f002 fed7 	bl	8004694 <pow>
 80018e6:	a32c      	add	r3, pc, #176	; (adr r3, 8001998 <getTempCH1+0x1b0>)
 80018e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ec:	f7fe fdec 	bl	80004c8 <__aeabi_dmul>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7fe fc2e 	bl	8000158 <__aeabi_dsub>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4614      	mov	r4, r2
 8001902:	461d      	mov	r5, r3
 8001904:	69b8      	ldr	r0, [r7, #24]
 8001906:	f7fe fd87 	bl	8000418 <__aeabi_f2d>
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <getTempCH1+0x1d0>)
 8001910:	f002 fec0 	bl	8004694 <pow>
 8001914:	a322      	add	r3, pc, #136	; (adr r3, 80019a0 <getTempCH1+0x1b8>)
 8001916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191a:	f7fe fdd5 	bl	80004c8 <__aeabi_dmul>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4620      	mov	r0, r4
 8001924:	4629      	mov	r1, r5
 8001926:	f7fe fc19 	bl	800015c <__adddf3>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4614      	mov	r4, r2
 8001930:	461d      	mov	r5, r3
		      - (740.8519*pow(voltage, 5)));
 8001932:	69b8      	ldr	r0, [r7, #24]
 8001934:	f7fe fd70 	bl	8000418 <__aeabi_f2d>
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <getTempCH1+0x1d4>)
 800193e:	f002 fea9 	bl	8004694 <pow>
 8001942:	a319      	add	r3, pc, #100	; (adr r3, 80019a8 <getTempCH1+0x1c0>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	f7fe fdbe 	bl	80004c8 <__aeabi_dmul>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4620      	mov	r0, r4
 8001952:	4629      	mov	r1, r5
 8001954:	f7fe fc00 	bl	8000158 <__aeabi_dsub>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
	temp = (int)(18212.8 - (47967.26*voltage) + (50732.41*pow(voltage, 2)) - (26799.56*pow(voltage, 3)) + (7056.825*pow(voltage, 4))
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	f7ff f862 	bl	8000a28 <__aeabi_d2iz>
 8001964:	4603      	mov	r3, r0
 8001966:	617b      	str	r3, [r7, #20]

	return temp;
 8001968:	697b      	ldr	r3, [r7, #20]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3720      	adds	r7, #32
 800196e:	46bd      	mov	sp, r7
 8001970:	bdb0      	pop	{r4, r5, r7, pc}
 8001972:	bf00      	nop
 8001974:	f3af 8000 	nop.w
 8001978:	66666666 	.word	0x66666666
 800197c:	400a6666 	.word	0x400a6666
 8001980:	51eb851f 	.word	0x51eb851f
 8001984:	40e76be8 	.word	0x40e76be8
 8001988:	33333333 	.word	0x33333333
 800198c:	40d1c933 	.word	0x40d1c933
 8001990:	1eb851ec 	.word	0x1eb851ec
 8001994:	40e8c58d 	.word	0x40e8c58d
 8001998:	d70a3d71 	.word	0xd70a3d71
 800199c:	40da2be3 	.word	0x40da2be3
 80019a0:	33333333 	.word	0x33333333
 80019a4:	40bb90d3 	.word	0x40bb90d3
 80019a8:	b0f27bb3 	.word	0xb0f27bb3
 80019ac:	408726d0 	.word	0x408726d0
 80019b0:	40b00000 	.word	0x40b00000
 80019b4:	40080000 	.word	0x40080000
 80019b8:	40100000 	.word	0x40100000
 80019bc:	40140000 	.word	0x40140000

080019c0 <getTempCH2>:

static int getTempCH2(ADC_HandleTypeDef* hadc)
{
 80019c0:	b5b0      	push	{r4, r5, r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	uint32_t adcVal = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
	float voltage = 0.0;
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
	int temp = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
	ADC_ChannelConfTypeDef sConfig = {0};
 80019d6:	f107 0308 	add.w	r3, r7, #8
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_2;
 80019e2:	2302      	movs	r3, #2
 80019e4:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80019e6:	2301      	movs	r3, #1
 80019e8:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80019ea:	2305      	movs	r3, #5
 80019ec:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	4619      	mov	r1, r3
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 fde3 	bl	80025c0 <HAL_ADC_ConfigChannel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <getTempCH2+0x44>
	{
		Error_Handler();
 8001a00:	f000 f8ca 	bl	8001b98 <Error_Handler>
	}

	HAL_ADC_Start(hadc);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 fbef 	bl	80021e8 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(hadc, 1);
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 fcc5 	bl	800239c <HAL_ADC_PollForConversion>

	adcVal = HAL_ADC_GetValue(hadc);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 fdc8 	bl	80025a8 <HAL_ADC_GetValue>
 8001a18:	61f8      	str	r0, [r7, #28]

	HAL_ADC_Stop(hadc);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 fc92 	bl	8002344 <HAL_ADC_Stop>

	adcVal += 105;
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	3369      	adds	r3, #105	; 0x69
 8001a24:	61fb      	str	r3, [r7, #28]

	voltage = ((adcVal * 3.3) / 4096);
 8001a26:	69f8      	ldr	r0, [r7, #28]
 8001a28:	f7fe fcd4 	bl	80003d4 <__aeabi_ui2d>
 8001a2c:	a348      	add	r3, pc, #288	; (adr r3, 8001b50 <getTempCH2+0x190>)
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	f7fe fd49 	bl	80004c8 <__aeabi_dmul>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	4b51      	ldr	r3, [pc, #324]	; (8001b88 <getTempCH2+0x1c8>)
 8001a44:	f7fe fe6a 	bl	800071c <__aeabi_ddiv>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f7ff f812 	bl	8000a78 <__aeabi_d2f>
 8001a54:	4603      	mov	r3, r0
 8001a56:	61bb      	str	r3, [r7, #24]

	temp = (int)(18212.8 - (47967.26*voltage) + (50732.41*pow(voltage, 2)) - (26799.56*pow(voltage, 3)) + (7056.825*pow(voltage, 4))
 8001a58:	69b8      	ldr	r0, [r7, #24]
 8001a5a:	f7fe fcdd 	bl	8000418 <__aeabi_f2d>
 8001a5e:	a33e      	add	r3, pc, #248	; (adr r3, 8001b58 <getTempCH2+0x198>)
 8001a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a64:	f7fe fd30 	bl	80004c8 <__aeabi_dmul>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	a13c      	add	r1, pc, #240	; (adr r1, 8001b60 <getTempCH2+0x1a0>)
 8001a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a72:	f7fe fb71 	bl	8000158 <__aeabi_dsub>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4614      	mov	r4, r2
 8001a7c:	461d      	mov	r5, r3
 8001a7e:	69b8      	ldr	r0, [r7, #24]
 8001a80:	f7fe fcca 	bl	8000418 <__aeabi_f2d>
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a8c:	f002 fe02 	bl	8004694 <pow>
 8001a90:	a335      	add	r3, pc, #212	; (adr r3, 8001b68 <getTempCH2+0x1a8>)
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	f7fe fd17 	bl	80004c8 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	f7fe fb5b 	bl	800015c <__adddf3>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4614      	mov	r4, r2
 8001aac:	461d      	mov	r5, r3
 8001aae:	69b8      	ldr	r0, [r7, #24]
 8001ab0:	f7fe fcb2 	bl	8000418 <__aeabi_f2d>
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b34      	ldr	r3, [pc, #208]	; (8001b8c <getTempCH2+0x1cc>)
 8001aba:	f002 fdeb 	bl	8004694 <pow>
 8001abe:	a32c      	add	r3, pc, #176	; (adr r3, 8001b70 <getTempCH2+0x1b0>)
 8001ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac4:	f7fe fd00 	bl	80004c8 <__aeabi_dmul>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4620      	mov	r0, r4
 8001ace:	4629      	mov	r1, r5
 8001ad0:	f7fe fb42 	bl	8000158 <__aeabi_dsub>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4614      	mov	r4, r2
 8001ada:	461d      	mov	r5, r3
 8001adc:	69b8      	ldr	r0, [r7, #24]
 8001ade:	f7fe fc9b 	bl	8000418 <__aeabi_f2d>
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	4b2a      	ldr	r3, [pc, #168]	; (8001b90 <getTempCH2+0x1d0>)
 8001ae8:	f002 fdd4 	bl	8004694 <pow>
 8001aec:	a322      	add	r3, pc, #136	; (adr r3, 8001b78 <getTempCH2+0x1b8>)
 8001aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af2:	f7fe fce9 	bl	80004c8 <__aeabi_dmul>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4620      	mov	r0, r4
 8001afc:	4629      	mov	r1, r5
 8001afe:	f7fe fb2d 	bl	800015c <__adddf3>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4614      	mov	r4, r2
 8001b08:	461d      	mov	r5, r3
	        - (740.8519*pow(voltage, 5)));
 8001b0a:	69b8      	ldr	r0, [r7, #24]
 8001b0c:	f7fe fc84 	bl	8000418 <__aeabi_f2d>
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <getTempCH2+0x1d4>)
 8001b16:	f002 fdbd 	bl	8004694 <pow>
 8001b1a:	a319      	add	r3, pc, #100	; (adr r3, 8001b80 <getTempCH2+0x1c0>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f7fe fcd2 	bl	80004c8 <__aeabi_dmul>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4620      	mov	r0, r4
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	f7fe fb14 	bl	8000158 <__aeabi_dsub>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
	temp = (int)(18212.8 - (47967.26*voltage) + (50732.41*pow(voltage, 2)) - (26799.56*pow(voltage, 3)) + (7056.825*pow(voltage, 4))
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	f7fe ff76 	bl	8000a28 <__aeabi_d2iz>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	617b      	str	r3, [r7, #20]

	return temp;
 8001b40:	697b      	ldr	r3, [r7, #20]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3720      	adds	r7, #32
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bdb0      	pop	{r4, r5, r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	f3af 8000 	nop.w
 8001b50:	66666666 	.word	0x66666666
 8001b54:	400a6666 	.word	0x400a6666
 8001b58:	51eb851f 	.word	0x51eb851f
 8001b5c:	40e76be8 	.word	0x40e76be8
 8001b60:	33333333 	.word	0x33333333
 8001b64:	40d1c933 	.word	0x40d1c933
 8001b68:	1eb851ec 	.word	0x1eb851ec
 8001b6c:	40e8c58d 	.word	0x40e8c58d
 8001b70:	d70a3d71 	.word	0xd70a3d71
 8001b74:	40da2be3 	.word	0x40da2be3
 8001b78:	33333333 	.word	0x33333333
 8001b7c:	40bb90d3 	.word	0x40bb90d3
 8001b80:	b0f27bb3 	.word	0xb0f27bb3
 8001b84:	408726d0 	.word	0x408726d0
 8001b88:	40b00000 	.word	0x40b00000
 8001b8c:	40080000 	.word	0x40080000
 8001b90:	40100000 	.word	0x40100000
 8001b94:	40140000 	.word	0x40140000

08001b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b9c:	b672      	cpsid	i
}
 8001b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(FAULT_PIN_PORT, FAULT_OUT_PIN, GPIO_PIN_RESET);
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <Error_Handler+0x1c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f001 ffa7 	bl	8003afe <HAL_GPIO_WritePin>
 8001bb0:	e7f6      	b.n	8001ba0 <Error_Handler+0x8>
 8001bb2:	bf00      	nop
 8001bb4:	20000000 	.word	0x20000000

08001bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_MspInit+0x5c>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	4a14      	ldr	r2, [pc, #80]	; (8001c14 <HAL_MspInit+0x5c>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6193      	str	r3, [r2, #24]
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_MspInit+0x5c>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <HAL_MspInit+0x5c>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <HAL_MspInit+0x5c>)
 8001bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be0:	61d3      	str	r3, [r2, #28]
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <HAL_MspInit+0x5c>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_MspInit+0x60>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <HAL_MspInit+0x60>)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40010000 	.word	0x40010000

08001c1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 0310 	add.w	r3, r7, #16
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <HAL_ADC_MspInit+0x6c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d121      	bne.n	8001c80 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c3c:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <HAL_ADC_MspInit+0x70>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <HAL_ADC_MspInit+0x70>)
 8001c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c46:	6193      	str	r3, [r2, #24]
 8001c48:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_ADC_MspInit+0x70>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_ADC_MspInit+0x70>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <HAL_ADC_MspInit+0x70>)
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	6193      	str	r3, [r2, #24]
 8001c60:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <HAL_ADC_MspInit+0x70>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001c6c:	2306      	movs	r3, #6
 8001c6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c70:	2303      	movs	r3, #3
 8001c72:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c74:	f107 0310 	add.w	r3, r7, #16
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4805      	ldr	r0, [pc, #20]	; (8001c90 <HAL_ADC_MspInit+0x74>)
 8001c7c:	f001 fda4 	bl	80037c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c80:	bf00      	nop
 8001c82:	3720      	adds	r7, #32
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40012400 	.word	0x40012400
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40010800 	.word	0x40010800

08001c94 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0310 	add.w	r3, r7, #16
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a24      	ldr	r2, [pc, #144]	; (8001d40 <HAL_CAN_MspInit+0xac>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d141      	bne.n	8001d38 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001cb4:	4b23      	ldr	r3, [pc, #140]	; (8001d44 <HAL_CAN_MspInit+0xb0>)
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	4a22      	ldr	r2, [pc, #136]	; (8001d44 <HAL_CAN_MspInit+0xb0>)
 8001cba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	61d3      	str	r3, [r2, #28]
 8001cc0:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <HAL_CAN_MspInit+0xb0>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ccc:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <HAL_CAN_MspInit+0xb0>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	4a1c      	ldr	r2, [pc, #112]	; (8001d44 <HAL_CAN_MspInit+0xb0>)
 8001cd2:	f043 0304 	orr.w	r3, r3, #4
 8001cd6:	6193      	str	r3, [r2, #24]
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <HAL_CAN_MspInit+0xb0>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ce4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ce8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	f107 0310 	add.w	r3, r7, #16
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4813      	ldr	r0, [pc, #76]	; (8001d48 <HAL_CAN_MspInit+0xb4>)
 8001cfa:	f001 fd65 	bl	80037c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	4619      	mov	r1, r3
 8001d12:	480d      	ldr	r0, [pc, #52]	; (8001d48 <HAL_CAN_MspInit+0xb4>)
 8001d14:	f001 fd58 	bl	80037c8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	2014      	movs	r0, #20
 8001d1e:	f001 fd1c 	bl	800375a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001d22:	2014      	movs	r0, #20
 8001d24:	f001 fd35 	bl	8003792 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	2015      	movs	r0, #21
 8001d2e:	f001 fd14 	bl	800375a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001d32:	2015      	movs	r0, #21
 8001d34:	f001 fd2d 	bl	8003792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001d38:	bf00      	nop
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40006400 	.word	0x40006400
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40010800 	.word	0x40010800

08001d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d50:	e7fe      	b.n	8001d50 <NMI_Handler+0x4>

08001d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <HardFault_Handler+0x4>

08001d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <MemManage_Handler+0x4>

08001d5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <BusFault_Handler+0x4>

08001d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <UsageFault_Handler+0x4>

08001d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr

08001d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr

08001d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d92:	f000 f935 	bl	8002000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001da2:	f001 f9e0 	bl	8003166 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200000d0 	.word	0x200000d0

08001db0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <CAN1_RX1_IRQHandler+0x10>)
 8001db6:	f001 f9d6 	bl	8003166 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200000d0 	.word	0x200000d0

08001dc4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001dc8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001dcc:	f001 feb0 	bl	8003b30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <Unpack_TS_ECU_ChargingStateTrigger_Temp>:

#include "temp.h"

// --------------------------------------------------------------------------
uint32_t Unpack_TS_ECU_ChargingStateTrigger_Temp(TS_ECU_ChargingStateTrigger_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	4613      	mov	r3, r2
 8001dec:	71fb      	strb	r3, [r7, #7]
  _m->Orion_2_ChargePowerState = (_d[0] & (0x01U));
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	701a      	strb	r2, [r3, #0]
  _m->Orion_2_ChargeSafetyState = ((_d[0] >> 1) & (0x01U));
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	085b      	lsrs	r3, r3, #1
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	705a      	strb	r2, [r3, #1]
  return TS_ECU_ChargingStateTrigger_CANID;
 8001e0e:	f240 23ba 	movw	r3, #698	; 0x2ba
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <Pack_TS_ECU1_TX1_Temp>:
  _m->TS_ECU_CurrentState = ((_d[4] >> 5) & (0x07U));
  return TS_ECU1_TX1_CANID;
}

uint32_t Pack_TS_ECU1_TX1_Temp(const TS_ECU1_TX1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0; i < TS_ECU1_TX1_DLC; _d[i++] = 0);
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	75fb      	strb	r3, [r7, #23]
 8001e2e:	e007      	b.n	8001e40 <Pack_TS_ECU1_TX1_Temp+0x24>
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	75fa      	strb	r2, [r7, #23]
 8001e36:	461a      	mov	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d9f4      	bls.n	8001e30 <Pack_TS_ECU1_TX1_Temp+0x14>

  _d[0] |= (_m->TS_ECU_MaxSegmentTemperature & (0xFFU));
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	781a      	ldrb	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	4313      	orrs	r3, r2
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	701a      	strb	r2, [r3, #0]
  _d[1] |= (_m->TS_ECU_MinSegmentTemperature & (0xFFU));
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	7819      	ldrb	r1, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	701a      	strb	r2, [r3, #0]
  _d[2] |= (_m->TS_ECU_AverageSegmentTemp & (0xFFU));
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	3302      	adds	r3, #2
 8001e76:	7819      	ldrb	r1, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	3302      	adds	r3, #2
 8001e84:	430a      	orrs	r2, r1
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	701a      	strb	r2, [r3, #0]
  _d[3] |= (_m->TS_ECU_MaxTemperatureCellCount & (0xFFU));
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	3303      	adds	r3, #3
 8001e8e:	7819      	ldrb	r1, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	799a      	ldrb	r2, [r3, #6]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	3303      	adds	r3, #3
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	701a      	strb	r2, [r3, #0]
  _d[4] |= (_m->TS_ECU_FaultInState & (0x01U)) | ((_m->TS_ECU_FaultOutState & (0x01U)) << 1) | ((_m->TS_ECU_TempThresholdFault & (0x01U)) << 2) | ((_m->TS_ECU_OpenCircuitFault & (0x01U)) << 3) | ((_m->FAN_ECU_ShortToGroundFault & (0x01U)) << 4) | ((_m->TS_ECU_CurrentState & (0x07U)) << 5);
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	7819      	ldrb	r1, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	79db      	ldrb	r3, [r3, #7]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	7a1b      	ldrb	r3, [r3, #8]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	7a5b      	ldrb	r3, [r3, #9]
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	7a9b      	ldrb	r3, [r3, #10]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	7adb      	ldrb	r3, [r3, #11]
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	7b1b      	ldrb	r3, [r3, #12]
 8001efa:	015b      	lsls	r3, r3, #5
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	4313      	orrs	r3, r2
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	3304      	adds	r3, #4
 8001f06:	430a      	orrs	r2, r1
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	701a      	strb	r2, [r3, #0]
  *_len = 5; *_ide = 0;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2205      	movs	r2, #5
 8001f10:	701a      	strb	r2, [r3, #0]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
  return TS_ECU1_TX1_CANID;
 8001f18:	f240 3311 	movw	r3, #785	; 0x311
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	371c      	adds	r7, #28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
	...

08001f28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f28:	f7ff ff54 	bl	8001dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f2c:	480b      	ldr	r0, [pc, #44]	; (8001f5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f2e:	490c      	ldr	r1, [pc, #48]	; (8001f60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f30:	4a0c      	ldr	r2, [pc, #48]	; (8001f64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f34:	e002      	b.n	8001f3c <LoopCopyDataInit>

08001f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3a:	3304      	adds	r3, #4

08001f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f40:	d3f9      	bcc.n	8001f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f42:	4a09      	ldr	r2, [pc, #36]	; (8001f68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f44:	4c09      	ldr	r4, [pc, #36]	; (8001f6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f48:	e001      	b.n	8001f4e <LoopFillZerobss>

08001f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f4c:	3204      	adds	r2, #4

08001f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f50:	d3fb      	bcc.n	8001f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f52:	f002 fb7b 	bl	800464c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f56:	f7fe ff8b 	bl	8000e70 <main>
  bx lr
 8001f5a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f60:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001f64:	08005538 	.word	0x08005538
  ldr r2, =_sbss
 8001f68:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001f6c:	200002ec 	.word	0x200002ec

08001f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f70:	e7fe      	b.n	8001f70 <ADC1_2_IRQHandler>
	...

08001f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_Init+0x28>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <HAL_Init+0x28>)
 8001f7e:	f043 0310 	orr.w	r3, r3, #16
 8001f82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f84:	2003      	movs	r0, #3
 8001f86:	f001 fbdd 	bl	8003744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f8a:	200f      	movs	r0, #15
 8001f8c:	f000 f808 	bl	8001fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f90:	f7ff fe12 	bl	8001bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40022000 	.word	0x40022000

08001fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_InitTick+0x54>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_InitTick+0x58>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f001 fbf5 	bl	80037ae <HAL_SYSTICK_Config>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e00e      	b.n	8001fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b0f      	cmp	r3, #15
 8001fd2:	d80a      	bhi.n	8001fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fdc:	f001 fbbd 	bl	800375a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe0:	4a06      	ldr	r2, [pc, #24]	; (8001ffc <HAL_InitTick+0x5c>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e000      	b.n	8001fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20000010 	.word	0x20000010
 8001ff8:	20000018 	.word	0x20000018
 8001ffc:	20000014 	.word	0x20000014

08002000 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_IncTick+0x1c>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_IncTick+0x20>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4413      	add	r3, r2
 8002010:	4a03      	ldr	r2, [pc, #12]	; (8002020 <HAL_IncTick+0x20>)
 8002012:	6013      	str	r3, [r2, #0]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	20000018 	.word	0x20000018
 8002020:	200001b0 	.word	0x200001b0

08002024 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return uwTick;
 8002028:	4b02      	ldr	r3, [pc, #8]	; (8002034 <HAL_GetTick+0x10>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	200001b0 	.word	0x200001b0

08002038 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e0be      	b.n	80021d8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002064:	2b00      	cmp	r3, #0
 8002066:	d109      	bne.n	800207c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff fdd0 	bl	8001c1c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 fbf1 	bl	8002864 <ADC_ConversionStop_Disable>
 8002082:	4603      	mov	r3, r0
 8002084:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208a:	f003 0310 	and.w	r3, r3, #16
 800208e:	2b00      	cmp	r3, #0
 8002090:	f040 8099 	bne.w	80021c6 <HAL_ADC_Init+0x18e>
 8002094:	7dfb      	ldrb	r3, [r7, #23]
 8002096:	2b00      	cmp	r3, #0
 8002098:	f040 8095 	bne.w	80021c6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020a4:	f023 0302 	bic.w	r3, r3, #2
 80020a8:	f043 0202 	orr.w	r2, r3, #2
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7b1b      	ldrb	r3, [r3, #12]
 80020be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020d0:	d003      	beq.n	80020da <HAL_ADC_Init+0xa2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d102      	bne.n	80020e0 <HAL_ADC_Init+0xa8>
 80020da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020de:	e000      	b.n	80020e2 <HAL_ADC_Init+0xaa>
 80020e0:	2300      	movs	r3, #0
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	7d1b      	ldrb	r3, [r3, #20]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d119      	bne.n	8002124 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	7b1b      	ldrb	r3, [r3, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d109      	bne.n	800210c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	035a      	lsls	r2, r3, #13
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	e00b      	b.n	8002124 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	f043 0220 	orr.w	r2, r3, #32
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	f043 0201 	orr.w	r2, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	430a      	orrs	r2, r1
 8002136:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	4b28      	ldr	r3, [pc, #160]	; (80021e0 <HAL_ADC_Init+0x1a8>)
 8002140:	4013      	ands	r3, r2
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6812      	ldr	r2, [r2, #0]
 8002146:	68b9      	ldr	r1, [r7, #8]
 8002148:	430b      	orrs	r3, r1
 800214a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002154:	d003      	beq.n	800215e <HAL_ADC_Init+0x126>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d104      	bne.n	8002168 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	3b01      	subs	r3, #1
 8002164:	051b      	lsls	r3, r3, #20
 8002166:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	430a      	orrs	r2, r1
 800217a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <HAL_ADC_Init+0x1ac>)
 8002184:	4013      	ands	r3, r2
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	429a      	cmp	r2, r3
 800218a:	d10b      	bne.n	80021a4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002196:	f023 0303 	bic.w	r3, r3, #3
 800219a:	f043 0201 	orr.w	r2, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021a2:	e018      	b.n	80021d6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	f023 0312 	bic.w	r3, r3, #18
 80021ac:	f043 0210 	orr.w	r2, r3, #16
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b8:	f043 0201 	orr.w	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021c4:	e007      	b.n	80021d6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	f043 0210 	orr.w	r2, r3, #16
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	ffe1f7fd 	.word	0xffe1f7fd
 80021e4:	ff1f0efe 	.word	0xff1f0efe

080021e8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_Start+0x1a>
 80021fe:	2302      	movs	r3, #2
 8002200:	e098      	b.n	8002334 <HAL_ADC_Start+0x14c>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fad0 	bl	80027b0 <ADC_Enable>
 8002210:	4603      	mov	r3, r0
 8002212:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	2b00      	cmp	r3, #0
 8002218:	f040 8087 	bne.w	800232a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a41      	ldr	r2, [pc, #260]	; (800233c <HAL_ADC_Start+0x154>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d105      	bne.n	8002246 <HAL_ADC_Start+0x5e>
 800223a:	4b41      	ldr	r3, [pc, #260]	; (8002340 <HAL_ADC_Start+0x158>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d115      	bne.n	8002272 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225c:	2b00      	cmp	r3, #0
 800225e:	d026      	beq.n	80022ae <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002264:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002268:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002270:	e01d      	b.n	80022ae <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a2f      	ldr	r2, [pc, #188]	; (8002340 <HAL_ADC_Start+0x158>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d004      	beq.n	8002292 <HAL_ADC_Start+0xaa>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a2b      	ldr	r2, [pc, #172]	; (800233c <HAL_ADC_Start+0x154>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d10d      	bne.n	80022ae <HAL_ADC_Start+0xc6>
 8002292:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <HAL_ADC_Start+0x158>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229a:	2b00      	cmp	r3, #0
 800229c:	d007      	beq.n	80022ae <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d006      	beq.n	80022c8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	f023 0206 	bic.w	r2, r3, #6
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80022c6:	e002      	b.n	80022ce <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f06f 0202 	mvn.w	r2, #2
 80022de:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022ea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022ee:	d113      	bne.n	8002318 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022f4:	4a11      	ldr	r2, [pc, #68]	; (800233c <HAL_ADC_Start+0x154>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d105      	bne.n	8002306 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_ADC_Start+0x158>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002302:	2b00      	cmp	r3, #0
 8002304:	d108      	bne.n	8002318 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002314:	609a      	str	r2, [r3, #8]
 8002316:	e00c      	b.n	8002332 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	e003      	b.n	8002332 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002332:	7bfb      	ldrb	r3, [r7, #15]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40012800 	.word	0x40012800
 8002340:	40012400 	.word	0x40012400

08002344 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_ADC_Stop+0x1a>
 800235a:	2302      	movs	r3, #2
 800235c:	e01a      	b.n	8002394 <HAL_ADC_Stop+0x50>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 fa7c 	bl	8002864 <ADC_ConversionStop_Disable>
 800236c:	4603      	mov	r3, r0
 800236e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800237e:	f023 0301 	bic.w	r3, r3, #1
 8002382:	f043 0201 	orr.w	r2, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002392:	7bfb      	ldrb	r3, [r7, #15]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80023b2:	f7ff fe37 	bl	8002024 <HAL_GetTick>
 80023b6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ca:	f043 0220 	orr.w	r2, r3, #32
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e0d3      	b.n	8002586 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d131      	bne.n	8002450 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d12a      	bne.n	8002450 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80023fa:	e021      	b.n	8002440 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002402:	d01d      	beq.n	8002440 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d007      	beq.n	800241a <HAL_ADC_PollForConversion+0x7e>
 800240a:	f7ff fe0b 	bl	8002024 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d212      	bcs.n	8002440 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10b      	bne.n	8002440 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	f043 0204 	orr.w	r2, r3, #4
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e0a2      	b.n	8002586 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0d6      	beq.n	80023fc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800244e:	e070      	b.n	8002532 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002450:	4b4f      	ldr	r3, [pc, #316]	; (8002590 <HAL_ADC_PollForConversion+0x1f4>)
 8002452:	681c      	ldr	r4, [r3, #0]
 8002454:	2002      	movs	r0, #2
 8002456:	f002 f835 	bl	80044c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800245a:	4603      	mov	r3, r0
 800245c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6919      	ldr	r1, [r3, #16]
 8002466:	4b4b      	ldr	r3, [pc, #300]	; (8002594 <HAL_ADC_PollForConversion+0x1f8>)
 8002468:	400b      	ands	r3, r1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d118      	bne.n	80024a0 <HAL_ADC_PollForConversion+0x104>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68d9      	ldr	r1, [r3, #12]
 8002474:	4b48      	ldr	r3, [pc, #288]	; (8002598 <HAL_ADC_PollForConversion+0x1fc>)
 8002476:	400b      	ands	r3, r1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d111      	bne.n	80024a0 <HAL_ADC_PollForConversion+0x104>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6919      	ldr	r1, [r3, #16]
 8002482:	4b46      	ldr	r3, [pc, #280]	; (800259c <HAL_ADC_PollForConversion+0x200>)
 8002484:	400b      	ands	r3, r1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d108      	bne.n	800249c <HAL_ADC_PollForConversion+0x100>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68d9      	ldr	r1, [r3, #12]
 8002490:	4b43      	ldr	r3, [pc, #268]	; (80025a0 <HAL_ADC_PollForConversion+0x204>)
 8002492:	400b      	ands	r3, r1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_ADC_PollForConversion+0x100>
 8002498:	2314      	movs	r3, #20
 800249a:	e020      	b.n	80024de <HAL_ADC_PollForConversion+0x142>
 800249c:	2329      	movs	r3, #41	; 0x29
 800249e:	e01e      	b.n	80024de <HAL_ADC_PollForConversion+0x142>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6919      	ldr	r1, [r3, #16]
 80024a6:	4b3d      	ldr	r3, [pc, #244]	; (800259c <HAL_ADC_PollForConversion+0x200>)
 80024a8:	400b      	ands	r3, r1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <HAL_ADC_PollForConversion+0x120>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68d9      	ldr	r1, [r3, #12]
 80024b4:	4b3a      	ldr	r3, [pc, #232]	; (80025a0 <HAL_ADC_PollForConversion+0x204>)
 80024b6:	400b      	ands	r3, r1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00d      	beq.n	80024d8 <HAL_ADC_PollForConversion+0x13c>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6919      	ldr	r1, [r3, #16]
 80024c2:	4b38      	ldr	r3, [pc, #224]	; (80025a4 <HAL_ADC_PollForConversion+0x208>)
 80024c4:	400b      	ands	r3, r1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d108      	bne.n	80024dc <HAL_ADC_PollForConversion+0x140>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68d9      	ldr	r1, [r3, #12]
 80024d0:	4b34      	ldr	r3, [pc, #208]	; (80025a4 <HAL_ADC_PollForConversion+0x208>)
 80024d2:	400b      	ands	r3, r1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_ADC_PollForConversion+0x140>
 80024d8:	2354      	movs	r3, #84	; 0x54
 80024da:	e000      	b.n	80024de <HAL_ADC_PollForConversion+0x142>
 80024dc:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80024de:	fb02 f303 	mul.w	r3, r2, r3
 80024e2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80024e4:	e021      	b.n	800252a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ec:	d01a      	beq.n	8002524 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <HAL_ADC_PollForConversion+0x168>
 80024f4:	f7ff fd96 	bl	8002024 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d20f      	bcs.n	8002524 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	429a      	cmp	r2, r3
 800250a:	d90b      	bls.n	8002524 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002510:	f043 0204 	orr.w	r2, r3, #4
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e030      	b.n	8002586 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	3301      	adds	r3, #1
 8002528:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	429a      	cmp	r2, r3
 8002530:	d8d9      	bhi.n	80024e6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f06f 0212 	mvn.w	r2, #18
 800253a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002552:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002556:	d115      	bne.n	8002584 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800255c:	2b00      	cmp	r3, #0
 800255e:	d111      	bne.n	8002584 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d105      	bne.n	8002584 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	f043 0201 	orr.w	r2, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	371c      	adds	r7, #28
 800258a:	46bd      	mov	sp, r7
 800258c:	bd90      	pop	{r4, r7, pc}
 800258e:	bf00      	nop
 8002590:	20000010 	.word	0x20000010
 8002594:	24924924 	.word	0x24924924
 8002598:	00924924 	.word	0x00924924
 800259c:	12492492 	.word	0x12492492
 80025a0:	00492492 	.word	0x00492492
 80025a4:	00249249 	.word	0x00249249

080025a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x20>
 80025dc:	2302      	movs	r3, #2
 80025de:	e0dc      	b.n	800279a <HAL_ADC_ConfigChannel+0x1da>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b06      	cmp	r3, #6
 80025ee:	d81c      	bhi.n	800262a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	3b05      	subs	r3, #5
 8002602:	221f      	movs	r2, #31
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	4019      	ands	r1, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	3b05      	subs	r3, #5
 800261c:	fa00 f203 	lsl.w	r2, r0, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	635a      	str	r2, [r3, #52]	; 0x34
 8002628:	e03c      	b.n	80026a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b0c      	cmp	r3, #12
 8002630:	d81c      	bhi.n	800266c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	3b23      	subs	r3, #35	; 0x23
 8002644:	221f      	movs	r2, #31
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	4019      	ands	r1, r3
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	3b23      	subs	r3, #35	; 0x23
 800265e:	fa00 f203 	lsl.w	r2, r0, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	631a      	str	r2, [r3, #48]	; 0x30
 800266a:	e01b      	b.n	80026a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	3b41      	subs	r3, #65	; 0x41
 800267e:	221f      	movs	r2, #31
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	4019      	ands	r1, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	3b41      	subs	r3, #65	; 0x41
 8002698:	fa00 f203 	lsl.w	r2, r0, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b09      	cmp	r3, #9
 80026aa:	d91c      	bls.n	80026e6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68d9      	ldr	r1, [r3, #12]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	3b1e      	subs	r3, #30
 80026be:	2207      	movs	r2, #7
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	4019      	ands	r1, r3
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6898      	ldr	r0, [r3, #8]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	3b1e      	subs	r3, #30
 80026d8:	fa00 f203 	lsl.w	r2, r0, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	60da      	str	r2, [r3, #12]
 80026e4:	e019      	b.n	800271a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6919      	ldr	r1, [r3, #16]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	2207      	movs	r2, #7
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	4019      	ands	r1, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6898      	ldr	r0, [r3, #8]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	fa00 f203 	lsl.w	r2, r0, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b10      	cmp	r3, #16
 8002720:	d003      	beq.n	800272a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002726:	2b11      	cmp	r3, #17
 8002728:	d132      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a1d      	ldr	r2, [pc, #116]	; (80027a4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d125      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d126      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002750:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b10      	cmp	r3, #16
 8002758:	d11a      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <HAL_ADC_ConfigChannel+0x1e8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a13      	ldr	r2, [pc, #76]	; (80027ac <HAL_ADC_ConfigChannel+0x1ec>)
 8002760:	fba2 2303 	umull	r2, r3, r2, r3
 8002764:	0c9a      	lsrs	r2, r3, #18
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002770:	e002      	b.n	8002778 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	3b01      	subs	r3, #1
 8002776:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f9      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x1b2>
 800277e:	e007      	b.n	8002790 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	f043 0220 	orr.w	r2, r3, #32
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002798:	7bfb      	ldrb	r3, [r7, #15]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	40012400 	.word	0x40012400
 80027a8:	20000010 	.word	0x20000010
 80027ac:	431bde83 	.word	0x431bde83

080027b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d040      	beq.n	8002850 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0201 	orr.w	r2, r2, #1
 80027dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027de:	4b1f      	ldr	r3, [pc, #124]	; (800285c <ADC_Enable+0xac>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1f      	ldr	r2, [pc, #124]	; (8002860 <ADC_Enable+0xb0>)
 80027e4:	fba2 2303 	umull	r2, r3, r2, r3
 80027e8:	0c9b      	lsrs	r3, r3, #18
 80027ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027ec:	e002      	b.n	80027f4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f9      	bne.n	80027ee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027fa:	f7ff fc13 	bl	8002024 <HAL_GetTick>
 80027fe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002800:	e01f      	b.n	8002842 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002802:	f7ff fc0f 	bl	8002024 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d918      	bls.n	8002842 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d011      	beq.n	8002842 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	f043 0210 	orr.w	r2, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	f043 0201 	orr.w	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e007      	b.n	8002852 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b01      	cmp	r3, #1
 800284e:	d1d8      	bne.n	8002802 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000010 	.word	0x20000010
 8002860:	431bde83 	.word	0x431bde83

08002864 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b01      	cmp	r3, #1
 800287c:	d12e      	bne.n	80028dc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800288e:	f7ff fbc9 	bl	8002024 <HAL_GetTick>
 8002892:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002894:	e01b      	b.n	80028ce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002896:	f7ff fbc5 	bl	8002024 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d914      	bls.n	80028ce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d10d      	bne.n	80028ce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b6:	f043 0210 	orr.w	r2, r3, #16
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c2:	f043 0201 	orr.w	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e007      	b.n	80028de <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d0dc      	beq.n	8002896 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b084      	sub	sp, #16
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0ed      	b.n	8002ad4 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d102      	bne.n	800290a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff f9c5 	bl	8001c94 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0201 	orr.w	r2, r2, #1
 8002918:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800291a:	f7ff fb83 	bl	8002024 <HAL_GetTick>
 800291e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002920:	e012      	b.n	8002948 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002922:	f7ff fb7f 	bl	8002024 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b0a      	cmp	r3, #10
 800292e:	d90b      	bls.n	8002948 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2205      	movs	r2, #5
 8002940:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0c5      	b.n	8002ad4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0e5      	beq.n	8002922 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0202 	bic.w	r2, r2, #2
 8002964:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002966:	f7ff fb5d 	bl	8002024 <HAL_GetTick>
 800296a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800296c:	e012      	b.n	8002994 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800296e:	f7ff fb59 	bl	8002024 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b0a      	cmp	r3, #10
 800297a:	d90b      	bls.n	8002994 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2205      	movs	r2, #5
 800298c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e09f      	b.n	8002ad4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1e5      	bne.n	800296e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	7e1b      	ldrb	r3, [r3, #24]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d108      	bne.n	80029bc <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	e007      	b.n	80029cc <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7e5b      	ldrb	r3, [r3, #25]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d108      	bne.n	80029e6 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	e007      	b.n	80029f6 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	7e9b      	ldrb	r3, [r3, #26]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d108      	bne.n	8002a10 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0220 	orr.w	r2, r2, #32
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	e007      	b.n	8002a20 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0220 	bic.w	r2, r2, #32
 8002a1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	7edb      	ldrb	r3, [r3, #27]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d108      	bne.n	8002a3a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0210 	bic.w	r2, r2, #16
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	e007      	b.n	8002a4a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0210 	orr.w	r2, r2, #16
 8002a48:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	7f1b      	ldrb	r3, [r3, #28]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d108      	bne.n	8002a64 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 0208 	orr.w	r2, r2, #8
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	e007      	b.n	8002a74 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0208 	bic.w	r2, r2, #8
 8002a72:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7f5b      	ldrb	r3, [r3, #29]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d108      	bne.n	8002a8e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0204 	orr.w	r2, r2, #4
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	e007      	b.n	8002a9e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0204 	bic.w	r2, r2, #4
 8002a9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	ea42 0103 	orr.w	r1, r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	1e5a      	subs	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002af2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002af4:	7cfb      	ldrb	r3, [r7, #19]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d003      	beq.n	8002b02 <HAL_CAN_ConfigFilter+0x26>
 8002afa:	7cfb      	ldrb	r3, [r7, #19]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	f040 80aa 	bne.w	8002c56 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b08:	f043 0201 	orr.w	r2, r3, #1
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	f003 031f 	and.w	r3, r3, #31
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	401a      	ands	r2, r3
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d123      	bne.n	8002b84 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	43db      	mvns	r3, r3
 8002b46:	401a      	ands	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b5e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	3248      	adds	r2, #72	; 0x48
 8002b64:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b78:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b7a:	6979      	ldr	r1, [r7, #20]
 8002b7c:	3348      	adds	r3, #72	; 0x48
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	440b      	add	r3, r1
 8002b82:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d122      	bne.n	8002bd2 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	431a      	orrs	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002bac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	3248      	adds	r2, #72	; 0x48
 8002bb2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bc6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bc8:	6979      	ldr	r1, [r7, #20]
 8002bca:	3348      	adds	r3, #72	; 0x48
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	43db      	mvns	r3, r3
 8002be4:	401a      	ands	r2, r3
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002bec:	e007      	b.n	8002bfe <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d109      	bne.n	8002c1a <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	401a      	ands	r2, r3
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002c18:	e007      	b.n	8002c2a <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d107      	bne.n	8002c42 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c48:	f023 0201 	bic.w	r2, r3, #1
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e006      	b.n	8002c64 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
  }
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	371c      	adds	r7, #28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d12e      	bne.n	8002ce0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2202      	movs	r2, #2
 8002c86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0201 	bic.w	r2, r2, #1
 8002c98:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c9a:	f7ff f9c3 	bl	8002024 <HAL_GetTick>
 8002c9e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ca0:	e012      	b.n	8002cc8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ca2:	f7ff f9bf 	bl	8002024 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b0a      	cmp	r3, #10
 8002cae:	d90b      	bls.n	8002cc8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2205      	movs	r2, #5
 8002cc0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e012      	b.n	8002cee <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1e5      	bne.n	8002ca2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e006      	b.n	8002cee <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
  }
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b089      	sub	sp, #36	; 0x24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d14:	7ffb      	ldrb	r3, [r7, #31]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d003      	beq.n	8002d22 <HAL_CAN_AddTxMessage+0x2c>
 8002d1a:	7ffb      	ldrb	r3, [r7, #31]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	f040 80ad 	bne.w	8002e7c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d105      	bne.n	8002d42 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8095 	beq.w	8002e6c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	0e1b      	lsrs	r3, r3, #24
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	409a      	lsls	r2, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10d      	bne.n	8002d7a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d68:	68f9      	ldr	r1, [r7, #12]
 8002d6a:	6809      	ldr	r1, [r1, #0]
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	3318      	adds	r3, #24
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	440b      	add	r3, r1
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	e00f      	b.n	8002d9a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d84:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d8a:	68f9      	ldr	r1, [r7, #12]
 8002d8c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002d8e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	3318      	adds	r3, #24
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	440b      	add	r3, r1
 8002d98:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6819      	ldr	r1, [r3, #0]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	3318      	adds	r3, #24
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	440b      	add	r3, r1
 8002daa:	3304      	adds	r3, #4
 8002dac:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	7d1b      	ldrb	r3, [r3, #20]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d111      	bne.n	8002dda <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	3318      	adds	r3, #24
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	6811      	ldr	r1, [r2, #0]
 8002dca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	3318      	adds	r3, #24
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3307      	adds	r3, #7
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	061a      	lsls	r2, r3, #24
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3306      	adds	r3, #6
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	041b      	lsls	r3, r3, #16
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3305      	adds	r3, #5
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	4313      	orrs	r3, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	3204      	adds	r2, #4
 8002dfa:	7812      	ldrb	r2, [r2, #0]
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	6811      	ldr	r1, [r2, #0]
 8002e02:	ea43 0200 	orr.w	r2, r3, r0
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	440b      	add	r3, r1
 8002e0c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002e10:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3303      	adds	r3, #3
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	061a      	lsls	r2, r3, #24
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	041b      	lsls	r3, r3, #16
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3301      	adds	r3, #1
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	7812      	ldrb	r2, [r2, #0]
 8002e32:	4610      	mov	r0, r2
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	6811      	ldr	r1, [r2, #0]
 8002e38:	ea43 0200 	orr.w	r2, r3, r0
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	440b      	add	r3, r1
 8002e42:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002e46:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	3318      	adds	r3, #24
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	4413      	add	r3, r2
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	6811      	ldr	r1, [r2, #0]
 8002e5a:	f043 0201 	orr.w	r2, r3, #1
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	3318      	adds	r3, #24
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	440b      	add	r3, r1
 8002e66:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	e00e      	b.n	8002e8a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e006      	b.n	8002e8a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
  }
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3724      	adds	r7, #36	; 0x24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ea8:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8002eaa:	7afb      	ldrb	r3, [r7, #11]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d002      	beq.n	8002eb6 <HAL_CAN_IsTxMessagePending+0x22>
 8002eb0:	7afb      	ldrb	r3, [r7, #11]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d10b      	bne.n	8002ece <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	069b      	lsls	r3, r3, #26
 8002ec0:	401a      	ands	r2, r3
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	069b      	lsls	r3, r3, #26
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d001      	beq.n	8002ece <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8002ece:	68fb      	ldr	r3, [r7, #12]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002eda:	b480      	push	{r7}
 8002edc:	b087      	sub	sp, #28
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eee:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ef0:	7dfb      	ldrb	r3, [r7, #23]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d003      	beq.n	8002efe <HAL_CAN_GetRxMessage+0x24>
 8002ef6:	7dfb      	ldrb	r3, [r7, #23]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	f040 8103 	bne.w	8003104 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10e      	bne.n	8002f22 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d116      	bne.n	8002f40 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e0f7      	b.n	8003112 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d107      	bne.n	8002f40 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0e8      	b.n	8003112 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	331b      	adds	r3, #27
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	4413      	add	r3, r2
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0204 	and.w	r2, r3, #4
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10c      	bne.n	8002f78 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	331b      	adds	r3, #27
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	4413      	add	r3, r2
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	0d5b      	lsrs	r3, r3, #21
 8002f6e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	e00b      	b.n	8002f90 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	331b      	adds	r3, #27
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	4413      	add	r3, r2
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	08db      	lsrs	r3, r3, #3
 8002f88:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	331b      	adds	r3, #27
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	4413      	add	r3, r2
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0202 	and.w	r2, r3, #2
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	331b      	adds	r3, #27
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	611a      	str	r2, [r3, #16]
 8002fc4:	e00b      	b.n	8002fde <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	331b      	adds	r3, #27
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 020f 	and.w	r2, r3, #15
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	331b      	adds	r3, #27
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	4413      	add	r3, r2
 8002fea:	3304      	adds	r3, #4
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	331b      	adds	r3, #27
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	4413      	add	r3, r2
 8003002:	3304      	adds	r3, #4
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	0c1b      	lsrs	r3, r3, #16
 8003008:	b29a      	uxth	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	4413      	add	r3, r2
 8003018:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	b2da      	uxtb	r2, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	4413      	add	r3, r2
 800302e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	0a1a      	lsrs	r2, r3, #8
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	4413      	add	r3, r2
 8003048:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	0c1a      	lsrs	r2, r3, #16
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	3302      	adds	r3, #2
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	4413      	add	r3, r2
 8003062:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	0e1a      	lsrs	r2, r3, #24
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	3303      	adds	r3, #3
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	4413      	add	r3, r2
 800307c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	3304      	adds	r3, #4
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	4413      	add	r3, r2
 8003094:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	0a1a      	lsrs	r2, r3, #8
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	3305      	adds	r3, #5
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	0c1a      	lsrs	r2, r3, #16
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	3306      	adds	r3, #6
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	0e1a      	lsrs	r2, r3, #24
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	3307      	adds	r3, #7
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d108      	bne.n	80030f0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0220 	orr.w	r2, r2, #32
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	e007      	b.n	8003100 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691a      	ldr	r2, [r3, #16]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0220 	orr.w	r2, r2, #32
 80030fe:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	e006      	b.n	8003112 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
  }
}
 8003112:	4618      	mov	r0, r3
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr

0800311c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3020 	ldrb.w	r3, [r3, #32]
 800312c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d002      	beq.n	800313a <HAL_CAN_ActivateNotification+0x1e>
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d109      	bne.n	800314e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6959      	ldr	r1, [r3, #20]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	e006      	b.n	800315c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
  }
}
 800315c:	4618      	mov	r0, r3
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr

08003166 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b08a      	sub	sp, #40	; 0x28
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800316e:	2300      	movs	r3, #0
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d07c      	beq.n	80032a6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d023      	beq.n	80031fe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2201      	movs	r2, #1
 80031bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f983 	bl	80034d4 <HAL_CAN_TxMailbox0CompleteCallback>
 80031ce:	e016      	b.n	80031fe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d004      	beq.n	80031e4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
 80031e2:	e00c      	b.n	80031fe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d004      	beq.n	80031f8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
 80031f6:	e002      	b.n	80031fe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f986 	bl	800350a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d024      	beq.n	8003252 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003210:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f962 	bl	80034e6 <HAL_CAN_TxMailbox1CompleteCallback>
 8003222:	e016      	b.n	8003252 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322a:	2b00      	cmp	r3, #0
 800322c:	d004      	beq.n	8003238 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
 8003236:	e00c      	b.n	8003252 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800323e:	2b00      	cmp	r3, #0
 8003240:	d004      	beq.n	800324c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
 800324a:	e002      	b.n	8003252 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f965 	bl	800351c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d024      	beq.n	80032a6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003264:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f941 	bl	80034f8 <HAL_CAN_TxMailbox2CompleteCallback>
 8003276:	e016      	b.n	80032a6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d004      	beq.n	800328c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
 800328a:	e00c      	b.n	80032a6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d004      	beq.n	80032a0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
 800329e:	e002      	b.n	80032a6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f944 	bl	800352e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00c      	beq.n	80032ca <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f003 0310 	and.w	r3, r3, #16
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d007      	beq.n	80032ca <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2210      	movs	r2, #16
 80032c8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00b      	beq.n	80032ec <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d006      	beq.n	80032ec <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2208      	movs	r2, #8
 80032e4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f92a 	bl	8003540 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d009      	beq.n	800330a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7fd fd6f 	bl	8000de8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00c      	beq.n	800332e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b00      	cmp	r3, #0
 800331c:	d007      	beq.n	800332e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003324:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2210      	movs	r2, #16
 800332c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00b      	beq.n	8003350 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d006      	beq.n	8003350 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2208      	movs	r2, #8
 8003348:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f90a 	bl	8003564 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	2b00      	cmp	r3, #0
 8003358:	d009      	beq.n	800336e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f8f2 	bl	8003552 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00b      	beq.n	8003390 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f003 0310 	and.w	r3, r3, #16
 800337e:	2b00      	cmp	r3, #0
 8003380:	d006      	beq.n	8003390 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2210      	movs	r2, #16
 8003388:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f8f3 	bl	8003576 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00b      	beq.n	80033b2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d006      	beq.n	80033b2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2208      	movs	r2, #8
 80033aa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f8eb 	bl	8003588 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d07b      	beq.n	80034b4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d072      	beq.n	80034ac <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	f043 0302 	orr.w	r3, r3, #2
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	f043 0304 	orr.w	r3, r3, #4
 8003418:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003420:	2b00      	cmp	r3, #0
 8003422:	d043      	beq.n	80034ac <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800342a:	2b00      	cmp	r3, #0
 800342c:	d03e      	beq.n	80034ac <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003434:	2b60      	cmp	r3, #96	; 0x60
 8003436:	d02b      	beq.n	8003490 <HAL_CAN_IRQHandler+0x32a>
 8003438:	2b60      	cmp	r3, #96	; 0x60
 800343a:	d82e      	bhi.n	800349a <HAL_CAN_IRQHandler+0x334>
 800343c:	2b50      	cmp	r3, #80	; 0x50
 800343e:	d022      	beq.n	8003486 <HAL_CAN_IRQHandler+0x320>
 8003440:	2b50      	cmp	r3, #80	; 0x50
 8003442:	d82a      	bhi.n	800349a <HAL_CAN_IRQHandler+0x334>
 8003444:	2b40      	cmp	r3, #64	; 0x40
 8003446:	d019      	beq.n	800347c <HAL_CAN_IRQHandler+0x316>
 8003448:	2b40      	cmp	r3, #64	; 0x40
 800344a:	d826      	bhi.n	800349a <HAL_CAN_IRQHandler+0x334>
 800344c:	2b30      	cmp	r3, #48	; 0x30
 800344e:	d010      	beq.n	8003472 <HAL_CAN_IRQHandler+0x30c>
 8003450:	2b30      	cmp	r3, #48	; 0x30
 8003452:	d822      	bhi.n	800349a <HAL_CAN_IRQHandler+0x334>
 8003454:	2b10      	cmp	r3, #16
 8003456:	d002      	beq.n	800345e <HAL_CAN_IRQHandler+0x2f8>
 8003458:	2b20      	cmp	r3, #32
 800345a:	d005      	beq.n	8003468 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800345c:	e01d      	b.n	800349a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	f043 0308 	orr.w	r3, r3, #8
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003466:	e019      	b.n	800349c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	f043 0310 	orr.w	r3, r3, #16
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003470:	e014      	b.n	800349c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	f043 0320 	orr.w	r3, r3, #32
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800347a:	e00f      	b.n	800349c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003482:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003484:	e00a      	b.n	800349c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800348e:	e005      	b.n	800349c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003498:	e000      	b.n	800349c <HAL_CAN_IRQHandler+0x336>
            break;
 800349a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80034aa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2204      	movs	r2, #4
 80034b2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d008      	beq.n	80034cc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f867 	bl	800359a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80034cc:	bf00      	nop
 80034ce:	3728      	adds	r7, #40	; 0x28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr

080034e6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr

0800350a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr

0800351c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr

0800352e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr

08003552 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr

08003564 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr

08003576 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr

08003588 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	4770      	bx	lr

0800359a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr

080035ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035bc:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <__NVIC_SetPriorityGrouping+0x44>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035c8:	4013      	ands	r3, r2
 80035ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035de:	4a04      	ldr	r2, [pc, #16]	; (80035f0 <__NVIC_SetPriorityGrouping+0x44>)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	60d3      	str	r3, [r2, #12]
}
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	e000ed00 	.word	0xe000ed00

080035f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <__NVIC_GetPriorityGrouping+0x18>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	0a1b      	lsrs	r3, r3, #8
 80035fe:	f003 0307 	and.w	r3, r3, #7
}
 8003602:	4618      	mov	r0, r3
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	e000ed00 	.word	0xe000ed00

08003610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800361a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361e:	2b00      	cmp	r3, #0
 8003620:	db0b      	blt.n	800363a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	f003 021f 	and.w	r2, r3, #31
 8003628:	4906      	ldr	r1, [pc, #24]	; (8003644 <__NVIC_EnableIRQ+0x34>)
 800362a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	2001      	movs	r0, #1
 8003632:	fa00 f202 	lsl.w	r2, r0, r2
 8003636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr
 8003644:	e000e100 	.word	0xe000e100

08003648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	6039      	str	r1, [r7, #0]
 8003652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003658:	2b00      	cmp	r3, #0
 800365a:	db0a      	blt.n	8003672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	b2da      	uxtb	r2, r3
 8003660:	490c      	ldr	r1, [pc, #48]	; (8003694 <__NVIC_SetPriority+0x4c>)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	0112      	lsls	r2, r2, #4
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	440b      	add	r3, r1
 800366c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003670:	e00a      	b.n	8003688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	b2da      	uxtb	r2, r3
 8003676:	4908      	ldr	r1, [pc, #32]	; (8003698 <__NVIC_SetPriority+0x50>)
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	3b04      	subs	r3, #4
 8003680:	0112      	lsls	r2, r2, #4
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	440b      	add	r3, r1
 8003686:	761a      	strb	r2, [r3, #24]
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	e000e100 	.word	0xe000e100
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800369c:	b480      	push	{r7}
 800369e:	b089      	sub	sp, #36	; 0x24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f1c3 0307 	rsb	r3, r3, #7
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	bf28      	it	cs
 80036ba:	2304      	movcs	r3, #4
 80036bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3304      	adds	r3, #4
 80036c2:	2b06      	cmp	r3, #6
 80036c4:	d902      	bls.n	80036cc <NVIC_EncodePriority+0x30>
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3b03      	subs	r3, #3
 80036ca:	e000      	b.n	80036ce <NVIC_EncodePriority+0x32>
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d0:	f04f 32ff 	mov.w	r2, #4294967295
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43da      	mvns	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	401a      	ands	r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036e4:	f04f 31ff 	mov.w	r1, #4294967295
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	fa01 f303 	lsl.w	r3, r1, r3
 80036ee:	43d9      	mvns	r1, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f4:	4313      	orrs	r3, r2
         );
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3724      	adds	r7, #36	; 0x24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3b01      	subs	r3, #1
 800370c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003710:	d301      	bcc.n	8003716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003712:	2301      	movs	r3, #1
 8003714:	e00f      	b.n	8003736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003716:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <SysTick_Config+0x40>)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3b01      	subs	r3, #1
 800371c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800371e:	210f      	movs	r1, #15
 8003720:	f04f 30ff 	mov.w	r0, #4294967295
 8003724:	f7ff ff90 	bl	8003648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003728:	4b05      	ldr	r3, [pc, #20]	; (8003740 <SysTick_Config+0x40>)
 800372a:	2200      	movs	r2, #0
 800372c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800372e:	4b04      	ldr	r3, [pc, #16]	; (8003740 <SysTick_Config+0x40>)
 8003730:	2207      	movs	r2, #7
 8003732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	e000e010 	.word	0xe000e010

08003744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff ff2d 	bl	80035ac <__NVIC_SetPriorityGrouping>
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800375a:	b580      	push	{r7, lr}
 800375c:	b086      	sub	sp, #24
 800375e:	af00      	add	r7, sp, #0
 8003760:	4603      	mov	r3, r0
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	607a      	str	r2, [r7, #4]
 8003766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800376c:	f7ff ff42 	bl	80035f4 <__NVIC_GetPriorityGrouping>
 8003770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	68b9      	ldr	r1, [r7, #8]
 8003776:	6978      	ldr	r0, [r7, #20]
 8003778:	f7ff ff90 	bl	800369c <NVIC_EncodePriority>
 800377c:	4602      	mov	r2, r0
 800377e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003782:	4611      	mov	r1, r2
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff ff5f 	bl	8003648 <__NVIC_SetPriority>
}
 800378a:	bf00      	nop
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b082      	sub	sp, #8
 8003796:	af00      	add	r7, sp, #0
 8003798:	4603      	mov	r3, r0
 800379a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800379c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff ff35 	bl	8003610 <__NVIC_EnableIRQ>
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff ffa2 	bl	8003700 <SysTick_Config>
 80037bc:	4603      	mov	r3, r0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b08b      	sub	sp, #44	; 0x2c
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037d2:	2300      	movs	r3, #0
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80037d6:	2300      	movs	r3, #0
 80037d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037da:	e169      	b.n	8003ab0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80037dc:	2201      	movs	r2, #1
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	4013      	ands	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	f040 8158 	bne.w	8003aaa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4a9a      	ldr	r2, [pc, #616]	; (8003a68 <HAL_GPIO_Init+0x2a0>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d05e      	beq.n	80038c2 <HAL_GPIO_Init+0xfa>
 8003804:	4a98      	ldr	r2, [pc, #608]	; (8003a68 <HAL_GPIO_Init+0x2a0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d875      	bhi.n	80038f6 <HAL_GPIO_Init+0x12e>
 800380a:	4a98      	ldr	r2, [pc, #608]	; (8003a6c <HAL_GPIO_Init+0x2a4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d058      	beq.n	80038c2 <HAL_GPIO_Init+0xfa>
 8003810:	4a96      	ldr	r2, [pc, #600]	; (8003a6c <HAL_GPIO_Init+0x2a4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d86f      	bhi.n	80038f6 <HAL_GPIO_Init+0x12e>
 8003816:	4a96      	ldr	r2, [pc, #600]	; (8003a70 <HAL_GPIO_Init+0x2a8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d052      	beq.n	80038c2 <HAL_GPIO_Init+0xfa>
 800381c:	4a94      	ldr	r2, [pc, #592]	; (8003a70 <HAL_GPIO_Init+0x2a8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d869      	bhi.n	80038f6 <HAL_GPIO_Init+0x12e>
 8003822:	4a94      	ldr	r2, [pc, #592]	; (8003a74 <HAL_GPIO_Init+0x2ac>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d04c      	beq.n	80038c2 <HAL_GPIO_Init+0xfa>
 8003828:	4a92      	ldr	r2, [pc, #584]	; (8003a74 <HAL_GPIO_Init+0x2ac>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d863      	bhi.n	80038f6 <HAL_GPIO_Init+0x12e>
 800382e:	4a92      	ldr	r2, [pc, #584]	; (8003a78 <HAL_GPIO_Init+0x2b0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d046      	beq.n	80038c2 <HAL_GPIO_Init+0xfa>
 8003834:	4a90      	ldr	r2, [pc, #576]	; (8003a78 <HAL_GPIO_Init+0x2b0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d85d      	bhi.n	80038f6 <HAL_GPIO_Init+0x12e>
 800383a:	2b12      	cmp	r3, #18
 800383c:	d82a      	bhi.n	8003894 <HAL_GPIO_Init+0xcc>
 800383e:	2b12      	cmp	r3, #18
 8003840:	d859      	bhi.n	80038f6 <HAL_GPIO_Init+0x12e>
 8003842:	a201      	add	r2, pc, #4	; (adr r2, 8003848 <HAL_GPIO_Init+0x80>)
 8003844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003848:	080038c3 	.word	0x080038c3
 800384c:	0800389d 	.word	0x0800389d
 8003850:	080038af 	.word	0x080038af
 8003854:	080038f1 	.word	0x080038f1
 8003858:	080038f7 	.word	0x080038f7
 800385c:	080038f7 	.word	0x080038f7
 8003860:	080038f7 	.word	0x080038f7
 8003864:	080038f7 	.word	0x080038f7
 8003868:	080038f7 	.word	0x080038f7
 800386c:	080038f7 	.word	0x080038f7
 8003870:	080038f7 	.word	0x080038f7
 8003874:	080038f7 	.word	0x080038f7
 8003878:	080038f7 	.word	0x080038f7
 800387c:	080038f7 	.word	0x080038f7
 8003880:	080038f7 	.word	0x080038f7
 8003884:	080038f7 	.word	0x080038f7
 8003888:	080038f7 	.word	0x080038f7
 800388c:	080038a5 	.word	0x080038a5
 8003890:	080038b9 	.word	0x080038b9
 8003894:	4a79      	ldr	r2, [pc, #484]	; (8003a7c <HAL_GPIO_Init+0x2b4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d013      	beq.n	80038c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800389a:	e02c      	b.n	80038f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	623b      	str	r3, [r7, #32]
          break;
 80038a2:	e029      	b.n	80038f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	3304      	adds	r3, #4
 80038aa:	623b      	str	r3, [r7, #32]
          break;
 80038ac:	e024      	b.n	80038f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	3308      	adds	r3, #8
 80038b4:	623b      	str	r3, [r7, #32]
          break;
 80038b6:	e01f      	b.n	80038f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	330c      	adds	r3, #12
 80038be:	623b      	str	r3, [r7, #32]
          break;
 80038c0:	e01a      	b.n	80038f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d102      	bne.n	80038d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80038ca:	2304      	movs	r3, #4
 80038cc:	623b      	str	r3, [r7, #32]
          break;
 80038ce:	e013      	b.n	80038f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d105      	bne.n	80038e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038d8:	2308      	movs	r3, #8
 80038da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	611a      	str	r2, [r3, #16]
          break;
 80038e2:	e009      	b.n	80038f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038e4:	2308      	movs	r3, #8
 80038e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	615a      	str	r2, [r3, #20]
          break;
 80038ee:	e003      	b.n	80038f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80038f0:	2300      	movs	r3, #0
 80038f2:	623b      	str	r3, [r7, #32]
          break;
 80038f4:	e000      	b.n	80038f8 <HAL_GPIO_Init+0x130>
          break;
 80038f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	2bff      	cmp	r3, #255	; 0xff
 80038fc:	d801      	bhi.n	8003902 <HAL_GPIO_Init+0x13a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	e001      	b.n	8003906 <HAL_GPIO_Init+0x13e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3304      	adds	r3, #4
 8003906:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	2bff      	cmp	r3, #255	; 0xff
 800390c:	d802      	bhi.n	8003914 <HAL_GPIO_Init+0x14c>
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	e002      	b.n	800391a <HAL_GPIO_Init+0x152>
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	3b08      	subs	r3, #8
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	210f      	movs	r1, #15
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	fa01 f303 	lsl.w	r3, r1, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	401a      	ands	r2, r3
 800392c:	6a39      	ldr	r1, [r7, #32]
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	fa01 f303 	lsl.w	r3, r1, r3
 8003934:	431a      	orrs	r2, r3
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 80b1 	beq.w	8003aaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003948:	4b4d      	ldr	r3, [pc, #308]	; (8003a80 <HAL_GPIO_Init+0x2b8>)
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	4a4c      	ldr	r2, [pc, #304]	; (8003a80 <HAL_GPIO_Init+0x2b8>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6193      	str	r3, [r2, #24]
 8003954:	4b4a      	ldr	r3, [pc, #296]	; (8003a80 <HAL_GPIO_Init+0x2b8>)
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003960:	4a48      	ldr	r2, [pc, #288]	; (8003a84 <HAL_GPIO_Init+0x2bc>)
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	089b      	lsrs	r3, r3, #2
 8003966:	3302      	adds	r3, #2
 8003968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800396c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	220f      	movs	r2, #15
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4013      	ands	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a40      	ldr	r2, [pc, #256]	; (8003a88 <HAL_GPIO_Init+0x2c0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d013      	beq.n	80039b4 <HAL_GPIO_Init+0x1ec>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a3f      	ldr	r2, [pc, #252]	; (8003a8c <HAL_GPIO_Init+0x2c4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d00d      	beq.n	80039b0 <HAL_GPIO_Init+0x1e8>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a3e      	ldr	r2, [pc, #248]	; (8003a90 <HAL_GPIO_Init+0x2c8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d007      	beq.n	80039ac <HAL_GPIO_Init+0x1e4>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a3d      	ldr	r2, [pc, #244]	; (8003a94 <HAL_GPIO_Init+0x2cc>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d101      	bne.n	80039a8 <HAL_GPIO_Init+0x1e0>
 80039a4:	2303      	movs	r3, #3
 80039a6:	e006      	b.n	80039b6 <HAL_GPIO_Init+0x1ee>
 80039a8:	2304      	movs	r3, #4
 80039aa:	e004      	b.n	80039b6 <HAL_GPIO_Init+0x1ee>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e002      	b.n	80039b6 <HAL_GPIO_Init+0x1ee>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <HAL_GPIO_Init+0x1ee>
 80039b4:	2300      	movs	r3, #0
 80039b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b8:	f002 0203 	and.w	r2, r2, #3
 80039bc:	0092      	lsls	r2, r2, #2
 80039be:	4093      	lsls	r3, r2
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80039c6:	492f      	ldr	r1, [pc, #188]	; (8003a84 <HAL_GPIO_Init+0x2bc>)
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	089b      	lsrs	r3, r3, #2
 80039cc:	3302      	adds	r3, #2
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d006      	beq.n	80039ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80039e0:	4b2d      	ldr	r3, [pc, #180]	; (8003a98 <HAL_GPIO_Init+0x2d0>)
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	492c      	ldr	r1, [pc, #176]	; (8003a98 <HAL_GPIO_Init+0x2d0>)
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	608b      	str	r3, [r1, #8]
 80039ec:	e006      	b.n	80039fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80039ee:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <HAL_GPIO_Init+0x2d0>)
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	43db      	mvns	r3, r3
 80039f6:	4928      	ldr	r1, [pc, #160]	; (8003a98 <HAL_GPIO_Init+0x2d0>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d006      	beq.n	8003a16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a08:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <HAL_GPIO_Init+0x2d0>)
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	4922      	ldr	r1, [pc, #136]	; (8003a98 <HAL_GPIO_Init+0x2d0>)
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60cb      	str	r3, [r1, #12]
 8003a14:	e006      	b.n	8003a24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a16:	4b20      	ldr	r3, [pc, #128]	; (8003a98 <HAL_GPIO_Init+0x2d0>)
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	491e      	ldr	r1, [pc, #120]	; (8003a98 <HAL_GPIO_Init+0x2d0>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d006      	beq.n	8003a3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a30:	4b19      	ldr	r3, [pc, #100]	; (8003a98 <HAL_GPIO_Init+0x2d0>)
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	4918      	ldr	r1, [pc, #96]	; (8003a98 <HAL_GPIO_Init+0x2d0>)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	604b      	str	r3, [r1, #4]
 8003a3c:	e006      	b.n	8003a4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a3e:	4b16      	ldr	r3, [pc, #88]	; (8003a98 <HAL_GPIO_Init+0x2d0>)
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	43db      	mvns	r3, r3
 8003a46:	4914      	ldr	r1, [pc, #80]	; (8003a98 <HAL_GPIO_Init+0x2d0>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d021      	beq.n	8003a9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a58:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <HAL_GPIO_Init+0x2d0>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	490e      	ldr	r1, [pc, #56]	; (8003a98 <HAL_GPIO_Init+0x2d0>)
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	600b      	str	r3, [r1, #0]
 8003a64:	e021      	b.n	8003aaa <HAL_GPIO_Init+0x2e2>
 8003a66:	bf00      	nop
 8003a68:	10320000 	.word	0x10320000
 8003a6c:	10310000 	.word	0x10310000
 8003a70:	10220000 	.word	0x10220000
 8003a74:	10210000 	.word	0x10210000
 8003a78:	10120000 	.word	0x10120000
 8003a7c:	10110000 	.word	0x10110000
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40010000 	.word	0x40010000
 8003a88:	40010800 	.word	0x40010800
 8003a8c:	40010c00 	.word	0x40010c00
 8003a90:	40011000 	.word	0x40011000
 8003a94:	40011400 	.word	0x40011400
 8003a98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_GPIO_Init+0x304>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	4909      	ldr	r1, [pc, #36]	; (8003acc <HAL_GPIO_Init+0x304>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	3301      	adds	r3, #1
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f47f ae8e 	bne.w	80037dc <HAL_GPIO_Init+0x14>
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	372c      	adds	r7, #44	; 0x2c
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr
 8003acc:	40010400 	.word	0x40010400

08003ad0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	887b      	ldrh	r3, [r7, #2]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
 8003aec:	e001      	b.n	8003af2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003aee:	2300      	movs	r3, #0
 8003af0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr

08003afe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	460b      	mov	r3, r1
 8003b08:	807b      	strh	r3, [r7, #2]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b0e:	787b      	ldrb	r3, [r7, #1]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b14:	887a      	ldrh	r2, [r7, #2]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b1a:	e003      	b.n	8003b24 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b1c:	887b      	ldrh	r3, [r7, #2]
 8003b1e:	041a      	lsls	r2, r3, #16
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	611a      	str	r2, [r3, #16]
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr
	...

08003b30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b3a:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	88fb      	ldrh	r3, [r7, #6]
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d006      	beq.n	8003b54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b46:	4a05      	ldr	r2, [pc, #20]	; (8003b5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b48:	88fb      	ldrh	r3, [r7, #6]
 8003b4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b4c:	88fb      	ldrh	r3, [r7, #6]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fd f968 	bl	8000e24 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b54:	bf00      	nop
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40010400 	.word	0x40010400

08003b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e272      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 8087 	beq.w	8003c8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b80:	4b92      	ldr	r3, [pc, #584]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f003 030c 	and.w	r3, r3, #12
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d00c      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b8c:	4b8f      	ldr	r3, [pc, #572]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 030c 	and.w	r3, r3, #12
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d112      	bne.n	8003bbe <HAL_RCC_OscConfig+0x5e>
 8003b98:	4b8c      	ldr	r3, [pc, #560]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba4:	d10b      	bne.n	8003bbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba6:	4b89      	ldr	r3, [pc, #548]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d06c      	beq.n	8003c8c <HAL_RCC_OscConfig+0x12c>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d168      	bne.n	8003c8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e24c      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc6:	d106      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x76>
 8003bc8:	4b80      	ldr	r3, [pc, #512]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a7f      	ldr	r2, [pc, #508]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	e02e      	b.n	8003c34 <HAL_RCC_OscConfig+0xd4>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x98>
 8003bde:	4b7b      	ldr	r3, [pc, #492]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a7a      	ldr	r2, [pc, #488]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	4b78      	ldr	r3, [pc, #480]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a77      	ldr	r2, [pc, #476]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	e01d      	b.n	8003c34 <HAL_RCC_OscConfig+0xd4>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0xbc>
 8003c02:	4b72      	ldr	r3, [pc, #456]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a71      	ldr	r2, [pc, #452]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	4b6f      	ldr	r3, [pc, #444]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a6e      	ldr	r2, [pc, #440]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e00b      	b.n	8003c34 <HAL_RCC_OscConfig+0xd4>
 8003c1c:	4b6b      	ldr	r3, [pc, #428]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a6a      	ldr	r2, [pc, #424]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	4b68      	ldr	r3, [pc, #416]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a67      	ldr	r2, [pc, #412]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d013      	beq.n	8003c64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3c:	f7fe f9f2 	bl	8002024 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c44:	f7fe f9ee 	bl	8002024 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	; 0x64
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e200      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c56:	4b5d      	ldr	r3, [pc, #372]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0xe4>
 8003c62:	e014      	b.n	8003c8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fe f9de 	bl	8002024 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c6c:	f7fe f9da 	bl	8002024 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	; 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e1ec      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7e:	4b53      	ldr	r3, [pc, #332]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x10c>
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d063      	beq.n	8003d62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c9a:	4b4c      	ldr	r3, [pc, #304]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ca6:	4b49      	ldr	r3, [pc, #292]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d11c      	bne.n	8003cec <HAL_RCC_OscConfig+0x18c>
 8003cb2:	4b46      	ldr	r3, [pc, #280]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d116      	bne.n	8003cec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cbe:	4b43      	ldr	r3, [pc, #268]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x176>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e1c0      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd6:	4b3d      	ldr	r3, [pc, #244]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4939      	ldr	r1, [pc, #228]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cea:	e03a      	b.n	8003d62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d020      	beq.n	8003d36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf4:	4b36      	ldr	r3, [pc, #216]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfa:	f7fe f993 	bl	8002024 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d02:	f7fe f98f 	bl	8002024 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e1a1      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d14:	4b2d      	ldr	r3, [pc, #180]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d20:	4b2a      	ldr	r3, [pc, #168]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	4927      	ldr	r1, [pc, #156]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	600b      	str	r3, [r1, #0]
 8003d34:	e015      	b.n	8003d62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d36:	4b26      	ldr	r3, [pc, #152]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3c:	f7fe f972 	bl	8002024 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d44:	f7fe f96e 	bl	8002024 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e180      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d56:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d03a      	beq.n	8003de4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d019      	beq.n	8003daa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d76:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003d78:	2201      	movs	r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7c:	f7fe f952 	bl	8002024 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d84:	f7fe f94e 	bl	8002024 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e160      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d96:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003da2:	2001      	movs	r0, #1
 8003da4:	f000 faba 	bl	800431c <RCC_Delay>
 8003da8:	e01c      	b.n	8003de4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003daa:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db0:	f7fe f938 	bl	8002024 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db6:	e00f      	b.n	8003dd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db8:	f7fe f934 	bl	8002024 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d908      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e146      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
 8003dca:	bf00      	nop
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	42420000 	.word	0x42420000
 8003dd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd8:	4b92      	ldr	r3, [pc, #584]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e9      	bne.n	8003db8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80a6 	beq.w	8003f3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df2:	2300      	movs	r3, #0
 8003df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df6:	4b8b      	ldr	r3, [pc, #556]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10d      	bne.n	8003e1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e02:	4b88      	ldr	r3, [pc, #544]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	4a87      	ldr	r2, [pc, #540]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	61d3      	str	r3, [r2, #28]
 8003e0e:	4b85      	ldr	r3, [pc, #532]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1e:	4b82      	ldr	r3, [pc, #520]	; (8004028 <HAL_RCC_OscConfig+0x4c8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d118      	bne.n	8003e5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2a:	4b7f      	ldr	r3, [pc, #508]	; (8004028 <HAL_RCC_OscConfig+0x4c8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a7e      	ldr	r2, [pc, #504]	; (8004028 <HAL_RCC_OscConfig+0x4c8>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e36:	f7fe f8f5 	bl	8002024 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e3e:	f7fe f8f1 	bl	8002024 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b64      	cmp	r3, #100	; 0x64
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e103      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e50:	4b75      	ldr	r3, [pc, #468]	; (8004028 <HAL_RCC_OscConfig+0x4c8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0f0      	beq.n	8003e3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d106      	bne.n	8003e72 <HAL_RCC_OscConfig+0x312>
 8003e64:	4b6f      	ldr	r3, [pc, #444]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	4a6e      	ldr	r2, [pc, #440]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	6213      	str	r3, [r2, #32]
 8003e70:	e02d      	b.n	8003ece <HAL_RCC_OscConfig+0x36e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCC_OscConfig+0x334>
 8003e7a:	4b6a      	ldr	r3, [pc, #424]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	4a69      	ldr	r2, [pc, #420]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	6213      	str	r3, [r2, #32]
 8003e86:	4b67      	ldr	r3, [pc, #412]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	4a66      	ldr	r2, [pc, #408]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e8c:	f023 0304 	bic.w	r3, r3, #4
 8003e90:	6213      	str	r3, [r2, #32]
 8003e92:	e01c      	b.n	8003ece <HAL_RCC_OscConfig+0x36e>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2b05      	cmp	r3, #5
 8003e9a:	d10c      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x356>
 8003e9c:	4b61      	ldr	r3, [pc, #388]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	4a60      	ldr	r2, [pc, #384]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003ea2:	f043 0304 	orr.w	r3, r3, #4
 8003ea6:	6213      	str	r3, [r2, #32]
 8003ea8:	4b5e      	ldr	r3, [pc, #376]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	4a5d      	ldr	r2, [pc, #372]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6213      	str	r3, [r2, #32]
 8003eb4:	e00b      	b.n	8003ece <HAL_RCC_OscConfig+0x36e>
 8003eb6:	4b5b      	ldr	r3, [pc, #364]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	4a5a      	ldr	r2, [pc, #360]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	6213      	str	r3, [r2, #32]
 8003ec2:	4b58      	ldr	r3, [pc, #352]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	4a57      	ldr	r2, [pc, #348]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	f023 0304 	bic.w	r3, r3, #4
 8003ecc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d015      	beq.n	8003f02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed6:	f7fe f8a5 	bl	8002024 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ede:	f7fe f8a1 	bl	8002024 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e0b1      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef4:	4b4b      	ldr	r3, [pc, #300]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0ee      	beq.n	8003ede <HAL_RCC_OscConfig+0x37e>
 8003f00:	e014      	b.n	8003f2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f02:	f7fe f88f 	bl	8002024 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f08:	e00a      	b.n	8003f20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0a:	f7fe f88b 	bl	8002024 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e09b      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f20:	4b40      	ldr	r3, [pc, #256]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1ee      	bne.n	8003f0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f2c:	7dfb      	ldrb	r3, [r7, #23]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d105      	bne.n	8003f3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f32:	4b3c      	ldr	r3, [pc, #240]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	4a3b      	ldr	r2, [pc, #236]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 8087 	beq.w	8004056 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f48:	4b36      	ldr	r3, [pc, #216]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 030c 	and.w	r3, r3, #12
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d061      	beq.n	8004018 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d146      	bne.n	8003fea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5c:	4b33      	ldr	r3, [pc, #204]	; (800402c <HAL_RCC_OscConfig+0x4cc>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f62:	f7fe f85f 	bl	8002024 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6a:	f7fe f85b 	bl	8002024 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e06d      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f7c:	4b29      	ldr	r3, [pc, #164]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1f0      	bne.n	8003f6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f90:	d108      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f92:	4b24      	ldr	r3, [pc, #144]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	4921      	ldr	r1, [pc, #132]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fa4:	4b1f      	ldr	r3, [pc, #124]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a19      	ldr	r1, [r3, #32]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	491b      	ldr	r1, [pc, #108]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fbc:	4b1b      	ldr	r3, [pc, #108]	; (800402c <HAL_RCC_OscConfig+0x4cc>)
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc2:	f7fe f82f 	bl	8002024 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fca:	f7fe f82b 	bl	8002024 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e03d      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fdc:	4b11      	ldr	r3, [pc, #68]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0f0      	beq.n	8003fca <HAL_RCC_OscConfig+0x46a>
 8003fe8:	e035      	b.n	8004056 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fea:	4b10      	ldr	r3, [pc, #64]	; (800402c <HAL_RCC_OscConfig+0x4cc>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff0:	f7fe f818 	bl	8002024 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff8:	f7fe f814 	bl	8002024 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e026      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800400a:	4b06      	ldr	r3, [pc, #24]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x498>
 8004016:	e01e      	b.n	8004056 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d107      	bne.n	8004030 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e019      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
 8004024:	40021000 	.word	0x40021000
 8004028:	40007000 	.word	0x40007000
 800402c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <HAL_RCC_OscConfig+0x500>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	429a      	cmp	r2, r3
 8004042:	d106      	bne.n	8004052 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404e:	429a      	cmp	r2, r3
 8004050:	d001      	beq.n	8004056 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40021000 	.word	0x40021000

08004064 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0d0      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004078:	4b6a      	ldr	r3, [pc, #424]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d910      	bls.n	80040a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b67      	ldr	r3, [pc, #412]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f023 0207 	bic.w	r2, r3, #7
 800408e:	4965      	ldr	r1, [pc, #404]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	4313      	orrs	r3, r2
 8004094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004096:	4b63      	ldr	r3, [pc, #396]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0b8      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d020      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c0:	4b59      	ldr	r3, [pc, #356]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	4a58      	ldr	r2, [pc, #352]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d8:	4b53      	ldr	r3, [pc, #332]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	4a52      	ldr	r2, [pc, #328]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80040e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e4:	4b50      	ldr	r3, [pc, #320]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	494d      	ldr	r1, [pc, #308]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d040      	beq.n	8004184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d107      	bne.n	800411a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410a:	4b47      	ldr	r3, [pc, #284]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d115      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e07f      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d107      	bne.n	8004132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004122:	4b41      	ldr	r3, [pc, #260]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e073      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004132:	4b3d      	ldr	r3, [pc, #244]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e06b      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004142:	4b39      	ldr	r3, [pc, #228]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f023 0203 	bic.w	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4936      	ldr	r1, [pc, #216]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004150:	4313      	orrs	r3, r2
 8004152:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004154:	f7fd ff66 	bl	8002024 <HAL_GetTick>
 8004158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415a:	e00a      	b.n	8004172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800415c:	f7fd ff62 	bl	8002024 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	; 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e053      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004172:	4b2d      	ldr	r3, [pc, #180]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f003 020c 	and.w	r2, r3, #12
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	429a      	cmp	r2, r3
 8004182:	d1eb      	bne.n	800415c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004184:	4b27      	ldr	r3, [pc, #156]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d210      	bcs.n	80041b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	4b24      	ldr	r3, [pc, #144]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 0207 	bic.w	r2, r3, #7
 800419a:	4922      	ldr	r1, [pc, #136]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	4313      	orrs	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a2:	4b20      	ldr	r3, [pc, #128]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e032      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c0:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4916      	ldr	r1, [pc, #88]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041de:	4b12      	ldr	r3, [pc, #72]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	490e      	ldr	r1, [pc, #56]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041f2:	f000 f821 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 80041f6:	4602      	mov	r2, r0
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	091b      	lsrs	r3, r3, #4
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	490a      	ldr	r1, [pc, #40]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004204:	5ccb      	ldrb	r3, [r1, r3]
 8004206:	fa22 f303 	lsr.w	r3, r2, r3
 800420a:	4a09      	ldr	r2, [pc, #36]	; (8004230 <HAL_RCC_ClockConfig+0x1cc>)
 800420c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800420e:	4b09      	ldr	r3, [pc, #36]	; (8004234 <HAL_RCC_ClockConfig+0x1d0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f7fd fec4 	bl	8001fa0 <HAL_InitTick>

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40022000 	.word	0x40022000
 8004228:	40021000 	.word	0x40021000
 800422c:	080054c0 	.word	0x080054c0
 8004230:	20000010 	.word	0x20000010
 8004234:	20000014 	.word	0x20000014

08004238 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	2300      	movs	r3, #0
 8004244:	60bb      	str	r3, [r7, #8]
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	2300      	movs	r3, #0
 800424c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004252:	4b1e      	ldr	r3, [pc, #120]	; (80042cc <HAL_RCC_GetSysClockFreq+0x94>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f003 030c 	and.w	r3, r3, #12
 800425e:	2b04      	cmp	r3, #4
 8004260:	d002      	beq.n	8004268 <HAL_RCC_GetSysClockFreq+0x30>
 8004262:	2b08      	cmp	r3, #8
 8004264:	d003      	beq.n	800426e <HAL_RCC_GetSysClockFreq+0x36>
 8004266:	e027      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004268:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800426a:	613b      	str	r3, [r7, #16]
      break;
 800426c:	e027      	b.n	80042be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	0c9b      	lsrs	r3, r3, #18
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	4a17      	ldr	r2, [pc, #92]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004278:	5cd3      	ldrb	r3, [r2, r3]
 800427a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d010      	beq.n	80042a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004286:	4b11      	ldr	r3, [pc, #68]	; (80042cc <HAL_RCC_GetSysClockFreq+0x94>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	0c5b      	lsrs	r3, r3, #17
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	4a11      	ldr	r2, [pc, #68]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004292:	5cd3      	ldrb	r3, [r2, r3]
 8004294:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a0d      	ldr	r2, [pc, #52]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800429a:	fb03 f202 	mul.w	r2, r3, r2
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	e004      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a0c      	ldr	r2, [pc, #48]	; (80042dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80042ac:	fb02 f303 	mul.w	r3, r2, r3
 80042b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	613b      	str	r3, [r7, #16]
      break;
 80042b6:	e002      	b.n	80042be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80042ba:	613b      	str	r3, [r7, #16]
      break;
 80042bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042be:	693b      	ldr	r3, [r7, #16]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	371c      	adds	r7, #28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000
 80042d0:	007a1200 	.word	0x007a1200
 80042d4:	080054d8 	.word	0x080054d8
 80042d8:	080054e8 	.word	0x080054e8
 80042dc:	003d0900 	.word	0x003d0900

080042e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042e4:	4b02      	ldr	r3, [pc, #8]	; (80042f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80042e6:	681b      	ldr	r3, [r3, #0]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr
 80042f0:	20000010 	.word	0x20000010

080042f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042f8:	f7ff fff2 	bl	80042e0 <HAL_RCC_GetHCLKFreq>
 80042fc:	4602      	mov	r2, r0
 80042fe:	4b05      	ldr	r3, [pc, #20]	; (8004314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	0adb      	lsrs	r3, r3, #11
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	4903      	ldr	r1, [pc, #12]	; (8004318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800430a:	5ccb      	ldrb	r3, [r1, r3]
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004310:	4618      	mov	r0, r3
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40021000 	.word	0x40021000
 8004318:	080054d0 	.word	0x080054d0

0800431c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004324:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <RCC_Delay+0x34>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a0a      	ldr	r2, [pc, #40]	; (8004354 <RCC_Delay+0x38>)
 800432a:	fba2 2303 	umull	r2, r3, r2, r3
 800432e:	0a5b      	lsrs	r3, r3, #9
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	fb02 f303 	mul.w	r3, r2, r3
 8004336:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004338:	bf00      	nop
  }
  while (Delay --);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	1e5a      	subs	r2, r3, #1
 800433e:	60fa      	str	r2, [r7, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1f9      	bne.n	8004338 <RCC_Delay+0x1c>
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr
 8004350:	20000010 	.word	0x20000010
 8004354:	10624dd3 	.word	0x10624dd3

08004358 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	613b      	str	r3, [r7, #16]
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	d07d      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004374:	2300      	movs	r3, #0
 8004376:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004378:	4b4f      	ldr	r3, [pc, #316]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10d      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004384:	4b4c      	ldr	r3, [pc, #304]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	4a4b      	ldr	r2, [pc, #300]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800438a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800438e:	61d3      	str	r3, [r2, #28]
 8004390:	4b49      	ldr	r3, [pc, #292]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800439c:	2301      	movs	r3, #1
 800439e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a0:	4b46      	ldr	r3, [pc, #280]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d118      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ac:	4b43      	ldr	r3, [pc, #268]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a42      	ldr	r2, [pc, #264]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043b8:	f7fd fe34 	bl	8002024 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043be:	e008      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c0:	f7fd fe30 	bl	8002024 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b64      	cmp	r3, #100	; 0x64
 80043cc:	d901      	bls.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e06d      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d2:	4b3a      	ldr	r3, [pc, #232]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043de:	4b36      	ldr	r3, [pc, #216]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d02e      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d027      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043fc:	4b2e      	ldr	r3, [pc, #184]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004404:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004406:	4b2e      	ldr	r3, [pc, #184]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004408:	2201      	movs	r2, #1
 800440a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800440c:	4b2c      	ldr	r3, [pc, #176]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004412:	4a29      	ldr	r2, [pc, #164]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d014      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004422:	f7fd fdff 	bl	8002024 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004428:	e00a      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442a:	f7fd fdfb 	bl	8002024 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	f241 3288 	movw	r2, #5000	; 0x1388
 8004438:	4293      	cmp	r3, r2
 800443a:	d901      	bls.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e036      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004440:	4b1d      	ldr	r3, [pc, #116]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0ee      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800444c:	4b1a      	ldr	r3, [pc, #104]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	4917      	ldr	r1, [pc, #92]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800445a:	4313      	orrs	r3, r2
 800445c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800445e:	7dfb      	ldrb	r3, [r7, #23]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d105      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004464:	4b14      	ldr	r3, [pc, #80]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	4a13      	ldr	r2, [pc, #76]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800446a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800446e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d008      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800447c:	4b0e      	ldr	r3, [pc, #56]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	490b      	ldr	r1, [pc, #44]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448a:	4313      	orrs	r3, r2
 800448c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0310 	and.w	r3, r3, #16
 8004496:	2b00      	cmp	r3, #0
 8004498:	d008      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800449a:	4b07      	ldr	r3, [pc, #28]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	4904      	ldr	r1, [pc, #16]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40021000 	.word	0x40021000
 80044bc:	40007000 	.word	0x40007000
 80044c0:	42420440 	.word	0x42420440

080044c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	2300      	movs	r3, #0
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	2300      	movs	r3, #0
 80044d6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	2300      	movs	r3, #0
 80044de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b10      	cmp	r3, #16
 80044e4:	d00a      	beq.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b10      	cmp	r3, #16
 80044ea:	f200 808a 	bhi.w	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d045      	beq.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d075      	beq.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80044fa:	e082      	b.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80044fc:	4b46      	ldr	r3, [pc, #280]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004502:	4b45      	ldr	r3, [pc, #276]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d07b      	beq.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	0c9b      	lsrs	r3, r3, #18
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	4a41      	ldr	r2, [pc, #260]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004518:	5cd3      	ldrb	r3, [r2, r3]
 800451a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d015      	beq.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004526:	4b3c      	ldr	r3, [pc, #240]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	0c5b      	lsrs	r3, r3, #17
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	4a3b      	ldr	r2, [pc, #236]	; (8004620 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004532:	5cd3      	ldrb	r3, [r2, r3]
 8004534:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00d      	beq.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004540:	4a38      	ldr	r2, [pc, #224]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	fbb2 f2f3 	udiv	r2, r2, r3
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	fb02 f303 	mul.w	r3, r2, r3
 800454e:	61fb      	str	r3, [r7, #28]
 8004550:	e004      	b.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4a34      	ldr	r2, [pc, #208]	; (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004556:	fb02 f303 	mul.w	r3, r2, r3
 800455a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800455c:	4b2e      	ldr	r3, [pc, #184]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004568:	d102      	bne.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	61bb      	str	r3, [r7, #24]
      break;
 800456e:	e04a      	b.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	4a2d      	ldr	r2, [pc, #180]	; (800462c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004576:	fba2 2303 	umull	r2, r3, r2, r3
 800457a:	085b      	lsrs	r3, r3, #1
 800457c:	61bb      	str	r3, [r7, #24]
      break;
 800457e:	e042      	b.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004580:	4b25      	ldr	r3, [pc, #148]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004590:	d108      	bne.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800459c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	e01f      	b.n	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ae:	d109      	bne.n	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80045b0:	4b19      	ldr	r3, [pc, #100]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80045bc:	f649 4340 	movw	r3, #40000	; 0x9c40
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	e00f      	b.n	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ce:	d11c      	bne.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80045d0:	4b11      	ldr	r3, [pc, #68]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d016      	beq.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80045dc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80045e0:	61bb      	str	r3, [r7, #24]
      break;
 80045e2:	e012      	b.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80045e4:	e011      	b.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80045e6:	f7ff fe85 	bl	80042f4 <HAL_RCC_GetPCLK2Freq>
 80045ea:	4602      	mov	r2, r0
 80045ec:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	0b9b      	lsrs	r3, r3, #14
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	3301      	adds	r3, #1
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fe:	61bb      	str	r3, [r7, #24]
      break;
 8004600:	e004      	b.n	800460c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004602:	bf00      	nop
 8004604:	e002      	b.n	800460c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004606:	bf00      	nop
 8004608:	e000      	b.n	800460c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800460a:	bf00      	nop
    }
  }
  return (frequency);
 800460c:	69bb      	ldr	r3, [r7, #24]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3720      	adds	r7, #32
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40021000 	.word	0x40021000
 800461c:	080054ec 	.word	0x080054ec
 8004620:	080054fc 	.word	0x080054fc
 8004624:	007a1200 	.word	0x007a1200
 8004628:	003d0900 	.word	0x003d0900
 800462c:	aaaaaaab 	.word	0xaaaaaaab

08004630 <memset>:
 8004630:	4603      	mov	r3, r0
 8004632:	4402      	add	r2, r0
 8004634:	4293      	cmp	r3, r2
 8004636:	d100      	bne.n	800463a <memset+0xa>
 8004638:	4770      	bx	lr
 800463a:	f803 1b01 	strb.w	r1, [r3], #1
 800463e:	e7f9      	b.n	8004634 <memset+0x4>

08004640 <__errno>:
 8004640:	4b01      	ldr	r3, [pc, #4]	; (8004648 <__errno+0x8>)
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	20000068 	.word	0x20000068

0800464c <__libc_init_array>:
 800464c:	b570      	push	{r4, r5, r6, lr}
 800464e:	2600      	movs	r6, #0
 8004650:	4d0c      	ldr	r5, [pc, #48]	; (8004684 <__libc_init_array+0x38>)
 8004652:	4c0d      	ldr	r4, [pc, #52]	; (8004688 <__libc_init_array+0x3c>)
 8004654:	1b64      	subs	r4, r4, r5
 8004656:	10a4      	asrs	r4, r4, #2
 8004658:	42a6      	cmp	r6, r4
 800465a:	d109      	bne.n	8004670 <__libc_init_array+0x24>
 800465c:	f000 ff22 	bl	80054a4 <_init>
 8004660:	2600      	movs	r6, #0
 8004662:	4d0a      	ldr	r5, [pc, #40]	; (800468c <__libc_init_array+0x40>)
 8004664:	4c0a      	ldr	r4, [pc, #40]	; (8004690 <__libc_init_array+0x44>)
 8004666:	1b64      	subs	r4, r4, r5
 8004668:	10a4      	asrs	r4, r4, #2
 800466a:	42a6      	cmp	r6, r4
 800466c:	d105      	bne.n	800467a <__libc_init_array+0x2e>
 800466e:	bd70      	pop	{r4, r5, r6, pc}
 8004670:	f855 3b04 	ldr.w	r3, [r5], #4
 8004674:	4798      	blx	r3
 8004676:	3601      	adds	r6, #1
 8004678:	e7ee      	b.n	8004658 <__libc_init_array+0xc>
 800467a:	f855 3b04 	ldr.w	r3, [r5], #4
 800467e:	4798      	blx	r3
 8004680:	3601      	adds	r6, #1
 8004682:	e7f2      	b.n	800466a <__libc_init_array+0x1e>
 8004684:	08005530 	.word	0x08005530
 8004688:	08005530 	.word	0x08005530
 800468c:	08005530 	.word	0x08005530
 8004690:	08005534 	.word	0x08005534

08004694 <pow>:
 8004694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004698:	4614      	mov	r4, r2
 800469a:	461d      	mov	r5, r3
 800469c:	4680      	mov	r8, r0
 800469e:	4689      	mov	r9, r1
 80046a0:	f000 f866 	bl	8004770 <__ieee754_pow>
 80046a4:	4622      	mov	r2, r4
 80046a6:	4606      	mov	r6, r0
 80046a8:	460f      	mov	r7, r1
 80046aa:	462b      	mov	r3, r5
 80046ac:	4620      	mov	r0, r4
 80046ae:	4629      	mov	r1, r5
 80046b0:	f7fc f9a4 	bl	80009fc <__aeabi_dcmpun>
 80046b4:	bbc8      	cbnz	r0, 800472a <pow+0x96>
 80046b6:	2200      	movs	r2, #0
 80046b8:	2300      	movs	r3, #0
 80046ba:	4640      	mov	r0, r8
 80046bc:	4649      	mov	r1, r9
 80046be:	f7fc f96b 	bl	8000998 <__aeabi_dcmpeq>
 80046c2:	b1b8      	cbz	r0, 80046f4 <pow+0x60>
 80046c4:	2200      	movs	r2, #0
 80046c6:	2300      	movs	r3, #0
 80046c8:	4620      	mov	r0, r4
 80046ca:	4629      	mov	r1, r5
 80046cc:	f7fc f964 	bl	8000998 <__aeabi_dcmpeq>
 80046d0:	2800      	cmp	r0, #0
 80046d2:	d141      	bne.n	8004758 <pow+0xc4>
 80046d4:	4620      	mov	r0, r4
 80046d6:	4629      	mov	r1, r5
 80046d8:	f000 f844 	bl	8004764 <finite>
 80046dc:	b328      	cbz	r0, 800472a <pow+0x96>
 80046de:	2200      	movs	r2, #0
 80046e0:	2300      	movs	r3, #0
 80046e2:	4620      	mov	r0, r4
 80046e4:	4629      	mov	r1, r5
 80046e6:	f7fc f961 	bl	80009ac <__aeabi_dcmplt>
 80046ea:	b1f0      	cbz	r0, 800472a <pow+0x96>
 80046ec:	f7ff ffa8 	bl	8004640 <__errno>
 80046f0:	2322      	movs	r3, #34	; 0x22
 80046f2:	e019      	b.n	8004728 <pow+0x94>
 80046f4:	4630      	mov	r0, r6
 80046f6:	4639      	mov	r1, r7
 80046f8:	f000 f834 	bl	8004764 <finite>
 80046fc:	b9c8      	cbnz	r0, 8004732 <pow+0x9e>
 80046fe:	4640      	mov	r0, r8
 8004700:	4649      	mov	r1, r9
 8004702:	f000 f82f 	bl	8004764 <finite>
 8004706:	b1a0      	cbz	r0, 8004732 <pow+0x9e>
 8004708:	4620      	mov	r0, r4
 800470a:	4629      	mov	r1, r5
 800470c:	f000 f82a 	bl	8004764 <finite>
 8004710:	b178      	cbz	r0, 8004732 <pow+0x9e>
 8004712:	4632      	mov	r2, r6
 8004714:	463b      	mov	r3, r7
 8004716:	4630      	mov	r0, r6
 8004718:	4639      	mov	r1, r7
 800471a:	f7fc f96f 	bl	80009fc <__aeabi_dcmpun>
 800471e:	2800      	cmp	r0, #0
 8004720:	d0e4      	beq.n	80046ec <pow+0x58>
 8004722:	f7ff ff8d 	bl	8004640 <__errno>
 8004726:	2321      	movs	r3, #33	; 0x21
 8004728:	6003      	str	r3, [r0, #0]
 800472a:	4630      	mov	r0, r6
 800472c:	4639      	mov	r1, r7
 800472e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004732:	2200      	movs	r2, #0
 8004734:	2300      	movs	r3, #0
 8004736:	4630      	mov	r0, r6
 8004738:	4639      	mov	r1, r7
 800473a:	f7fc f92d 	bl	8000998 <__aeabi_dcmpeq>
 800473e:	2800      	cmp	r0, #0
 8004740:	d0f3      	beq.n	800472a <pow+0x96>
 8004742:	4640      	mov	r0, r8
 8004744:	4649      	mov	r1, r9
 8004746:	f000 f80d 	bl	8004764 <finite>
 800474a:	2800      	cmp	r0, #0
 800474c:	d0ed      	beq.n	800472a <pow+0x96>
 800474e:	4620      	mov	r0, r4
 8004750:	4629      	mov	r1, r5
 8004752:	f000 f807 	bl	8004764 <finite>
 8004756:	e7c8      	b.n	80046ea <pow+0x56>
 8004758:	2600      	movs	r6, #0
 800475a:	4f01      	ldr	r7, [pc, #4]	; (8004760 <pow+0xcc>)
 800475c:	e7e5      	b.n	800472a <pow+0x96>
 800475e:	bf00      	nop
 8004760:	3ff00000 	.word	0x3ff00000

08004764 <finite>:
 8004764:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8004768:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800476c:	0fc0      	lsrs	r0, r0, #31
 800476e:	4770      	bx	lr

08004770 <__ieee754_pow>:
 8004770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004774:	b093      	sub	sp, #76	; 0x4c
 8004776:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800477a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800477e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8004782:	4689      	mov	r9, r1
 8004784:	ea56 0102 	orrs.w	r1, r6, r2
 8004788:	4680      	mov	r8, r0
 800478a:	d111      	bne.n	80047b0 <__ieee754_pow+0x40>
 800478c:	1803      	adds	r3, r0, r0
 800478e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8004792:	4152      	adcs	r2, r2
 8004794:	4299      	cmp	r1, r3
 8004796:	4b82      	ldr	r3, [pc, #520]	; (80049a0 <__ieee754_pow+0x230>)
 8004798:	4193      	sbcs	r3, r2
 800479a:	f080 84ba 	bcs.w	8005112 <__ieee754_pow+0x9a2>
 800479e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047a2:	4640      	mov	r0, r8
 80047a4:	4649      	mov	r1, r9
 80047a6:	f7fb fcd9 	bl	800015c <__adddf3>
 80047aa:	4683      	mov	fp, r0
 80047ac:	468c      	mov	ip, r1
 80047ae:	e06f      	b.n	8004890 <__ieee754_pow+0x120>
 80047b0:	4b7c      	ldr	r3, [pc, #496]	; (80049a4 <__ieee754_pow+0x234>)
 80047b2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80047b6:	429c      	cmp	r4, r3
 80047b8:	464d      	mov	r5, r9
 80047ba:	4682      	mov	sl, r0
 80047bc:	dc06      	bgt.n	80047cc <__ieee754_pow+0x5c>
 80047be:	d101      	bne.n	80047c4 <__ieee754_pow+0x54>
 80047c0:	2800      	cmp	r0, #0
 80047c2:	d1ec      	bne.n	800479e <__ieee754_pow+0x2e>
 80047c4:	429e      	cmp	r6, r3
 80047c6:	dc01      	bgt.n	80047cc <__ieee754_pow+0x5c>
 80047c8:	d10f      	bne.n	80047ea <__ieee754_pow+0x7a>
 80047ca:	b172      	cbz	r2, 80047ea <__ieee754_pow+0x7a>
 80047cc:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80047d0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80047d4:	ea55 050a 	orrs.w	r5, r5, sl
 80047d8:	d1e1      	bne.n	800479e <__ieee754_pow+0x2e>
 80047da:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80047de:	18db      	adds	r3, r3, r3
 80047e0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80047e4:	4152      	adcs	r2, r2
 80047e6:	429d      	cmp	r5, r3
 80047e8:	e7d5      	b.n	8004796 <__ieee754_pow+0x26>
 80047ea:	2d00      	cmp	r5, #0
 80047ec:	da39      	bge.n	8004862 <__ieee754_pow+0xf2>
 80047ee:	4b6e      	ldr	r3, [pc, #440]	; (80049a8 <__ieee754_pow+0x238>)
 80047f0:	429e      	cmp	r6, r3
 80047f2:	dc52      	bgt.n	800489a <__ieee754_pow+0x12a>
 80047f4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80047f8:	429e      	cmp	r6, r3
 80047fa:	f340 849d 	ble.w	8005138 <__ieee754_pow+0x9c8>
 80047fe:	1533      	asrs	r3, r6, #20
 8004800:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004804:	2b14      	cmp	r3, #20
 8004806:	dd0f      	ble.n	8004828 <__ieee754_pow+0xb8>
 8004808:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800480c:	fa22 f103 	lsr.w	r1, r2, r3
 8004810:	fa01 f303 	lsl.w	r3, r1, r3
 8004814:	4293      	cmp	r3, r2
 8004816:	f040 848f 	bne.w	8005138 <__ieee754_pow+0x9c8>
 800481a:	f001 0101 	and.w	r1, r1, #1
 800481e:	f1c1 0302 	rsb	r3, r1, #2
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	b182      	cbz	r2, 8004848 <__ieee754_pow+0xd8>
 8004826:	e05d      	b.n	80048e4 <__ieee754_pow+0x174>
 8004828:	2a00      	cmp	r2, #0
 800482a:	d159      	bne.n	80048e0 <__ieee754_pow+0x170>
 800482c:	f1c3 0314 	rsb	r3, r3, #20
 8004830:	fa46 f103 	asr.w	r1, r6, r3
 8004834:	fa01 f303 	lsl.w	r3, r1, r3
 8004838:	42b3      	cmp	r3, r6
 800483a:	f040 847a 	bne.w	8005132 <__ieee754_pow+0x9c2>
 800483e:	f001 0101 	and.w	r1, r1, #1
 8004842:	f1c1 0302 	rsb	r3, r1, #2
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	4b58      	ldr	r3, [pc, #352]	; (80049ac <__ieee754_pow+0x23c>)
 800484a:	429e      	cmp	r6, r3
 800484c:	d132      	bne.n	80048b4 <__ieee754_pow+0x144>
 800484e:	2f00      	cmp	r7, #0
 8004850:	f280 846b 	bge.w	800512a <__ieee754_pow+0x9ba>
 8004854:	4642      	mov	r2, r8
 8004856:	464b      	mov	r3, r9
 8004858:	2000      	movs	r0, #0
 800485a:	4954      	ldr	r1, [pc, #336]	; (80049ac <__ieee754_pow+0x23c>)
 800485c:	f7fb ff5e 	bl	800071c <__aeabi_ddiv>
 8004860:	e7a3      	b.n	80047aa <__ieee754_pow+0x3a>
 8004862:	2300      	movs	r3, #0
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	2a00      	cmp	r2, #0
 8004868:	d13c      	bne.n	80048e4 <__ieee754_pow+0x174>
 800486a:	4b4e      	ldr	r3, [pc, #312]	; (80049a4 <__ieee754_pow+0x234>)
 800486c:	429e      	cmp	r6, r3
 800486e:	d1eb      	bne.n	8004848 <__ieee754_pow+0xd8>
 8004870:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004874:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004878:	ea53 030a 	orrs.w	r3, r3, sl
 800487c:	f000 8449 	beq.w	8005112 <__ieee754_pow+0x9a2>
 8004880:	4b4b      	ldr	r3, [pc, #300]	; (80049b0 <__ieee754_pow+0x240>)
 8004882:	429c      	cmp	r4, r3
 8004884:	dd0b      	ble.n	800489e <__ieee754_pow+0x12e>
 8004886:	2f00      	cmp	r7, #0
 8004888:	f2c0 8449 	blt.w	800511e <__ieee754_pow+0x9ae>
 800488c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8004890:	4658      	mov	r0, fp
 8004892:	4661      	mov	r1, ip
 8004894:	b013      	add	sp, #76	; 0x4c
 8004896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800489a:	2302      	movs	r3, #2
 800489c:	e7e2      	b.n	8004864 <__ieee754_pow+0xf4>
 800489e:	2f00      	cmp	r7, #0
 80048a0:	f04f 0b00 	mov.w	fp, #0
 80048a4:	f04f 0c00 	mov.w	ip, #0
 80048a8:	daf2      	bge.n	8004890 <__ieee754_pow+0x120>
 80048aa:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80048ae:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80048b2:	e7ed      	b.n	8004890 <__ieee754_pow+0x120>
 80048b4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80048b8:	d106      	bne.n	80048c8 <__ieee754_pow+0x158>
 80048ba:	4642      	mov	r2, r8
 80048bc:	464b      	mov	r3, r9
 80048be:	4640      	mov	r0, r8
 80048c0:	4649      	mov	r1, r9
 80048c2:	f7fb fe01 	bl	80004c8 <__aeabi_dmul>
 80048c6:	e770      	b.n	80047aa <__ieee754_pow+0x3a>
 80048c8:	4b3a      	ldr	r3, [pc, #232]	; (80049b4 <__ieee754_pow+0x244>)
 80048ca:	429f      	cmp	r7, r3
 80048cc:	d10a      	bne.n	80048e4 <__ieee754_pow+0x174>
 80048ce:	2d00      	cmp	r5, #0
 80048d0:	db08      	blt.n	80048e4 <__ieee754_pow+0x174>
 80048d2:	4640      	mov	r0, r8
 80048d4:	4649      	mov	r1, r9
 80048d6:	b013      	add	sp, #76	; 0x4c
 80048d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048dc:	f000 bd0a 	b.w	80052f4 <__ieee754_sqrt>
 80048e0:	2300      	movs	r3, #0
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	4640      	mov	r0, r8
 80048e6:	4649      	mov	r1, r9
 80048e8:	f000 fc58 	bl	800519c <fabs>
 80048ec:	4683      	mov	fp, r0
 80048ee:	468c      	mov	ip, r1
 80048f0:	f1ba 0f00 	cmp.w	sl, #0
 80048f4:	d128      	bne.n	8004948 <__ieee754_pow+0x1d8>
 80048f6:	b124      	cbz	r4, 8004902 <__ieee754_pow+0x192>
 80048f8:	4b2c      	ldr	r3, [pc, #176]	; (80049ac <__ieee754_pow+0x23c>)
 80048fa:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80048fe:	429a      	cmp	r2, r3
 8004900:	d122      	bne.n	8004948 <__ieee754_pow+0x1d8>
 8004902:	2f00      	cmp	r7, #0
 8004904:	da07      	bge.n	8004916 <__ieee754_pow+0x1a6>
 8004906:	465a      	mov	r2, fp
 8004908:	4663      	mov	r3, ip
 800490a:	2000      	movs	r0, #0
 800490c:	4927      	ldr	r1, [pc, #156]	; (80049ac <__ieee754_pow+0x23c>)
 800490e:	f7fb ff05 	bl	800071c <__aeabi_ddiv>
 8004912:	4683      	mov	fp, r0
 8004914:	468c      	mov	ip, r1
 8004916:	2d00      	cmp	r5, #0
 8004918:	daba      	bge.n	8004890 <__ieee754_pow+0x120>
 800491a:	9b00      	ldr	r3, [sp, #0]
 800491c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004920:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004924:	431c      	orrs	r4, r3
 8004926:	d108      	bne.n	800493a <__ieee754_pow+0x1ca>
 8004928:	465a      	mov	r2, fp
 800492a:	4663      	mov	r3, ip
 800492c:	4658      	mov	r0, fp
 800492e:	4661      	mov	r1, ip
 8004930:	f7fb fc12 	bl	8000158 <__aeabi_dsub>
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	e790      	b.n	800485c <__ieee754_pow+0xec>
 800493a:	9b00      	ldr	r3, [sp, #0]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d1a7      	bne.n	8004890 <__ieee754_pow+0x120>
 8004940:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8004944:	469c      	mov	ip, r3
 8004946:	e7a3      	b.n	8004890 <__ieee754_pow+0x120>
 8004948:	0feb      	lsrs	r3, r5, #31
 800494a:	3b01      	subs	r3, #1
 800494c:	930c      	str	r3, [sp, #48]	; 0x30
 800494e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004950:	9b00      	ldr	r3, [sp, #0]
 8004952:	4313      	orrs	r3, r2
 8004954:	d104      	bne.n	8004960 <__ieee754_pow+0x1f0>
 8004956:	4642      	mov	r2, r8
 8004958:	464b      	mov	r3, r9
 800495a:	4640      	mov	r0, r8
 800495c:	4649      	mov	r1, r9
 800495e:	e7e7      	b.n	8004930 <__ieee754_pow+0x1c0>
 8004960:	4b15      	ldr	r3, [pc, #84]	; (80049b8 <__ieee754_pow+0x248>)
 8004962:	429e      	cmp	r6, r3
 8004964:	f340 80f6 	ble.w	8004b54 <__ieee754_pow+0x3e4>
 8004968:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800496c:	429e      	cmp	r6, r3
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <__ieee754_pow+0x240>)
 8004970:	dd09      	ble.n	8004986 <__ieee754_pow+0x216>
 8004972:	429c      	cmp	r4, r3
 8004974:	dc0c      	bgt.n	8004990 <__ieee754_pow+0x220>
 8004976:	2f00      	cmp	r7, #0
 8004978:	da0c      	bge.n	8004994 <__ieee754_pow+0x224>
 800497a:	2000      	movs	r0, #0
 800497c:	b013      	add	sp, #76	; 0x4c
 800497e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004982:	f000 bcb2 	b.w	80052ea <__math_oflow>
 8004986:	429c      	cmp	r4, r3
 8004988:	dbf5      	blt.n	8004976 <__ieee754_pow+0x206>
 800498a:	4b08      	ldr	r3, [pc, #32]	; (80049ac <__ieee754_pow+0x23c>)
 800498c:	429c      	cmp	r4, r3
 800498e:	dd15      	ble.n	80049bc <__ieee754_pow+0x24c>
 8004990:	2f00      	cmp	r7, #0
 8004992:	dcf2      	bgt.n	800497a <__ieee754_pow+0x20a>
 8004994:	2000      	movs	r0, #0
 8004996:	b013      	add	sp, #76	; 0x4c
 8004998:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499c:	f000 bca0 	b.w	80052e0 <__math_uflow>
 80049a0:	fff00000 	.word	0xfff00000
 80049a4:	7ff00000 	.word	0x7ff00000
 80049a8:	433fffff 	.word	0x433fffff
 80049ac:	3ff00000 	.word	0x3ff00000
 80049b0:	3fefffff 	.word	0x3fefffff
 80049b4:	3fe00000 	.word	0x3fe00000
 80049b8:	41e00000 	.word	0x41e00000
 80049bc:	4661      	mov	r1, ip
 80049be:	2200      	movs	r2, #0
 80049c0:	4658      	mov	r0, fp
 80049c2:	4b5f      	ldr	r3, [pc, #380]	; (8004b40 <__ieee754_pow+0x3d0>)
 80049c4:	f7fb fbc8 	bl	8000158 <__aeabi_dsub>
 80049c8:	a355      	add	r3, pc, #340	; (adr r3, 8004b20 <__ieee754_pow+0x3b0>)
 80049ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ce:	4604      	mov	r4, r0
 80049d0:	460d      	mov	r5, r1
 80049d2:	f7fb fd79 	bl	80004c8 <__aeabi_dmul>
 80049d6:	a354      	add	r3, pc, #336	; (adr r3, 8004b28 <__ieee754_pow+0x3b8>)
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	4606      	mov	r6, r0
 80049de:	460f      	mov	r7, r1
 80049e0:	4620      	mov	r0, r4
 80049e2:	4629      	mov	r1, r5
 80049e4:	f7fb fd70 	bl	80004c8 <__aeabi_dmul>
 80049e8:	2200      	movs	r2, #0
 80049ea:	4682      	mov	sl, r0
 80049ec:	468b      	mov	fp, r1
 80049ee:	4620      	mov	r0, r4
 80049f0:	4629      	mov	r1, r5
 80049f2:	4b54      	ldr	r3, [pc, #336]	; (8004b44 <__ieee754_pow+0x3d4>)
 80049f4:	f7fb fd68 	bl	80004c8 <__aeabi_dmul>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	a14c      	add	r1, pc, #304	; (adr r1, 8004b30 <__ieee754_pow+0x3c0>)
 80049fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a02:	f7fb fba9 	bl	8000158 <__aeabi_dsub>
 8004a06:	4622      	mov	r2, r4
 8004a08:	462b      	mov	r3, r5
 8004a0a:	f7fb fd5d 	bl	80004c8 <__aeabi_dmul>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	2000      	movs	r0, #0
 8004a14:	494c      	ldr	r1, [pc, #304]	; (8004b48 <__ieee754_pow+0x3d8>)
 8004a16:	f7fb fb9f 	bl	8000158 <__aeabi_dsub>
 8004a1a:	4622      	mov	r2, r4
 8004a1c:	462b      	mov	r3, r5
 8004a1e:	4680      	mov	r8, r0
 8004a20:	4689      	mov	r9, r1
 8004a22:	4620      	mov	r0, r4
 8004a24:	4629      	mov	r1, r5
 8004a26:	f7fb fd4f 	bl	80004c8 <__aeabi_dmul>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4640      	mov	r0, r8
 8004a30:	4649      	mov	r1, r9
 8004a32:	f7fb fd49 	bl	80004c8 <__aeabi_dmul>
 8004a36:	a340      	add	r3, pc, #256	; (adr r3, 8004b38 <__ieee754_pow+0x3c8>)
 8004a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3c:	f7fb fd44 	bl	80004c8 <__aeabi_dmul>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4650      	mov	r0, sl
 8004a46:	4659      	mov	r1, fp
 8004a48:	f7fb fb86 	bl	8000158 <__aeabi_dsub>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4604      	mov	r4, r0
 8004a52:	460d      	mov	r5, r1
 8004a54:	4630      	mov	r0, r6
 8004a56:	4639      	mov	r1, r7
 8004a58:	f7fb fb80 	bl	800015c <__adddf3>
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	4632      	mov	r2, r6
 8004a60:	463b      	mov	r3, r7
 8004a62:	4682      	mov	sl, r0
 8004a64:	468b      	mov	fp, r1
 8004a66:	f7fb fb77 	bl	8000158 <__aeabi_dsub>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4620      	mov	r0, r4
 8004a70:	4629      	mov	r1, r5
 8004a72:	f7fb fb71 	bl	8000158 <__aeabi_dsub>
 8004a76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004a7a:	9b00      	ldr	r3, [sp, #0]
 8004a7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f04f 0600 	mov.w	r6, #0
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	bf0c      	ite	eq
 8004a8c:	4b2f      	ldreq	r3, [pc, #188]	; (8004b4c <__ieee754_pow+0x3dc>)
 8004a8e:	4b2c      	ldrne	r3, [pc, #176]	; (8004b40 <__ieee754_pow+0x3d0>)
 8004a90:	4604      	mov	r4, r0
 8004a92:	460d      	mov	r5, r1
 8004a94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a98:	e9cd 2300 	strd	r2, r3, [sp]
 8004a9c:	4632      	mov	r2, r6
 8004a9e:	463b      	mov	r3, r7
 8004aa0:	f7fb fb5a 	bl	8000158 <__aeabi_dsub>
 8004aa4:	4652      	mov	r2, sl
 8004aa6:	465b      	mov	r3, fp
 8004aa8:	f7fb fd0e 	bl	80004c8 <__aeabi_dmul>
 8004aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ab0:	4680      	mov	r8, r0
 8004ab2:	4689      	mov	r9, r1
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	f7fb fd06 	bl	80004c8 <__aeabi_dmul>
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4640      	mov	r0, r8
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	f7fb fb4a 	bl	800015c <__adddf3>
 8004ac8:	4632      	mov	r2, r6
 8004aca:	463b      	mov	r3, r7
 8004acc:	4680      	mov	r8, r0
 8004ace:	4689      	mov	r9, r1
 8004ad0:	4650      	mov	r0, sl
 8004ad2:	4659      	mov	r1, fp
 8004ad4:	f7fb fcf8 	bl	80004c8 <__aeabi_dmul>
 8004ad8:	4604      	mov	r4, r0
 8004ada:	460d      	mov	r5, r1
 8004adc:	460b      	mov	r3, r1
 8004ade:	4602      	mov	r2, r0
 8004ae0:	4649      	mov	r1, r9
 8004ae2:	4640      	mov	r0, r8
 8004ae4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004ae8:	f7fb fb38 	bl	800015c <__adddf3>
 8004aec:	4b18      	ldr	r3, [pc, #96]	; (8004b50 <__ieee754_pow+0x3e0>)
 8004aee:	4682      	mov	sl, r0
 8004af0:	4299      	cmp	r1, r3
 8004af2:	460f      	mov	r7, r1
 8004af4:	460e      	mov	r6, r1
 8004af6:	f340 82e7 	ble.w	80050c8 <__ieee754_pow+0x958>
 8004afa:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004afe:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004b02:	4303      	orrs	r3, r0
 8004b04:	f000 81e2 	beq.w	8004ecc <__ieee754_pow+0x75c>
 8004b08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f7fb ff4c 	bl	80009ac <__aeabi_dcmplt>
 8004b14:	3800      	subs	r0, #0
 8004b16:	bf18      	it	ne
 8004b18:	2001      	movne	r0, #1
 8004b1a:	e72f      	b.n	800497c <__ieee754_pow+0x20c>
 8004b1c:	f3af 8000 	nop.w
 8004b20:	60000000 	.word	0x60000000
 8004b24:	3ff71547 	.word	0x3ff71547
 8004b28:	f85ddf44 	.word	0xf85ddf44
 8004b2c:	3e54ae0b 	.word	0x3e54ae0b
 8004b30:	55555555 	.word	0x55555555
 8004b34:	3fd55555 	.word	0x3fd55555
 8004b38:	652b82fe 	.word	0x652b82fe
 8004b3c:	3ff71547 	.word	0x3ff71547
 8004b40:	3ff00000 	.word	0x3ff00000
 8004b44:	3fd00000 	.word	0x3fd00000
 8004b48:	3fe00000 	.word	0x3fe00000
 8004b4c:	bff00000 	.word	0xbff00000
 8004b50:	408fffff 	.word	0x408fffff
 8004b54:	4bd4      	ldr	r3, [pc, #848]	; (8004ea8 <__ieee754_pow+0x738>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	402b      	ands	r3, r5
 8004b5a:	b943      	cbnz	r3, 8004b6e <__ieee754_pow+0x3fe>
 8004b5c:	4658      	mov	r0, fp
 8004b5e:	4661      	mov	r1, ip
 8004b60:	4bd2      	ldr	r3, [pc, #840]	; (8004eac <__ieee754_pow+0x73c>)
 8004b62:	f7fb fcb1 	bl	80004c8 <__aeabi_dmul>
 8004b66:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004b6a:	4683      	mov	fp, r0
 8004b6c:	460c      	mov	r4, r1
 8004b6e:	1523      	asrs	r3, r4, #20
 8004b70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004b74:	4413      	add	r3, r2
 8004b76:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b78:	4bcd      	ldr	r3, [pc, #820]	; (8004eb0 <__ieee754_pow+0x740>)
 8004b7a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004b7e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004b82:	429c      	cmp	r4, r3
 8004b84:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004b88:	dd08      	ble.n	8004b9c <__ieee754_pow+0x42c>
 8004b8a:	4bca      	ldr	r3, [pc, #808]	; (8004eb4 <__ieee754_pow+0x744>)
 8004b8c:	429c      	cmp	r4, r3
 8004b8e:	f340 8164 	ble.w	8004e5a <__ieee754_pow+0x6ea>
 8004b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b94:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004b98:	3301      	adds	r3, #1
 8004b9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b9c:	2600      	movs	r6, #0
 8004b9e:	00f3      	lsls	r3, r6, #3
 8004ba0:	930d      	str	r3, [sp, #52]	; 0x34
 8004ba2:	4bc5      	ldr	r3, [pc, #788]	; (8004eb8 <__ieee754_pow+0x748>)
 8004ba4:	4658      	mov	r0, fp
 8004ba6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004baa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004bae:	4629      	mov	r1, r5
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004bb6:	4623      	mov	r3, r4
 8004bb8:	f7fb face 	bl	8000158 <__aeabi_dsub>
 8004bbc:	46da      	mov	sl, fp
 8004bbe:	462b      	mov	r3, r5
 8004bc0:	4652      	mov	r2, sl
 8004bc2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004bc6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004bca:	f7fb fac7 	bl	800015c <__adddf3>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	49b9      	ldr	r1, [pc, #740]	; (8004ebc <__ieee754_pow+0x74c>)
 8004bd6:	f7fb fda1 	bl	800071c <__aeabi_ddiv>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004be2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004be6:	f7fb fc6f 	bl	80004c8 <__aeabi_dmul>
 8004bea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004bee:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004bf2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	46ab      	mov	fp, r5
 8004bfc:	106d      	asrs	r5, r5, #1
 8004bfe:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004c02:	9304      	str	r3, [sp, #16]
 8004c04:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004c08:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004c0c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8004c10:	4640      	mov	r0, r8
 8004c12:	4649      	mov	r1, r9
 8004c14:	4614      	mov	r4, r2
 8004c16:	461d      	mov	r5, r3
 8004c18:	f7fb fc56 	bl	80004c8 <__aeabi_dmul>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004c24:	f7fb fa98 	bl	8000158 <__aeabi_dsub>
 8004c28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c2c:	4606      	mov	r6, r0
 8004c2e:	460f      	mov	r7, r1
 8004c30:	4620      	mov	r0, r4
 8004c32:	4629      	mov	r1, r5
 8004c34:	f7fb fa90 	bl	8000158 <__aeabi_dsub>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4650      	mov	r0, sl
 8004c3e:	4659      	mov	r1, fp
 8004c40:	f7fb fa8a 	bl	8000158 <__aeabi_dsub>
 8004c44:	4642      	mov	r2, r8
 8004c46:	464b      	mov	r3, r9
 8004c48:	f7fb fc3e 	bl	80004c8 <__aeabi_dmul>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4630      	mov	r0, r6
 8004c52:	4639      	mov	r1, r7
 8004c54:	f7fb fa80 	bl	8000158 <__aeabi_dsub>
 8004c58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004c5c:	f7fb fc34 	bl	80004c8 <__aeabi_dmul>
 8004c60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c64:	4682      	mov	sl, r0
 8004c66:	468b      	mov	fp, r1
 8004c68:	4610      	mov	r0, r2
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	f7fb fc2c 	bl	80004c8 <__aeabi_dmul>
 8004c70:	a37b      	add	r3, pc, #492	; (adr r3, 8004e60 <__ieee754_pow+0x6f0>)
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	4604      	mov	r4, r0
 8004c78:	460d      	mov	r5, r1
 8004c7a:	f7fb fc25 	bl	80004c8 <__aeabi_dmul>
 8004c7e:	a37a      	add	r3, pc, #488	; (adr r3, 8004e68 <__ieee754_pow+0x6f8>)
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	f7fb fa6a 	bl	800015c <__adddf3>
 8004c88:	4622      	mov	r2, r4
 8004c8a:	462b      	mov	r3, r5
 8004c8c:	f7fb fc1c 	bl	80004c8 <__aeabi_dmul>
 8004c90:	a377      	add	r3, pc, #476	; (adr r3, 8004e70 <__ieee754_pow+0x700>)
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	f7fb fa61 	bl	800015c <__adddf3>
 8004c9a:	4622      	mov	r2, r4
 8004c9c:	462b      	mov	r3, r5
 8004c9e:	f7fb fc13 	bl	80004c8 <__aeabi_dmul>
 8004ca2:	a375      	add	r3, pc, #468	; (adr r3, 8004e78 <__ieee754_pow+0x708>)
 8004ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca8:	f7fb fa58 	bl	800015c <__adddf3>
 8004cac:	4622      	mov	r2, r4
 8004cae:	462b      	mov	r3, r5
 8004cb0:	f7fb fc0a 	bl	80004c8 <__aeabi_dmul>
 8004cb4:	a372      	add	r3, pc, #456	; (adr r3, 8004e80 <__ieee754_pow+0x710>)
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	f7fb fa4f 	bl	800015c <__adddf3>
 8004cbe:	4622      	mov	r2, r4
 8004cc0:	462b      	mov	r3, r5
 8004cc2:	f7fb fc01 	bl	80004c8 <__aeabi_dmul>
 8004cc6:	a370      	add	r3, pc, #448	; (adr r3, 8004e88 <__ieee754_pow+0x718>)
 8004cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ccc:	f7fb fa46 	bl	800015c <__adddf3>
 8004cd0:	4622      	mov	r2, r4
 8004cd2:	4606      	mov	r6, r0
 8004cd4:	460f      	mov	r7, r1
 8004cd6:	462b      	mov	r3, r5
 8004cd8:	4620      	mov	r0, r4
 8004cda:	4629      	mov	r1, r5
 8004cdc:	f7fb fbf4 	bl	80004c8 <__aeabi_dmul>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	4639      	mov	r1, r7
 8004ce8:	f7fb fbee 	bl	80004c8 <__aeabi_dmul>
 8004cec:	4604      	mov	r4, r0
 8004cee:	460d      	mov	r5, r1
 8004cf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	f7fb fa30 	bl	800015c <__adddf3>
 8004cfc:	4652      	mov	r2, sl
 8004cfe:	465b      	mov	r3, fp
 8004d00:	f7fb fbe2 	bl	80004c8 <__aeabi_dmul>
 8004d04:	4622      	mov	r2, r4
 8004d06:	462b      	mov	r3, r5
 8004d08:	f7fb fa28 	bl	800015c <__adddf3>
 8004d0c:	4642      	mov	r2, r8
 8004d0e:	4606      	mov	r6, r0
 8004d10:	460f      	mov	r7, r1
 8004d12:	464b      	mov	r3, r9
 8004d14:	4640      	mov	r0, r8
 8004d16:	4649      	mov	r1, r9
 8004d18:	f7fb fbd6 	bl	80004c8 <__aeabi_dmul>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004d24:	2200      	movs	r2, #0
 8004d26:	4b66      	ldr	r3, [pc, #408]	; (8004ec0 <__ieee754_pow+0x750>)
 8004d28:	f7fb fa18 	bl	800015c <__adddf3>
 8004d2c:	4632      	mov	r2, r6
 8004d2e:	463b      	mov	r3, r7
 8004d30:	f7fb fa14 	bl	800015c <__adddf3>
 8004d34:	2400      	movs	r4, #0
 8004d36:	460d      	mov	r5, r1
 8004d38:	4622      	mov	r2, r4
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4640      	mov	r0, r8
 8004d3e:	4649      	mov	r1, r9
 8004d40:	f7fb fbc2 	bl	80004c8 <__aeabi_dmul>
 8004d44:	2200      	movs	r2, #0
 8004d46:	4680      	mov	r8, r0
 8004d48:	4689      	mov	r9, r1
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	4629      	mov	r1, r5
 8004d4e:	4b5c      	ldr	r3, [pc, #368]	; (8004ec0 <__ieee754_pow+0x750>)
 8004d50:	f7fb fa02 	bl	8000158 <__aeabi_dsub>
 8004d54:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d58:	f7fb f9fe 	bl	8000158 <__aeabi_dsub>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4630      	mov	r0, r6
 8004d62:	4639      	mov	r1, r7
 8004d64:	f7fb f9f8 	bl	8000158 <__aeabi_dsub>
 8004d68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d6c:	f7fb fbac 	bl	80004c8 <__aeabi_dmul>
 8004d70:	4622      	mov	r2, r4
 8004d72:	4606      	mov	r6, r0
 8004d74:	460f      	mov	r7, r1
 8004d76:	462b      	mov	r3, r5
 8004d78:	4650      	mov	r0, sl
 8004d7a:	4659      	mov	r1, fp
 8004d7c:	f7fb fba4 	bl	80004c8 <__aeabi_dmul>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4630      	mov	r0, r6
 8004d86:	4639      	mov	r1, r7
 8004d88:	f7fb f9e8 	bl	800015c <__adddf3>
 8004d8c:	2400      	movs	r4, #0
 8004d8e:	4606      	mov	r6, r0
 8004d90:	460f      	mov	r7, r1
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4640      	mov	r0, r8
 8004d98:	4649      	mov	r1, r9
 8004d9a:	f7fb f9df 	bl	800015c <__adddf3>
 8004d9e:	a33c      	add	r3, pc, #240	; (adr r3, 8004e90 <__ieee754_pow+0x720>)
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	4620      	mov	r0, r4
 8004da6:	460d      	mov	r5, r1
 8004da8:	f7fb fb8e 	bl	80004c8 <__aeabi_dmul>
 8004dac:	4642      	mov	r2, r8
 8004dae:	464b      	mov	r3, r9
 8004db0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004db4:	4620      	mov	r0, r4
 8004db6:	4629      	mov	r1, r5
 8004db8:	f7fb f9ce 	bl	8000158 <__aeabi_dsub>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	4639      	mov	r1, r7
 8004dc4:	f7fb f9c8 	bl	8000158 <__aeabi_dsub>
 8004dc8:	a333      	add	r3, pc, #204	; (adr r3, 8004e98 <__ieee754_pow+0x728>)
 8004dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dce:	f7fb fb7b 	bl	80004c8 <__aeabi_dmul>
 8004dd2:	a333      	add	r3, pc, #204	; (adr r3, 8004ea0 <__ieee754_pow+0x730>)
 8004dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd8:	4606      	mov	r6, r0
 8004dda:	460f      	mov	r7, r1
 8004ddc:	4620      	mov	r0, r4
 8004dde:	4629      	mov	r1, r5
 8004de0:	f7fb fb72 	bl	80004c8 <__aeabi_dmul>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4630      	mov	r0, r6
 8004dea:	4639      	mov	r1, r7
 8004dec:	f7fb f9b6 	bl	800015c <__adddf3>
 8004df0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004df2:	4b34      	ldr	r3, [pc, #208]	; (8004ec4 <__ieee754_pow+0x754>)
 8004df4:	4413      	add	r3, r2
 8004df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfa:	f7fb f9af 	bl	800015c <__adddf3>
 8004dfe:	4680      	mov	r8, r0
 8004e00:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004e02:	4689      	mov	r9, r1
 8004e04:	f7fb faf6 	bl	80003f4 <__aeabi_i2d>
 8004e08:	4604      	mov	r4, r0
 8004e0a:	460d      	mov	r5, r1
 8004e0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e12:	4b2d      	ldr	r3, [pc, #180]	; (8004ec8 <__ieee754_pow+0x758>)
 8004e14:	4413      	add	r3, r2
 8004e16:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004e1a:	4642      	mov	r2, r8
 8004e1c:	464b      	mov	r3, r9
 8004e1e:	f7fb f99d 	bl	800015c <__adddf3>
 8004e22:	4632      	mov	r2, r6
 8004e24:	463b      	mov	r3, r7
 8004e26:	f7fb f999 	bl	800015c <__adddf3>
 8004e2a:	4622      	mov	r2, r4
 8004e2c:	462b      	mov	r3, r5
 8004e2e:	f7fb f995 	bl	800015c <__adddf3>
 8004e32:	2000      	movs	r0, #0
 8004e34:	4622      	mov	r2, r4
 8004e36:	462b      	mov	r3, r5
 8004e38:	4682      	mov	sl, r0
 8004e3a:	468b      	mov	fp, r1
 8004e3c:	f7fb f98c 	bl	8000158 <__aeabi_dsub>
 8004e40:	4632      	mov	r2, r6
 8004e42:	463b      	mov	r3, r7
 8004e44:	f7fb f988 	bl	8000158 <__aeabi_dsub>
 8004e48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e4c:	f7fb f984 	bl	8000158 <__aeabi_dsub>
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	4640      	mov	r0, r8
 8004e56:	4649      	mov	r1, r9
 8004e58:	e60b      	b.n	8004a72 <__ieee754_pow+0x302>
 8004e5a:	2601      	movs	r6, #1
 8004e5c:	e69f      	b.n	8004b9e <__ieee754_pow+0x42e>
 8004e5e:	bf00      	nop
 8004e60:	4a454eef 	.word	0x4a454eef
 8004e64:	3fca7e28 	.word	0x3fca7e28
 8004e68:	93c9db65 	.word	0x93c9db65
 8004e6c:	3fcd864a 	.word	0x3fcd864a
 8004e70:	a91d4101 	.word	0xa91d4101
 8004e74:	3fd17460 	.word	0x3fd17460
 8004e78:	518f264d 	.word	0x518f264d
 8004e7c:	3fd55555 	.word	0x3fd55555
 8004e80:	db6fabff 	.word	0xdb6fabff
 8004e84:	3fdb6db6 	.word	0x3fdb6db6
 8004e88:	33333303 	.word	0x33333303
 8004e8c:	3fe33333 	.word	0x3fe33333
 8004e90:	e0000000 	.word	0xe0000000
 8004e94:	3feec709 	.word	0x3feec709
 8004e98:	dc3a03fd 	.word	0xdc3a03fd
 8004e9c:	3feec709 	.word	0x3feec709
 8004ea0:	145b01f5 	.word	0x145b01f5
 8004ea4:	be3e2fe0 	.word	0xbe3e2fe0
 8004ea8:	7ff00000 	.word	0x7ff00000
 8004eac:	43400000 	.word	0x43400000
 8004eb0:	0003988e 	.word	0x0003988e
 8004eb4:	000bb679 	.word	0x000bb679
 8004eb8:	08005500 	.word	0x08005500
 8004ebc:	3ff00000 	.word	0x3ff00000
 8004ec0:	40080000 	.word	0x40080000
 8004ec4:	08005520 	.word	0x08005520
 8004ec8:	08005510 	.word	0x08005510
 8004ecc:	a39c      	add	r3, pc, #624	; (adr r3, 8005140 <__ieee754_pow+0x9d0>)
 8004ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed2:	4640      	mov	r0, r8
 8004ed4:	4649      	mov	r1, r9
 8004ed6:	f7fb f941 	bl	800015c <__adddf3>
 8004eda:	4622      	mov	r2, r4
 8004edc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ee0:	462b      	mov	r3, r5
 8004ee2:	4650      	mov	r0, sl
 8004ee4:	4639      	mov	r1, r7
 8004ee6:	f7fb f937 	bl	8000158 <__aeabi_dsub>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ef2:	f7fb fd79 	bl	80009e8 <__aeabi_dcmpgt>
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	f47f ae06 	bne.w	8004b08 <__ieee754_pow+0x398>
 8004efc:	4aa2      	ldr	r2, [pc, #648]	; (8005188 <__ieee754_pow+0xa18>)
 8004efe:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8004f02:	4293      	cmp	r3, r2
 8004f04:	f340 8100 	ble.w	8005108 <__ieee754_pow+0x998>
 8004f08:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004f0c:	151b      	asrs	r3, r3, #20
 8004f0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004f12:	fa4a fa03 	asr.w	sl, sl, r3
 8004f16:	44b2      	add	sl, r6
 8004f18:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004f1c:	489b      	ldr	r0, [pc, #620]	; (800518c <__ieee754_pow+0xa1c>)
 8004f1e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8004f22:	4108      	asrs	r0, r1
 8004f24:	ea00 030a 	and.w	r3, r0, sl
 8004f28:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004f2c:	f1c1 0114 	rsb	r1, r1, #20
 8004f30:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004f34:	fa4a fa01 	asr.w	sl, sl, r1
 8004f38:	2e00      	cmp	r6, #0
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	4620      	mov	r0, r4
 8004f40:	4629      	mov	r1, r5
 8004f42:	bfb8      	it	lt
 8004f44:	f1ca 0a00 	rsblt	sl, sl, #0
 8004f48:	f7fb f906 	bl	8000158 <__aeabi_dsub>
 8004f4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f54:	2400      	movs	r4, #0
 8004f56:	4642      	mov	r2, r8
 8004f58:	464b      	mov	r3, r9
 8004f5a:	f7fb f8ff 	bl	800015c <__adddf3>
 8004f5e:	a37a      	add	r3, pc, #488	; (adr r3, 8005148 <__ieee754_pow+0x9d8>)
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	4620      	mov	r0, r4
 8004f66:	460d      	mov	r5, r1
 8004f68:	f7fb faae 	bl	80004c8 <__aeabi_dmul>
 8004f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f70:	4606      	mov	r6, r0
 8004f72:	460f      	mov	r7, r1
 8004f74:	4620      	mov	r0, r4
 8004f76:	4629      	mov	r1, r5
 8004f78:	f7fb f8ee 	bl	8000158 <__aeabi_dsub>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4640      	mov	r0, r8
 8004f82:	4649      	mov	r1, r9
 8004f84:	f7fb f8e8 	bl	8000158 <__aeabi_dsub>
 8004f88:	a371      	add	r3, pc, #452	; (adr r3, 8005150 <__ieee754_pow+0x9e0>)
 8004f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8e:	f7fb fa9b 	bl	80004c8 <__aeabi_dmul>
 8004f92:	a371      	add	r3, pc, #452	; (adr r3, 8005158 <__ieee754_pow+0x9e8>)
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	4680      	mov	r8, r0
 8004f9a:	4689      	mov	r9, r1
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	4629      	mov	r1, r5
 8004fa0:	f7fb fa92 	bl	80004c8 <__aeabi_dmul>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4640      	mov	r0, r8
 8004faa:	4649      	mov	r1, r9
 8004fac:	f7fb f8d6 	bl	800015c <__adddf3>
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	460d      	mov	r5, r1
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4630      	mov	r0, r6
 8004fba:	4639      	mov	r1, r7
 8004fbc:	f7fb f8ce 	bl	800015c <__adddf3>
 8004fc0:	4632      	mov	r2, r6
 8004fc2:	463b      	mov	r3, r7
 8004fc4:	4680      	mov	r8, r0
 8004fc6:	4689      	mov	r9, r1
 8004fc8:	f7fb f8c6 	bl	8000158 <__aeabi_dsub>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	f7fb f8c0 	bl	8000158 <__aeabi_dsub>
 8004fd8:	4642      	mov	r2, r8
 8004fda:	4606      	mov	r6, r0
 8004fdc:	460f      	mov	r7, r1
 8004fde:	464b      	mov	r3, r9
 8004fe0:	4640      	mov	r0, r8
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	f7fb fa70 	bl	80004c8 <__aeabi_dmul>
 8004fe8:	a35d      	add	r3, pc, #372	; (adr r3, 8005160 <__ieee754_pow+0x9f0>)
 8004fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fee:	4604      	mov	r4, r0
 8004ff0:	460d      	mov	r5, r1
 8004ff2:	f7fb fa69 	bl	80004c8 <__aeabi_dmul>
 8004ff6:	a35c      	add	r3, pc, #368	; (adr r3, 8005168 <__ieee754_pow+0x9f8>)
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	f7fb f8ac 	bl	8000158 <__aeabi_dsub>
 8005000:	4622      	mov	r2, r4
 8005002:	462b      	mov	r3, r5
 8005004:	f7fb fa60 	bl	80004c8 <__aeabi_dmul>
 8005008:	a359      	add	r3, pc, #356	; (adr r3, 8005170 <__ieee754_pow+0xa00>)
 800500a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500e:	f7fb f8a5 	bl	800015c <__adddf3>
 8005012:	4622      	mov	r2, r4
 8005014:	462b      	mov	r3, r5
 8005016:	f7fb fa57 	bl	80004c8 <__aeabi_dmul>
 800501a:	a357      	add	r3, pc, #348	; (adr r3, 8005178 <__ieee754_pow+0xa08>)
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	f7fb f89a 	bl	8000158 <__aeabi_dsub>
 8005024:	4622      	mov	r2, r4
 8005026:	462b      	mov	r3, r5
 8005028:	f7fb fa4e 	bl	80004c8 <__aeabi_dmul>
 800502c:	a354      	add	r3, pc, #336	; (adr r3, 8005180 <__ieee754_pow+0xa10>)
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	f7fb f893 	bl	800015c <__adddf3>
 8005036:	4622      	mov	r2, r4
 8005038:	462b      	mov	r3, r5
 800503a:	f7fb fa45 	bl	80004c8 <__aeabi_dmul>
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	4640      	mov	r0, r8
 8005044:	4649      	mov	r1, r9
 8005046:	f7fb f887 	bl	8000158 <__aeabi_dsub>
 800504a:	4604      	mov	r4, r0
 800504c:	460d      	mov	r5, r1
 800504e:	4602      	mov	r2, r0
 8005050:	460b      	mov	r3, r1
 8005052:	4640      	mov	r0, r8
 8005054:	4649      	mov	r1, r9
 8005056:	f7fb fa37 	bl	80004c8 <__aeabi_dmul>
 800505a:	2200      	movs	r2, #0
 800505c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005060:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005064:	4620      	mov	r0, r4
 8005066:	4629      	mov	r1, r5
 8005068:	f7fb f876 	bl	8000158 <__aeabi_dsub>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005074:	f7fb fb52 	bl	800071c <__aeabi_ddiv>
 8005078:	4632      	mov	r2, r6
 800507a:	4604      	mov	r4, r0
 800507c:	460d      	mov	r5, r1
 800507e:	463b      	mov	r3, r7
 8005080:	4640      	mov	r0, r8
 8005082:	4649      	mov	r1, r9
 8005084:	f7fb fa20 	bl	80004c8 <__aeabi_dmul>
 8005088:	4632      	mov	r2, r6
 800508a:	463b      	mov	r3, r7
 800508c:	f7fb f866 	bl	800015c <__adddf3>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4620      	mov	r0, r4
 8005096:	4629      	mov	r1, r5
 8005098:	f7fb f85e 	bl	8000158 <__aeabi_dsub>
 800509c:	4642      	mov	r2, r8
 800509e:	464b      	mov	r3, r9
 80050a0:	f7fb f85a 	bl	8000158 <__aeabi_dsub>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	2000      	movs	r0, #0
 80050aa:	4939      	ldr	r1, [pc, #228]	; (8005190 <__ieee754_pow+0xa20>)
 80050ac:	f7fb f854 	bl	8000158 <__aeabi_dsub>
 80050b0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80050b4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80050b8:	da29      	bge.n	800510e <__ieee754_pow+0x99e>
 80050ba:	4652      	mov	r2, sl
 80050bc:	f000 f874 	bl	80051a8 <scalbn>
 80050c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050c4:	f7ff bbfd 	b.w	80048c2 <__ieee754_pow+0x152>
 80050c8:	4b32      	ldr	r3, [pc, #200]	; (8005194 <__ieee754_pow+0xa24>)
 80050ca:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80050ce:	429f      	cmp	r7, r3
 80050d0:	f77f af14 	ble.w	8004efc <__ieee754_pow+0x78c>
 80050d4:	4b30      	ldr	r3, [pc, #192]	; (8005198 <__ieee754_pow+0xa28>)
 80050d6:	440b      	add	r3, r1
 80050d8:	4303      	orrs	r3, r0
 80050da:	d009      	beq.n	80050f0 <__ieee754_pow+0x980>
 80050dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050e0:	2200      	movs	r2, #0
 80050e2:	2300      	movs	r3, #0
 80050e4:	f7fb fc62 	bl	80009ac <__aeabi_dcmplt>
 80050e8:	3800      	subs	r0, #0
 80050ea:	bf18      	it	ne
 80050ec:	2001      	movne	r0, #1
 80050ee:	e452      	b.n	8004996 <__ieee754_pow+0x226>
 80050f0:	4622      	mov	r2, r4
 80050f2:	462b      	mov	r3, r5
 80050f4:	f7fb f830 	bl	8000158 <__aeabi_dsub>
 80050f8:	4642      	mov	r2, r8
 80050fa:	464b      	mov	r3, r9
 80050fc:	f7fb fc6a 	bl	80009d4 <__aeabi_dcmpge>
 8005100:	2800      	cmp	r0, #0
 8005102:	f43f aefb 	beq.w	8004efc <__ieee754_pow+0x78c>
 8005106:	e7e9      	b.n	80050dc <__ieee754_pow+0x96c>
 8005108:	f04f 0a00 	mov.w	sl, #0
 800510c:	e720      	b.n	8004f50 <__ieee754_pow+0x7e0>
 800510e:	4621      	mov	r1, r4
 8005110:	e7d6      	b.n	80050c0 <__ieee754_pow+0x950>
 8005112:	f04f 0b00 	mov.w	fp, #0
 8005116:	f8df c078 	ldr.w	ip, [pc, #120]	; 8005190 <__ieee754_pow+0xa20>
 800511a:	f7ff bbb9 	b.w	8004890 <__ieee754_pow+0x120>
 800511e:	f04f 0b00 	mov.w	fp, #0
 8005122:	f04f 0c00 	mov.w	ip, #0
 8005126:	f7ff bbb3 	b.w	8004890 <__ieee754_pow+0x120>
 800512a:	4640      	mov	r0, r8
 800512c:	4649      	mov	r1, r9
 800512e:	f7ff bb3c 	b.w	80047aa <__ieee754_pow+0x3a>
 8005132:	9200      	str	r2, [sp, #0]
 8005134:	f7ff bb88 	b.w	8004848 <__ieee754_pow+0xd8>
 8005138:	2300      	movs	r3, #0
 800513a:	f7ff bb72 	b.w	8004822 <__ieee754_pow+0xb2>
 800513e:	bf00      	nop
 8005140:	652b82fe 	.word	0x652b82fe
 8005144:	3c971547 	.word	0x3c971547
 8005148:	00000000 	.word	0x00000000
 800514c:	3fe62e43 	.word	0x3fe62e43
 8005150:	fefa39ef 	.word	0xfefa39ef
 8005154:	3fe62e42 	.word	0x3fe62e42
 8005158:	0ca86c39 	.word	0x0ca86c39
 800515c:	be205c61 	.word	0xbe205c61
 8005160:	72bea4d0 	.word	0x72bea4d0
 8005164:	3e663769 	.word	0x3e663769
 8005168:	c5d26bf1 	.word	0xc5d26bf1
 800516c:	3ebbbd41 	.word	0x3ebbbd41
 8005170:	af25de2c 	.word	0xaf25de2c
 8005174:	3f11566a 	.word	0x3f11566a
 8005178:	16bebd93 	.word	0x16bebd93
 800517c:	3f66c16c 	.word	0x3f66c16c
 8005180:	5555553e 	.word	0x5555553e
 8005184:	3fc55555 	.word	0x3fc55555
 8005188:	3fe00000 	.word	0x3fe00000
 800518c:	fff00000 	.word	0xfff00000
 8005190:	3ff00000 	.word	0x3ff00000
 8005194:	4090cbff 	.word	0x4090cbff
 8005198:	3f6f3400 	.word	0x3f6f3400

0800519c <fabs>:
 800519c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80051a0:	4619      	mov	r1, r3
 80051a2:	4770      	bx	lr
 80051a4:	0000      	movs	r0, r0
	...

080051a8 <scalbn>:
 80051a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051aa:	4616      	mov	r6, r2
 80051ac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80051b0:	4604      	mov	r4, r0
 80051b2:	460d      	mov	r5, r1
 80051b4:	460b      	mov	r3, r1
 80051b6:	b992      	cbnz	r2, 80051de <scalbn+0x36>
 80051b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80051bc:	4303      	orrs	r3, r0
 80051be:	d03c      	beq.n	800523a <scalbn+0x92>
 80051c0:	4b31      	ldr	r3, [pc, #196]	; (8005288 <scalbn+0xe0>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	f7fb f980 	bl	80004c8 <__aeabi_dmul>
 80051c8:	4b30      	ldr	r3, [pc, #192]	; (800528c <scalbn+0xe4>)
 80051ca:	4604      	mov	r4, r0
 80051cc:	429e      	cmp	r6, r3
 80051ce:	460d      	mov	r5, r1
 80051d0:	da0f      	bge.n	80051f2 <scalbn+0x4a>
 80051d2:	a329      	add	r3, pc, #164	; (adr r3, 8005278 <scalbn+0xd0>)
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	f7fb f976 	bl	80004c8 <__aeabi_dmul>
 80051dc:	e006      	b.n	80051ec <scalbn+0x44>
 80051de:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80051e2:	42ba      	cmp	r2, r7
 80051e4:	d109      	bne.n	80051fa <scalbn+0x52>
 80051e6:	4602      	mov	r2, r0
 80051e8:	f7fa ffb8 	bl	800015c <__adddf3>
 80051ec:	4604      	mov	r4, r0
 80051ee:	460d      	mov	r5, r1
 80051f0:	e023      	b.n	800523a <scalbn+0x92>
 80051f2:	460b      	mov	r3, r1
 80051f4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80051f8:	3a36      	subs	r2, #54	; 0x36
 80051fa:	f24c 3150 	movw	r1, #50000	; 0xc350
 80051fe:	428e      	cmp	r6, r1
 8005200:	dd0e      	ble.n	8005220 <scalbn+0x78>
 8005202:	a31f      	add	r3, pc, #124	; (adr r3, 8005280 <scalbn+0xd8>)
 8005204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005208:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800520c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8005210:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8005214:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8005218:	481d      	ldr	r0, [pc, #116]	; (8005290 <scalbn+0xe8>)
 800521a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800521e:	e7db      	b.n	80051d8 <scalbn+0x30>
 8005220:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005224:	4432      	add	r2, r6
 8005226:	428a      	cmp	r2, r1
 8005228:	dceb      	bgt.n	8005202 <scalbn+0x5a>
 800522a:	2a00      	cmp	r2, #0
 800522c:	dd08      	ble.n	8005240 <scalbn+0x98>
 800522e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005232:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005236:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800523a:	4620      	mov	r0, r4
 800523c:	4629      	mov	r1, r5
 800523e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005240:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005244:	da0c      	bge.n	8005260 <scalbn+0xb8>
 8005246:	a30c      	add	r3, pc, #48	; (adr r3, 8005278 <scalbn+0xd0>)
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005250:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8005254:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8005258:	480e      	ldr	r0, [pc, #56]	; (8005294 <scalbn+0xec>)
 800525a:	f041 011f 	orr.w	r1, r1, #31
 800525e:	e7bb      	b.n	80051d8 <scalbn+0x30>
 8005260:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005264:	3236      	adds	r2, #54	; 0x36
 8005266:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800526a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800526e:	4620      	mov	r0, r4
 8005270:	4629      	mov	r1, r5
 8005272:	2200      	movs	r2, #0
 8005274:	4b08      	ldr	r3, [pc, #32]	; (8005298 <scalbn+0xf0>)
 8005276:	e7af      	b.n	80051d8 <scalbn+0x30>
 8005278:	c2f8f359 	.word	0xc2f8f359
 800527c:	01a56e1f 	.word	0x01a56e1f
 8005280:	8800759c 	.word	0x8800759c
 8005284:	7e37e43c 	.word	0x7e37e43c
 8005288:	43500000 	.word	0x43500000
 800528c:	ffff3cb0 	.word	0xffff3cb0
 8005290:	8800759c 	.word	0x8800759c
 8005294:	c2f8f359 	.word	0xc2f8f359
 8005298:	3c900000 	.word	0x3c900000

0800529c <with_errno>:
 800529c:	b570      	push	{r4, r5, r6, lr}
 800529e:	4604      	mov	r4, r0
 80052a0:	460d      	mov	r5, r1
 80052a2:	4616      	mov	r6, r2
 80052a4:	f7ff f9cc 	bl	8004640 <__errno>
 80052a8:	4629      	mov	r1, r5
 80052aa:	6006      	str	r6, [r0, #0]
 80052ac:	4620      	mov	r0, r4
 80052ae:	bd70      	pop	{r4, r5, r6, pc}

080052b0 <xflow>:
 80052b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052b2:	4615      	mov	r5, r2
 80052b4:	461c      	mov	r4, r3
 80052b6:	b180      	cbz	r0, 80052da <xflow+0x2a>
 80052b8:	4610      	mov	r0, r2
 80052ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80052be:	e9cd 0100 	strd	r0, r1, [sp]
 80052c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052c6:	4628      	mov	r0, r5
 80052c8:	4621      	mov	r1, r4
 80052ca:	f7fb f8fd 	bl	80004c8 <__aeabi_dmul>
 80052ce:	2222      	movs	r2, #34	; 0x22
 80052d0:	b003      	add	sp, #12
 80052d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052d6:	f7ff bfe1 	b.w	800529c <with_errno>
 80052da:	4610      	mov	r0, r2
 80052dc:	4619      	mov	r1, r3
 80052de:	e7ee      	b.n	80052be <xflow+0xe>

080052e0 <__math_uflow>:
 80052e0:	2200      	movs	r2, #0
 80052e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80052e6:	f7ff bfe3 	b.w	80052b0 <xflow>

080052ea <__math_oflow>:
 80052ea:	2200      	movs	r2, #0
 80052ec:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80052f0:	f7ff bfde 	b.w	80052b0 <xflow>

080052f4 <__ieee754_sqrt>:
 80052f4:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8005498 <__ieee754_sqrt+0x1a4>
 80052f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052fc:	ea3c 0c01 	bics.w	ip, ip, r1
 8005300:	460b      	mov	r3, r1
 8005302:	4606      	mov	r6, r0
 8005304:	460d      	mov	r5, r1
 8005306:	460a      	mov	r2, r1
 8005308:	4604      	mov	r4, r0
 800530a:	d10e      	bne.n	800532a <__ieee754_sqrt+0x36>
 800530c:	4602      	mov	r2, r0
 800530e:	f7fb f8db 	bl	80004c8 <__aeabi_dmul>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4630      	mov	r0, r6
 8005318:	4629      	mov	r1, r5
 800531a:	f7fa ff1f 	bl	800015c <__adddf3>
 800531e:	4606      	mov	r6, r0
 8005320:	460d      	mov	r5, r1
 8005322:	4630      	mov	r0, r6
 8005324:	4629      	mov	r1, r5
 8005326:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800532a:	2900      	cmp	r1, #0
 800532c:	dc0d      	bgt.n	800534a <__ieee754_sqrt+0x56>
 800532e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005332:	ea5c 0c00 	orrs.w	ip, ip, r0
 8005336:	d0f4      	beq.n	8005322 <__ieee754_sqrt+0x2e>
 8005338:	b139      	cbz	r1, 800534a <__ieee754_sqrt+0x56>
 800533a:	4602      	mov	r2, r0
 800533c:	f7fa ff0c 	bl	8000158 <__aeabi_dsub>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	f7fb f9ea 	bl	800071c <__aeabi_ddiv>
 8005348:	e7e9      	b.n	800531e <__ieee754_sqrt+0x2a>
 800534a:	1512      	asrs	r2, r2, #20
 800534c:	f000 8089 	beq.w	8005462 <__ieee754_sqrt+0x16e>
 8005350:	2500      	movs	r5, #0
 8005352:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005356:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800535a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800535e:	07d2      	lsls	r2, r2, #31
 8005360:	bf5c      	itt	pl
 8005362:	005b      	lslpl	r3, r3, #1
 8005364:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8005368:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800536c:	bf58      	it	pl
 800536e:	0064      	lslpl	r4, r4, #1
 8005370:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005374:	0062      	lsls	r2, r4, #1
 8005376:	2016      	movs	r0, #22
 8005378:	4629      	mov	r1, r5
 800537a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800537e:	1076      	asrs	r6, r6, #1
 8005380:	190f      	adds	r7, r1, r4
 8005382:	429f      	cmp	r7, r3
 8005384:	bfde      	ittt	le
 8005386:	1bdb      	suble	r3, r3, r7
 8005388:	1939      	addle	r1, r7, r4
 800538a:	192d      	addle	r5, r5, r4
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	3801      	subs	r0, #1
 8005390:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005394:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005398:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800539c:	d1f0      	bne.n	8005380 <__ieee754_sqrt+0x8c>
 800539e:	4604      	mov	r4, r0
 80053a0:	2720      	movs	r7, #32
 80053a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80053a6:	428b      	cmp	r3, r1
 80053a8:	eb0c 0e00 	add.w	lr, ip, r0
 80053ac:	dc02      	bgt.n	80053b4 <__ieee754_sqrt+0xc0>
 80053ae:	d113      	bne.n	80053d8 <__ieee754_sqrt+0xe4>
 80053b0:	4596      	cmp	lr, r2
 80053b2:	d811      	bhi.n	80053d8 <__ieee754_sqrt+0xe4>
 80053b4:	f1be 0f00 	cmp.w	lr, #0
 80053b8:	eb0e 000c 	add.w	r0, lr, ip
 80053bc:	da56      	bge.n	800546c <__ieee754_sqrt+0x178>
 80053be:	2800      	cmp	r0, #0
 80053c0:	db54      	blt.n	800546c <__ieee754_sqrt+0x178>
 80053c2:	f101 0801 	add.w	r8, r1, #1
 80053c6:	1a5b      	subs	r3, r3, r1
 80053c8:	4641      	mov	r1, r8
 80053ca:	4596      	cmp	lr, r2
 80053cc:	bf88      	it	hi
 80053ce:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80053d2:	eba2 020e 	sub.w	r2, r2, lr
 80053d6:	4464      	add	r4, ip
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	3f01      	subs	r7, #1
 80053dc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80053e0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80053e4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80053e8:	d1dd      	bne.n	80053a6 <__ieee754_sqrt+0xb2>
 80053ea:	4313      	orrs	r3, r2
 80053ec:	d01b      	beq.n	8005426 <__ieee754_sqrt+0x132>
 80053ee:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800549c <__ieee754_sqrt+0x1a8>
 80053f2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80054a0 <__ieee754_sqrt+0x1ac>
 80053f6:	e9da 0100 	ldrd	r0, r1, [sl]
 80053fa:	e9db 2300 	ldrd	r2, r3, [fp]
 80053fe:	f7fa feab 	bl	8000158 <__aeabi_dsub>
 8005402:	e9da 8900 	ldrd	r8, r9, [sl]
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	4640      	mov	r0, r8
 800540c:	4649      	mov	r1, r9
 800540e:	f7fb fad7 	bl	80009c0 <__aeabi_dcmple>
 8005412:	b140      	cbz	r0, 8005426 <__ieee754_sqrt+0x132>
 8005414:	e9da 0100 	ldrd	r0, r1, [sl]
 8005418:	e9db 2300 	ldrd	r2, r3, [fp]
 800541c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005420:	d126      	bne.n	8005470 <__ieee754_sqrt+0x17c>
 8005422:	463c      	mov	r4, r7
 8005424:	3501      	adds	r5, #1
 8005426:	106b      	asrs	r3, r5, #1
 8005428:	0864      	lsrs	r4, r4, #1
 800542a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800542e:	07ea      	lsls	r2, r5, #31
 8005430:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005434:	bf48      	it	mi
 8005436:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800543a:	4620      	mov	r0, r4
 800543c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8005440:	e76d      	b.n	800531e <__ieee754_sqrt+0x2a>
 8005442:	0ae3      	lsrs	r3, r4, #11
 8005444:	3915      	subs	r1, #21
 8005446:	0564      	lsls	r4, r4, #21
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0fa      	beq.n	8005442 <__ieee754_sqrt+0x14e>
 800544c:	02d8      	lsls	r0, r3, #11
 800544e:	d50a      	bpl.n	8005466 <__ieee754_sqrt+0x172>
 8005450:	f1c2 0020 	rsb	r0, r2, #32
 8005454:	fa24 f000 	lsr.w	r0, r4, r0
 8005458:	1e55      	subs	r5, r2, #1
 800545a:	4094      	lsls	r4, r2
 800545c:	4303      	orrs	r3, r0
 800545e:	1b4a      	subs	r2, r1, r5
 8005460:	e776      	b.n	8005350 <__ieee754_sqrt+0x5c>
 8005462:	4611      	mov	r1, r2
 8005464:	e7f0      	b.n	8005448 <__ieee754_sqrt+0x154>
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	3201      	adds	r2, #1
 800546a:	e7ef      	b.n	800544c <__ieee754_sqrt+0x158>
 800546c:	4688      	mov	r8, r1
 800546e:	e7aa      	b.n	80053c6 <__ieee754_sqrt+0xd2>
 8005470:	f7fa fe74 	bl	800015c <__adddf3>
 8005474:	e9da 8900 	ldrd	r8, r9, [sl]
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	4640      	mov	r0, r8
 800547e:	4649      	mov	r1, r9
 8005480:	f7fb fa94 	bl	80009ac <__aeabi_dcmplt>
 8005484:	b120      	cbz	r0, 8005490 <__ieee754_sqrt+0x19c>
 8005486:	1ca1      	adds	r1, r4, #2
 8005488:	bf08      	it	eq
 800548a:	3501      	addeq	r5, #1
 800548c:	3402      	adds	r4, #2
 800548e:	e7ca      	b.n	8005426 <__ieee754_sqrt+0x132>
 8005490:	3401      	adds	r4, #1
 8005492:	f024 0401 	bic.w	r4, r4, #1
 8005496:	e7c6      	b.n	8005426 <__ieee754_sqrt+0x132>
 8005498:	7ff00000 	.word	0x7ff00000
 800549c:	20000070 	.word	0x20000070
 80054a0:	20000078 	.word	0x20000078

080054a4 <_init>:
 80054a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a6:	bf00      	nop
 80054a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054aa:	bc08      	pop	{r3}
 80054ac:	469e      	mov	lr, r3
 80054ae:	4770      	bx	lr

080054b0 <_fini>:
 80054b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b2:	bf00      	nop
 80054b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b6:	bc08      	pop	{r3}
 80054b8:	469e      	mov	lr, r3
 80054ba:	4770      	bx	lr
