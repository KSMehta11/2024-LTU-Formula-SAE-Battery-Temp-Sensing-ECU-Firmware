
2024 LTU FE Temp Sensing ECU Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005514  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005628  08005628  00015628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005698  08005698  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08005698  08005698  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005698  08005698  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005698  08005698  00015698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800569c  0800569c  0001569c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080056a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000080  08005720  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08005720  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009424  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c6f  00000000  00000000  00029510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c8  00000000  00000000  0002b180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006a0  00000000  00000000  0002ba48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001849a  00000000  00000000  0002c0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa65  00000000  00000000  00044582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e5c7  00000000  00000000  0004efe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028b4  00000000  00000000  000dd5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  000dfe64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	0800560c 	.word	0x0800560c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	0800560c 	.word	0x0800560c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <TS_ECU_SYNC_RX1_FilterConfig>:
 */

#include <CAN.h>

void TS_ECU_SYNC_RX1_FilterConfig(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	filter.FilterActivation = CAN_FILTER_ENABLE;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	623b      	str	r3, [r7, #32]
	filter.FilterBank = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
	filter.FilterIdHigh = (TS_ECU_SYNC_RX1_CANID << 5);
 8000b2a:	f246 0320 	movw	r3, #24608	; 0x6020
 8000b2e:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (0x000U);
 8000b30:	2300      	movs	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = (TS_ECU_SYNC_RX1_CANID << 5);
 8000b34:	f246 0320 	movw	r3, #24608	; 0x6020
 8000b38:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (0x000U);
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
	filter.FilterMode = CAN_FILTERMODE_IDLIST;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b42:	2301      	movs	r3, #1
 8000b44:	61fb      	str	r3, [r7, #28]
	filter.SlaveStartFilterBank = 15;
 8000b46:	230f      	movs	r3, #15
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK)
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4806      	ldr	r0, [pc, #24]	; (8000b68 <TS_ECU_SYNC_RX1_FilterConfig+0x50>)
 8000b50:	f002 f826 	bl	8002ba0 <HAL_CAN_ConfigFilter>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <TS_ECU_SYNC_RX1_FilterConfig+0x46>
	{
		Error_Handler();
 8000b5a:	f001 f865 	bl	8001c28 <Error_Handler>
	}
}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	; 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200000d0 	.word	0x200000d0

08000b6c <TS_ECU_SYNC_RX2_FilterConfig>:

void TS_ECU_SYNC_RX2_FilterConfig(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	filter.FilterActivation = CAN_FILTER_ENABLE;
 8000b72:	2301      	movs	r3, #1
 8000b74:	623b      	str	r3, [r7, #32]
	filter.FilterBank = 1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
	filter.FilterIdHigh = (TS_ECU_SYNC_RX2_CANID << 5);
 8000b7e:	f246 0340 	movw	r3, #24640	; 0x6040
 8000b82:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (0x000U);
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = (TS_ECU_SYNC_RX2_CANID << 5);
 8000b88:	f246 0340 	movw	r3, #24640	; 0x6040
 8000b8c:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (0x000U);
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
	filter.FilterMode = CAN_FILTERMODE_IDLIST;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b96:	2301      	movs	r3, #1
 8000b98:	61fb      	str	r3, [r7, #28]
	filter.SlaveStartFilterBank = 15;
 8000b9a:	230f      	movs	r3, #15
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK)
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4806      	ldr	r0, [pc, #24]	; (8000bbc <TS_ECU_SYNC_RX2_FilterConfig+0x50>)
 8000ba4:	f001 fffc 	bl	8002ba0 <HAL_CAN_ConfigFilter>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <TS_ECU_SYNC_RX2_FilterConfig+0x46>
	{
		Error_Handler();
 8000bae:	f001 f83b 	bl	8001c28 <Error_Handler>
	}
}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	; 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200000d0 	.word	0x200000d0

08000bc0 <TS_ECU_ChargingStateTrigFilterConfig>:

void TS_ECU_ChargingStateTrigFilterConfig(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	filter.FilterActivation = CAN_FILTER_ENABLE;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	623b      	str	r3, [r7, #32]
	filter.FilterBank = 2;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	617b      	str	r3, [r7, #20]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
	filter.FilterIdHigh = (TS_ECU_ChargingStateTrigger_CANID << 5);
 8000bd2:	f245 7340 	movw	r3, #22336	; 0x5740
 8000bd6:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (0x000U);
 8000bd8:	2300      	movs	r3, #0
 8000bda:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = (TS_ECU_ChargingStateTrigger_CANID << 5);
 8000bdc:	f245 7340 	movw	r3, #22336	; 0x5740
 8000be0:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (0x000U);
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
	filter.FilterMode = CAN_FILTERMODE_IDLIST;
 8000be6:	2301      	movs	r3, #1
 8000be8:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000bea:	2301      	movs	r3, #1
 8000bec:	61fb      	str	r3, [r7, #28]
	filter.SlaveStartFilterBank = 15;
 8000bee:	230f      	movs	r3, #15
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK)
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4806      	ldr	r0, [pc, #24]	; (8000c10 <TS_ECU_ChargingStateTrigFilterConfig+0x50>)
 8000bf8:	f001 ffd2 	bl	8002ba0 <HAL_CAN_ConfigFilter>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <TS_ECU_ChargingStateTrigFilterConfig+0x46>
	{
		Error_Handler();
 8000c02:	f001 f811 	bl	8001c28 <Error_Handler>
	}
}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	; 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000d0 	.word	0x200000d0

08000c14 <TS_ECU1_SendDiagnosticData>:

void TS_ECU1_SendDiagnosticData(TS_ECU1_TX1_t* _tx1_t)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08c      	sub	sp, #48	; 0x30
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[5];
	uint32_t mailbox;
	uint8_t dlc, ide;

	Pack_TS_ECU1_TX1_Temp(_tx1_t, data, &dlc, &ide);
 8000c1c:	f107 030a 	add.w	r3, r7, #10
 8000c20:	f107 020b 	add.w	r2, r7, #11
 8000c24:	f107 0110 	add.w	r1, r7, #16
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f001 f935 	bl	8001e98 <Pack_TS_ECU1_TX1_Temp>

	txHeader.DLC = TS_ECU1_TX1_DLC;
 8000c2e:	2305      	movs	r3, #5
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
	txHeader.ExtId = DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
	txHeader.IDE = TS_ECU1_TX1_IDE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
	txHeader.StdId = TS_ECU1_TX1_CANID;
 8000c3e:	f240 3311 	movw	r3, #785	; 0x311
 8000c42:	61bb      	str	r3, [r7, #24]
	txHeader.TransmitGlobalTime = DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	if (HAL_CAN_AddTxMessage(&hcan, &txHeader, data, &mailbox) != HAL_OK)
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	f107 0210 	add.w	r2, r7, #16
 8000c52:	f107 0118 	add.w	r1, r7, #24
 8000c56:	480b      	ldr	r0, [pc, #44]	; (8000c84 <TS_ECU1_SendDiagnosticData+0x70>)
 8000c58:	f002 f8af 	bl	8002dba <HAL_CAN_AddTxMessage>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <TS_ECU1_SendDiagnosticData+0x52>
	{
		Error_Handler();
 8000c62:	f000 ffe1 	bl	8001c28 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan, mailbox));
 8000c66:	bf00      	nop
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <TS_ECU1_SendDiagnosticData+0x70>)
 8000c6e:	f002 f973 	bl	8002f58 <HAL_CAN_IsTxMessagePending>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1f7      	bne.n	8000c68 <TS_ECU1_SendDiagnosticData+0x54>

}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	3730      	adds	r7, #48	; 0x30
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200000d0 	.word	0x200000d0

08000c88 <TS_ECU1_SendTemperatures>:

	while (HAL_CAN_IsTxMessagePending(&hcan, mailbox));
}

void TS_ECU1_SendTemperatures(int* _tempArray)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b09c      	sub	sp, #112	; 0x70
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeaderOne, txHeaderTwo, txHeaderThree;
	uint8_t dataTX2[8], dataTX3[8], dataTX4[8];
	uint32_t mailbox;

    for(int i = 0; i < 8; i++) {
 8000c90:	2300      	movs	r3, #0
 8000c92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000c94:	e02e      	b.n	8000cf4 <TS_ECU1_SendTemperatures+0x6c>
        dataTX2[i] = ((_tempArray[i] & (0xFFU)) + 40);
 8000c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	3328      	adds	r3, #40	; 0x28
 8000ca4:	b2d9      	uxtb	r1, r3
 8000ca6:	f107 021c 	add.w	r2, r7, #28
 8000caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cac:	4413      	add	r3, r2
 8000cae:	460a      	mov	r2, r1
 8000cb0:	701a      	strb	r2, [r3, #0]
        dataTX3[i] = ((_tempArray[i + 8] & (0xFFU)) + 40);
 8000cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cb4:	3308      	adds	r3, #8
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	4413      	add	r3, r2
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	3328      	adds	r3, #40	; 0x28
 8000cc2:	b2d9      	uxtb	r1, r3
 8000cc4:	f107 0214 	add.w	r2, r7, #20
 8000cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cca:	4413      	add	r3, r2
 8000ccc:	460a      	mov	r2, r1
 8000cce:	701a      	strb	r2, [r3, #0]
        dataTX4[i] = ((_tempArray[i + 16] & (0xFFU)) + 40);
 8000cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cd2:	3310      	adds	r3, #16
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	3328      	adds	r3, #40	; 0x28
 8000ce0:	b2d9      	uxtb	r1, r3
 8000ce2:	f107 020c 	add.w	r2, r7, #12
 8000ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ce8:	4413      	add	r3, r2
 8000cea:	460a      	mov	r2, r1
 8000cec:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 8; i++) {
 8000cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cf6:	2b07      	cmp	r3, #7
 8000cf8:	ddcd      	ble.n	8000c96 <TS_ECU1_SendTemperatures+0xe>
    }

    txHeaderOne.DLC = TS_ECU1_TX2_DLC;
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	667b      	str	r3, [r7, #100]	; 0x64
    txHeaderOne.ExtId = DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	65bb      	str	r3, [r7, #88]	; 0x58
    txHeaderOne.IDE = TS_ECU1_TX2_IDE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	65fb      	str	r3, [r7, #92]	; 0x5c
    txHeaderOne.RTR = CAN_RTR_DATA;
 8000d06:	2300      	movs	r3, #0
 8000d08:	663b      	str	r3, [r7, #96]	; 0x60
    txHeaderOne.StdId = TS_ECU1_TX2_CANID;
 8000d0a:	f240 3312 	movw	r3, #786	; 0x312
 8000d0e:	657b      	str	r3, [r7, #84]	; 0x54
    txHeaderOne.TransmitGlobalTime = DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

    txHeaderTwo.DLC = TS_ECU1_TX3_DLC;
 8000d16:	2308      	movs	r3, #8
 8000d18:	64fb      	str	r3, [r7, #76]	; 0x4c
    txHeaderTwo.ExtId = DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	643b      	str	r3, [r7, #64]	; 0x40
    txHeaderTwo.IDE = TS_ECU1_TX3_IDE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	647b      	str	r3, [r7, #68]	; 0x44
    txHeaderTwo.RTR = CAN_RTR_DATA;
 8000d22:	2300      	movs	r3, #0
 8000d24:	64bb      	str	r3, [r7, #72]	; 0x48
    txHeaderTwo.StdId = TS_ECU1_TX3_CANID;
 8000d26:	f240 3313 	movw	r3, #787	; 0x313
 8000d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    txHeaderTwo.TransmitGlobalTime = DISABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

    txHeaderThree.DLC = TS_ECU1_TX4_DLC;
 8000d32:	2308      	movs	r3, #8
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
    txHeaderThree.ExtId = DISABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
    txHeaderThree.IDE = TS_ECU1_TX4_IDE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    txHeaderThree.RTR = CAN_RTR_DATA;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
    txHeaderThree.StdId = TS_ECU1_TX4_CANID;
 8000d42:	f44f 7345 	mov.w	r3, #788	; 0x314
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
    txHeaderThree.TransmitGlobalTime = DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

	if (HAL_CAN_AddTxMessage(&hcan, &txHeaderOne, dataTX2, &mailbox) != HAL_OK)
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	f107 021c 	add.w	r2, r7, #28
 8000d56:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000d5a:	4822      	ldr	r0, [pc, #136]	; (8000de4 <TS_ECU1_SendTemperatures+0x15c>)
 8000d5c:	f002 f82d 	bl	8002dba <HAL_CAN_AddTxMessage>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <TS_ECU1_SendTemperatures+0xe2>
	{
		Error_Handler();
 8000d66:	f000 ff5f 	bl	8001c28 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan, mailbox));
 8000d6a:	bf00      	nop
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	481c      	ldr	r0, [pc, #112]	; (8000de4 <TS_ECU1_SendTemperatures+0x15c>)
 8000d72:	f002 f8f1 	bl	8002f58 <HAL_CAN_IsTxMessagePending>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d1f7      	bne.n	8000d6c <TS_ECU1_SendTemperatures+0xe4>

	if (HAL_CAN_AddTxMessage(&hcan, &txHeaderTwo, dataTX3, &mailbox) != HAL_OK)
 8000d7c:	f107 0308 	add.w	r3, r7, #8
 8000d80:	f107 0214 	add.w	r2, r7, #20
 8000d84:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000d88:	4816      	ldr	r0, [pc, #88]	; (8000de4 <TS_ECU1_SendTemperatures+0x15c>)
 8000d8a:	f002 f816 	bl	8002dba <HAL_CAN_AddTxMessage>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <TS_ECU1_SendTemperatures+0x110>
	{
		Error_Handler();
 8000d94:	f000 ff48 	bl	8001c28 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan, mailbox));
 8000d98:	bf00      	nop
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4811      	ldr	r0, [pc, #68]	; (8000de4 <TS_ECU1_SendTemperatures+0x15c>)
 8000da0:	f002 f8da 	bl	8002f58 <HAL_CAN_IsTxMessagePending>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f7      	bne.n	8000d9a <TS_ECU1_SendTemperatures+0x112>

	if (HAL_CAN_AddTxMessage(&hcan, &txHeaderThree, dataTX4, &mailbox) != HAL_OK)
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	f107 020c 	add.w	r2, r7, #12
 8000db2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000db6:	480b      	ldr	r0, [pc, #44]	; (8000de4 <TS_ECU1_SendTemperatures+0x15c>)
 8000db8:	f001 ffff 	bl	8002dba <HAL_CAN_AddTxMessage>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <TS_ECU1_SendTemperatures+0x13e>
	{
		Error_Handler();
 8000dc2:	f000 ff31 	bl	8001c28 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan, mailbox));
 8000dc6:	bf00      	nop
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <TS_ECU1_SendTemperatures+0x15c>)
 8000dce:	f002 f8c3 	bl	8002f58 <HAL_CAN_IsTxMessagePending>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1f7      	bne.n	8000dc8 <TS_ECU1_SendTemperatures+0x140>
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3770      	adds	r7, #112	; 0x70
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200000d0 	.word	0x200000d0

08000de8 <HAL_CAN_RxFifo0MsgPendingCallback>:
static int getTempCH1(ADC_HandleTypeDef* hadc);
static int getTempCH2(ADC_HandleTypeDef* hadc);

// CAN ISR
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  //UNUSED(hcan);

	if (hcan->Instance == CAN1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d108      	bne.n	8000e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeaderFIFO0, dataFIFO0);
 8000dfa:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f002 f8cc 	bl	8002f9e <HAL_CAN_GetRxMessage>

		msgPendingFlag = true;
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	701a      	strb	r2, [r3, #0]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40006400 	.word	0x40006400
 8000e18:	20000194 	.word	0x20000194
 8000e1c:	20000178 	.word	0x20000178
 8000e20:	200001ae 	.word	0x200001ae

08000e24 <HAL_GPIO_EXTI_Callback>:

// Fault ISR
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  //UNUSED(GPIO_Pin);

	if (GPIO_Pin == FAULT_IN_PIN)
 8000e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d113      	bne.n	8000e60 <HAL_GPIO_EXTI_Callback+0x3c>
	{
		tx1_t.TS_ECU_FaultInState = HAL_GPIO_ReadPin(FAULT_PIN_PORT, FAULT_IN_PIN);
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x44>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 fea6 	bl	8003b94 <HAL_GPIO_ReadPin>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <HAL_GPIO_EXTI_Callback+0x48>)
 8000e4e:	71da      	strb	r2, [r3, #7]

		HAL_GPIO_WritePin(FAULT_PIN_PORT, FAULT_OUT_PIN, GPIO_PIN_RESET);
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x44>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e58:	2200      	movs	r2, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f002 feb1 	bl	8003bc2 <HAL_GPIO_WritePin>
	}

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	200001a0 	.word	0x200001a0

08000e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e76:	f001 f8bb 	bl	8001ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7a:	f000 fb67 	bl	800154c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7e:	f000 fc61 	bl	8001744 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e82:	f000 fbc1 	bl	8001608 <MX_ADC1_Init>
  MX_CAN_Init();
 8000e86:	f000 fc0d 	bl	80016a4 <MX_CAN_Init>
  MX_IWDG_Init();
 8000e8a:	f000 fc41 	bl	8001710 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  // Initial State
  ecuState = DISCHARGE_STATE;
 8000e8e:	4b90      	ldr	r3, [pc, #576]	; (80010d0 <main+0x260>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(FAULT_PIN_PORT, FAULT_OUT_PIN, GPIO_PIN_SET);
 8000e94:	4b8f      	ldr	r3, [pc, #572]	; (80010d4 <main+0x264>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f002 fe8f 	bl	8003bc2 <HAL_GPIO_WritePin>

  tx1_t.TS_ECU_FaultOutState = GPIO_PIN_SET;
 8000ea4:	4b8c      	ldr	r3, [pc, #560]	; (80010d8 <main+0x268>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	721a      	strb	r2, [r3, #8]

  tx1_t.TS_ECU_FaultInState = HAL_GPIO_ReadPin(FAULT_PIN_PORT, FAULT_IN_PIN);
 8000eaa:	4b8a      	ldr	r3, [pc, #552]	; (80010d4 <main+0x264>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f002 fe6d 	bl	8003b94 <HAL_GPIO_ReadPin>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b86      	ldr	r3, [pc, #536]	; (80010d8 <main+0x268>)
 8000ec0:	71da      	strb	r2, [r3, #7]

  // Initialize CAN
  HAL_CAN_Start(&hcan);
 8000ec2:	4886      	ldr	r0, [pc, #536]	; (80010dc <main+0x26c>)
 8000ec4:	f001 ff35 	bl	8002d32 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000ec8:	2102      	movs	r1, #2
 8000eca:	4884      	ldr	r0, [pc, #528]	; (80010dc <main+0x26c>)
 8000ecc:	f002 f988 	bl	80031e0 <HAL_CAN_ActivateNotification>

  // CAN Filter Configuration
  TS_ECU_ChargingStateTrigFilterConfig();
 8000ed0:	f7ff fe76 	bl	8000bc0 <TS_ECU_ChargingStateTrigFilterConfig>

  TS_ECU_SYNC_RX1_FilterConfig();
 8000ed4:	f7ff fe20 	bl	8000b18 <TS_ECU_SYNC_RX1_FilterConfig>

  TS_ECU_SYNC_RX2_FilterConfig();
 8000ed8:	f7ff fe48 	bl	8000b6c <TS_ECU_SYNC_RX2_FilterConfig>

  tx1_t.TS_ECU_OpenCircuitFault = false;
 8000edc:	4b7e      	ldr	r3, [pc, #504]	; (80010d8 <main+0x268>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	729a      	strb	r2, [r3, #10]
  tx1_t.TS_ECU_TempThresholdFault = false;
 8000ee2:	4b7d      	ldr	r3, [pc, #500]	; (80010d8 <main+0x268>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	725a      	strb	r2, [r3, #9]

  HAL_Delay(100);
 8000ee8:	2064      	movs	r0, #100	; 0x64
 8000eea:	f001 f8e3 	bl	80020b4 <HAL_Delay>

  HAL_GPIO_WritePin(WATCHDOG_LED_PIN_PORT, WATCHDOG_LED_PIN, GPIO_PIN_RESET);
 8000eee:	4b7c      	ldr	r3, [pc, #496]	; (80010e0 <main+0x270>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f002 fe62 	bl	8003bc2 <HAL_GPIO_WritePin>

  // Enable Watchdog
  HAL_IWDG_Init(&hiwdg);
 8000efe:	4879      	ldr	r0, [pc, #484]	; (80010e4 <main+0x274>)
 8000f00:	f002 fe90 	bl	8003c24 <HAL_IWDG_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // CAN Message Processing
	  if (msgPendingFlag == true)
 8000f04:	4b78      	ldr	r3, [pc, #480]	; (80010e8 <main+0x278>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d149      	bne.n	8000fa2 <main+0x132>
	  {
		  if (rxHeaderFIFO0.StdId == TS_ECU_SYNC_RX1_CANID && (((dataFIFO0[0] & (0xFFU)) == (0x00U)) || ((dataFIFO0[0] & (0xFFU)) == SEGMENT_ID)))
 8000f0e:	4b77      	ldr	r3, [pc, #476]	; (80010ec <main+0x27c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f240 3201 	movw	r2, #769	; 0x301
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d10b      	bne.n	8000f32 <main+0xc2>
 8000f1a:	4b75      	ldr	r3, [pc, #468]	; (80010f0 <main+0x280>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <main+0xba>
 8000f22:	4b73      	ldr	r3, [pc, #460]	; (80010f0 <main+0x280>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d103      	bne.n	8000f32 <main+0xc2>
		  {
			  syncOneFlag = true;
 8000f2a:	4b72      	ldr	r3, [pc, #456]	; (80010f4 <main+0x284>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	e034      	b.n	8000f9c <main+0x12c>

			  //syncOneTime = HAL_GetTick();
		  }
		  else if (rxHeaderFIFO0.StdId == TS_ECU_SYNC_RX2_CANID && (((dataFIFO0[0] & (0xFFU)) == (0x00U)) || ((dataFIFO0[0] & (0xFFU)) == SEGMENT_ID)))
 8000f32:	4b6e      	ldr	r3, [pc, #440]	; (80010ec <main+0x27c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f240 3202 	movw	r2, #770	; 0x302
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d110      	bne.n	8000f60 <main+0xf0>
 8000f3e:	4b6c      	ldr	r3, [pc, #432]	; (80010f0 <main+0x280>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <main+0xde>
 8000f46:	4b6a      	ldr	r3, [pc, #424]	; (80010f0 <main+0x280>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d108      	bne.n	8000f60 <main+0xf0>
		  {
			  syncTwoFlag = true;
 8000f4e:	4b6a      	ldr	r3, [pc, #424]	; (80010f8 <main+0x288>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]

			  syncTwoTime = HAL_GetTick();
 8000f54:	f001 f8a4 	bl	80020a0 <HAL_GetTick>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4a68      	ldr	r2, [pc, #416]	; (80010fc <main+0x28c>)
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e01d      	b.n	8000f9c <main+0x12c>
		  }
		  else if (rxHeaderFIFO0.StdId == TS_ECU_ChargingStateTrigger_CANID)
 8000f60:	4b62      	ldr	r3, [pc, #392]	; (80010ec <main+0x27c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f240 22ba 	movw	r2, #698	; 0x2ba
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d117      	bne.n	8000f9c <main+0x12c>
		  {
			  Unpack_TS_ECU_ChargingStateTrigger_Temp(&stateTrigger_t, dataFIFO0, TS_ECU_ChargingStateTrigger_DLC);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4960      	ldr	r1, [pc, #384]	; (80010f0 <main+0x280>)
 8000f70:	4863      	ldr	r0, [pc, #396]	; (8001100 <main+0x290>)
 8000f72:	f000 ff73 	bl	8001e5c <Unpack_TS_ECU_ChargingStateTrigger_Temp>

			  if (stateTrigger_t.Orion_2_ChargePowerState == (0x01U) && stateTrigger_t.Orion_2_ChargeSafetyState == (0x01U))
 8000f76:	4b62      	ldr	r3, [pc, #392]	; (8001100 <main+0x290>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d10e      	bne.n	8000f9c <main+0x12c>
 8000f7e:	4b60      	ldr	r3, [pc, #384]	; (8001100 <main+0x290>)
 8000f80:	785b      	ldrb	r3, [r3, #1]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d10a      	bne.n	8000f9c <main+0x12c>
			  {
				  ecuState = CHARGING_STATE;
 8000f86:	4b52      	ldr	r3, [pc, #328]	; (80010d0 <main+0x260>)
 8000f88:	2202      	movs	r2, #2
 8000f8a:	701a      	strb	r2, [r3, #0]

				  chargingTriggerFlag = true;
 8000f8c:	4b5d      	ldr	r3, [pc, #372]	; (8001104 <main+0x294>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]

				  currentChargingTriggerTime = HAL_GetTick();
 8000f92:	f001 f885 	bl	80020a0 <HAL_GetTick>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4a5b      	ldr	r2, [pc, #364]	; (8001108 <main+0x298>)
 8000f9a:	6013      	str	r3, [r2, #0]
			  }
		  }

		  msgPendingFlag = false;
 8000f9c:	4b52      	ldr	r3, [pc, #328]	; (80010e8 <main+0x278>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
	  }

	  // Process Temperatures
	  for (int s3 = 0; s3 <= 1; s3++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	e1b1      	b.n	800130c <main+0x49c>
	  {
		  for (int s2 = 0; s2 <= 1; s2++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	e1a7      	b.n	80012fe <main+0x48e>
		  {
			  for (int s1 = 0; s1 <= 1; s1++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	603b      	str	r3, [r7, #0]
 8000fb2:	e19d      	b.n	80012f0 <main+0x480>
			  {
				  for (int s0 = 0; s0 <= 1; s0++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	e193      	b.n	80012e2 <main+0x472>
				  {
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, s3);
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	2120      	movs	r1, #32
 8000fc2:	4852      	ldr	r0, [pc, #328]	; (800110c <main+0x29c>)
 8000fc4:	f002 fdfd 	bl	8003bc2 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, s2);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	461a      	mov	r2, r3
 8000fce:	2140      	movs	r1, #64	; 0x40
 8000fd0:	484e      	ldr	r0, [pc, #312]	; (800110c <main+0x29c>)
 8000fd2:	f002 fdf6 	bl	8003bc2 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, s1);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	461a      	mov	r2, r3
 8000fdc:	2108      	movs	r1, #8
 8000fde:	484b      	ldr	r0, [pc, #300]	; (800110c <main+0x29c>)
 8000fe0:	f002 fdef 	bl	8003bc2 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, s0);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	2110      	movs	r1, #16
 8000fec:	4847      	ldr	r0, [pc, #284]	; (800110c <main+0x29c>)
 8000fee:	f002 fde8 	bl	8003bc2 <HAL_GPIO_WritePin>

					  if ((s3 == 1 && s2 == 1 && s1 == 1) || (s0 == 1 && s2 == 1 && s3 == 1) || (s3 == 1 && s2 == 1 && s1 == 0 && s0 == 0))
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d106      	bne.n	8001006 <main+0x196>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d103      	bne.n	8001006 <main+0x196>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	f000 816a 	beq.w	80012da <main+0x46a>
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d106      	bne.n	800101a <main+0x1aa>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d103      	bne.n	800101a <main+0x1aa>
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2b01      	cmp	r3, #1
 8001016:	f000 8160 	beq.w	80012da <main+0x46a>
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d109      	bne.n	8001034 <main+0x1c4>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d106      	bne.n	8001034 <main+0x1c4>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d103      	bne.n	8001034 <main+0x1c4>
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 8153 	beq.w	80012da <main+0x46a>
						  continue;
					  }

					  /*******************************  Cell 1-12 *******************************/

					  tempArray[counterCH1] = getTempCH1(&hadc1);
 8001034:	4b36      	ldr	r3, [pc, #216]	; (8001110 <main+0x2a0>)
 8001036:	681c      	ldr	r4, [r3, #0]
 8001038:	4836      	ldr	r0, [pc, #216]	; (8001114 <main+0x2a4>)
 800103a:	f000 fc1d 	bl	8001878 <getTempCH1>
 800103e:	4603      	mov	r3, r0
 8001040:	4a35      	ldr	r2, [pc, #212]	; (8001118 <main+0x2a8>)
 8001042:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

					  if (tempArray[counterCH1] < OPEN_CIRCUIT_THRESHOLD)
 8001046:	4b32      	ldr	r3, [pc, #200]	; (8001110 <main+0x2a0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a33      	ldr	r2, [pc, #204]	; (8001118 <main+0x2a8>)
 800104c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001050:	f513 6f7a 	cmn.w	r3, #4000	; 0xfa0
 8001054:	da13      	bge.n	800107e <main+0x20e>
					  {
						  HAL_GPIO_WritePin(FAULT_PIN_PORT, FAULT_OUT_PIN, GPIO_PIN_RESET);
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <main+0x264>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105e:	2200      	movs	r2, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f002 fdae 	bl	8003bc2 <HAL_GPIO_WritePin>

						  tempArray[counterCH1] = 200;
 8001066:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <main+0x2a0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a2b      	ldr	r2, [pc, #172]	; (8001118 <main+0x2a8>)
 800106c:	21c8      	movs	r1, #200	; 0xc8
 800106e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

						  tx1_t.TS_ECU_OpenCircuitFault = true;
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <main+0x268>)
 8001074:	2201      	movs	r2, #1
 8001076:	729a      	strb	r2, [r3, #10]

						  tx1_t.TS_ECU_FaultOutState = GPIO_PIN_RESET;
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <main+0x268>)
 800107a:	2200      	movs	r2, #0
 800107c:	721a      	strb	r2, [r3, #8]
					  }

					  if (tempArray[counterCH1] > SHORT_TO_GROUND_THRESHOLD)
 800107e:	4b24      	ldr	r3, [pc, #144]	; (8001110 <main+0x2a0>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a25      	ldr	r2, [pc, #148]	; (8001118 <main+0x2a8>)
 8001084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001088:	f243 62b0 	movw	r2, #14000	; 0x36b0
 800108c:	4293      	cmp	r3, r2
 800108e:	dd13      	ble.n	80010b8 <main+0x248>
					  {
						  HAL_GPIO_WritePin(FAULT_PIN_PORT, FAULT_OUT_PIN, GPIO_PIN_RESET);
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <main+0x264>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001098:	2200      	movs	r2, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f002 fd91 	bl	8003bc2 <HAL_GPIO_WritePin>

						  tempArray[counterCH1] = 200;
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <main+0x2a0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a1c      	ldr	r2, [pc, #112]	; (8001118 <main+0x2a8>)
 80010a6:	21c8      	movs	r1, #200	; 0xc8
 80010a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

						  tx1_t.FAN_ECU_ShortToGroundFault = true;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <main+0x268>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	72da      	strb	r2, [r3, #11]

						  tx1_t.TS_ECU_FaultOutState = GPIO_PIN_RESET;
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <main+0x268>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	721a      	strb	r2, [r3, #8]
					  }

					  if (tempArray[counterCH1] == 200)
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <main+0x2a0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a16      	ldr	r2, [pc, #88]	; (8001118 <main+0x2a8>)
 80010be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c2:	2bc8      	cmp	r3, #200	; 0xc8
 80010c4:	d12c      	bne.n	8001120 <main+0x2b0>
					  {
						  cellTempSum += 0;
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <main+0x2ac>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a14      	ldr	r2, [pc, #80]	; (800111c <main+0x2ac>)
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e031      	b.n	8001134 <main+0x2c4>
 80010d0:	2000009c 	.word	0x2000009c
 80010d4:	20000000 	.word	0x20000000
 80010d8:	200001a0 	.word	0x200001a0
 80010dc:	200000d0 	.word	0x200000d0
 80010e0:	20000004 	.word	0x20000004
 80010e4:	200000f8 	.word	0x200000f8
 80010e8:	200001ae 	.word	0x200001ae
 80010ec:	20000178 	.word	0x20000178
 80010f0:	20000194 	.word	0x20000194
 80010f4:	200001b9 	.word	0x200001b9
 80010f8:	200001ba 	.word	0x200001ba
 80010fc:	200001b4 	.word	0x200001b4
 8001100:	2000019c 	.word	0x2000019c
 8001104:	200001b8 	.word	0x200001b8
 8001108:	200001b0 	.word	0x200001b0
 800110c:	40010800 	.word	0x40010800
 8001110:	20000164 	.word	0x20000164
 8001114:	200000a0 	.word	0x200000a0
 8001118:	20000104 	.word	0x20000104
 800111c:	2000016c 	.word	0x2000016c
					  }
					  else
					  {
						  cellTempSum += tempArray[counterCH1];
 8001120:	4b8d      	ldr	r3, [pc, #564]	; (8001358 <main+0x4e8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a8d      	ldr	r2, [pc, #564]	; (800135c <main+0x4ec>)
 8001126:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800112a:	4b8d      	ldr	r3, [pc, #564]	; (8001360 <main+0x4f0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a8b      	ldr	r2, [pc, #556]	; (8001360 <main+0x4f0>)
 8001132:	6013      	str	r3, [r2, #0]
					  }

					  if (tempArray[counterCH1] > highestTemp && tempArray[counterCH1] < ERROR_THRESHOLD)
 8001134:	4b88      	ldr	r3, [pc, #544]	; (8001358 <main+0x4e8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a88      	ldr	r2, [pc, #544]	; (800135c <main+0x4ec>)
 800113a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800113e:	4b89      	ldr	r3, [pc, #548]	; (8001364 <main+0x4f4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	429a      	cmp	r2, r3
 8001144:	dd10      	ble.n	8001168 <main+0x2f8>
 8001146:	4b84      	ldr	r3, [pc, #528]	; (8001358 <main+0x4e8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a84      	ldr	r2, [pc, #528]	; (800135c <main+0x4ec>)
 800114c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001150:	2b77      	cmp	r3, #119	; 0x77
 8001152:	dc09      	bgt.n	8001168 <main+0x2f8>
					  {
						  highestTemp = tempArray[counterCH1];
 8001154:	4b80      	ldr	r3, [pc, #512]	; (8001358 <main+0x4e8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a80      	ldr	r2, [pc, #512]	; (800135c <main+0x4ec>)
 800115a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115e:	4a81      	ldr	r2, [pc, #516]	; (8001364 <main+0x4f4>)
 8001160:	6013      	str	r3, [r2, #0]

						  highestTempCellCount = 0;
 8001162:	4b81      	ldr	r3, [pc, #516]	; (8001368 <main+0x4f8>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
					  }

					  if (tempArray[counterCH1] < lowestTemp)
 8001168:	4b7b      	ldr	r3, [pc, #492]	; (8001358 <main+0x4e8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a7b      	ldr	r2, [pc, #492]	; (800135c <main+0x4ec>)
 800116e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001172:	4b7e      	ldr	r3, [pc, #504]	; (800136c <main+0x4fc>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	da06      	bge.n	8001188 <main+0x318>
					  {
						  lowestTemp = tempArray[counterCH1];
 800117a:	4b77      	ldr	r3, [pc, #476]	; (8001358 <main+0x4e8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a77      	ldr	r2, [pc, #476]	; (800135c <main+0x4ec>)
 8001180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001184:	4a79      	ldr	r2, [pc, #484]	; (800136c <main+0x4fc>)
 8001186:	6013      	str	r3, [r2, #0]
					  }

					  if (tempArray[counterCH1] == highestTemp)
 8001188:	4b73      	ldr	r3, [pc, #460]	; (8001358 <main+0x4e8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a73      	ldr	r2, [pc, #460]	; (800135c <main+0x4ec>)
 800118e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001192:	4b74      	ldr	r3, [pc, #464]	; (8001364 <main+0x4f4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d104      	bne.n	80011a4 <main+0x334>
					  {
						  highestTempCellCount++;
 800119a:	4b73      	ldr	r3, [pc, #460]	; (8001368 <main+0x4f8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	4a71      	ldr	r2, [pc, #452]	; (8001368 <main+0x4f8>)
 80011a2:	6013      	str	r3, [r2, #0]
					  }

					  /*******************************  Cell 13-24 *******************************/

					  tempArray[counterCH2] = getTempCH2(&hadc1);
 80011a4:	4b72      	ldr	r3, [pc, #456]	; (8001370 <main+0x500>)
 80011a6:	681c      	ldr	r4, [r3, #0]
 80011a8:	4872      	ldr	r0, [pc, #456]	; (8001374 <main+0x504>)
 80011aa:	f000 fc51 	bl	8001a50 <getTempCH2>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4a6a      	ldr	r2, [pc, #424]	; (800135c <main+0x4ec>)
 80011b2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

					  if (tempArray[counterCH2] < OPEN_CIRCUIT_THRESHOLD)
 80011b6:	4b6e      	ldr	r3, [pc, #440]	; (8001370 <main+0x500>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a68      	ldr	r2, [pc, #416]	; (800135c <main+0x4ec>)
 80011bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c0:	f513 6f7a 	cmn.w	r3, #4000	; 0xfa0
 80011c4:	da13      	bge.n	80011ee <main+0x37e>
					  {
						  HAL_GPIO_WritePin(FAULT_PIN_PORT, FAULT_OUT_PIN, GPIO_PIN_RESET);
 80011c6:	4b6c      	ldr	r3, [pc, #432]	; (8001378 <main+0x508>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ce:	2200      	movs	r2, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 fcf6 	bl	8003bc2 <HAL_GPIO_WritePin>

						  tempArray[counterCH2] = 200;
 80011d6:	4b66      	ldr	r3, [pc, #408]	; (8001370 <main+0x500>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a60      	ldr	r2, [pc, #384]	; (800135c <main+0x4ec>)
 80011dc:	21c8      	movs	r1, #200	; 0xc8
 80011de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

						  tx1_t.TS_ECU_OpenCircuitFault = true;
 80011e2:	4b66      	ldr	r3, [pc, #408]	; (800137c <main+0x50c>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	729a      	strb	r2, [r3, #10]

						  tx1_t.TS_ECU_FaultOutState = GPIO_PIN_RESET;
 80011e8:	4b64      	ldr	r3, [pc, #400]	; (800137c <main+0x50c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	721a      	strb	r2, [r3, #8]
					  }

					  if (tempArray[counterCH2] > SHORT_TO_GROUND_THRESHOLD)
 80011ee:	4b60      	ldr	r3, [pc, #384]	; (8001370 <main+0x500>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a5a      	ldr	r2, [pc, #360]	; (800135c <main+0x4ec>)
 80011f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f8:	f243 62b0 	movw	r2, #14000	; 0x36b0
 80011fc:	4293      	cmp	r3, r2
 80011fe:	dd13      	ble.n	8001228 <main+0x3b8>
					  {
						  HAL_GPIO_WritePin(FAULT_PIN_PORT, FAULT_OUT_PIN, GPIO_PIN_RESET);
 8001200:	4b5d      	ldr	r3, [pc, #372]	; (8001378 <main+0x508>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001208:	2200      	movs	r2, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f002 fcd9 	bl	8003bc2 <HAL_GPIO_WritePin>

						  tempArray[counterCH2] = 200;
 8001210:	4b57      	ldr	r3, [pc, #348]	; (8001370 <main+0x500>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a51      	ldr	r2, [pc, #324]	; (800135c <main+0x4ec>)
 8001216:	21c8      	movs	r1, #200	; 0xc8
 8001218:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

						  tx1_t.FAN_ECU_ShortToGroundFault = true;
 800121c:	4b57      	ldr	r3, [pc, #348]	; (800137c <main+0x50c>)
 800121e:	2201      	movs	r2, #1
 8001220:	72da      	strb	r2, [r3, #11]

						  tx1_t.TS_ECU_FaultOutState = GPIO_PIN_RESET;
 8001222:	4b56      	ldr	r3, [pc, #344]	; (800137c <main+0x50c>)
 8001224:	2200      	movs	r2, #0
 8001226:	721a      	strb	r2, [r3, #8]
					  }

					  if (tempArray[counterCH2] == 200)
 8001228:	4b51      	ldr	r3, [pc, #324]	; (8001370 <main+0x500>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a4b      	ldr	r2, [pc, #300]	; (800135c <main+0x4ec>)
 800122e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001232:	2bc8      	cmp	r3, #200	; 0xc8
 8001234:	d104      	bne.n	8001240 <main+0x3d0>
					  {
						  cellTempSum += 0;
 8001236:	4b4a      	ldr	r3, [pc, #296]	; (8001360 <main+0x4f0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a49      	ldr	r2, [pc, #292]	; (8001360 <main+0x4f0>)
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e009      	b.n	8001254 <main+0x3e4>
					  }
					  else
					  {
						  cellTempSum += tempArray[counterCH2];
 8001240:	4b4b      	ldr	r3, [pc, #300]	; (8001370 <main+0x500>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a45      	ldr	r2, [pc, #276]	; (800135c <main+0x4ec>)
 8001246:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800124a:	4b45      	ldr	r3, [pc, #276]	; (8001360 <main+0x4f0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	4a43      	ldr	r2, [pc, #268]	; (8001360 <main+0x4f0>)
 8001252:	6013      	str	r3, [r2, #0]
					  }

					  if (tempArray[counterCH2] > highestTemp && tempArray[counterCH2] < ERROR_THRESHOLD)
 8001254:	4b46      	ldr	r3, [pc, #280]	; (8001370 <main+0x500>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a40      	ldr	r2, [pc, #256]	; (800135c <main+0x4ec>)
 800125a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800125e:	4b41      	ldr	r3, [pc, #260]	; (8001364 <main+0x4f4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	dd10      	ble.n	8001288 <main+0x418>
 8001266:	4b42      	ldr	r3, [pc, #264]	; (8001370 <main+0x500>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a3c      	ldr	r2, [pc, #240]	; (800135c <main+0x4ec>)
 800126c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001270:	2b77      	cmp	r3, #119	; 0x77
 8001272:	dc09      	bgt.n	8001288 <main+0x418>
					  {
						  highestTemp = tempArray[counterCH2];
 8001274:	4b3e      	ldr	r3, [pc, #248]	; (8001370 <main+0x500>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a38      	ldr	r2, [pc, #224]	; (800135c <main+0x4ec>)
 800127a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127e:	4a39      	ldr	r2, [pc, #228]	; (8001364 <main+0x4f4>)
 8001280:	6013      	str	r3, [r2, #0]

						  highestTempCellCount = 0;
 8001282:	4b39      	ldr	r3, [pc, #228]	; (8001368 <main+0x4f8>)
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
					  }

					  if (tempArray[counterCH2] < lowestTemp)
 8001288:	4b39      	ldr	r3, [pc, #228]	; (8001370 <main+0x500>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a33      	ldr	r2, [pc, #204]	; (800135c <main+0x4ec>)
 800128e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001292:	4b36      	ldr	r3, [pc, #216]	; (800136c <main+0x4fc>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	da06      	bge.n	80012a8 <main+0x438>
					  {
						  lowestTemp = tempArray[counterCH2];
 800129a:	4b35      	ldr	r3, [pc, #212]	; (8001370 <main+0x500>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a2f      	ldr	r2, [pc, #188]	; (800135c <main+0x4ec>)
 80012a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a4:	4a31      	ldr	r2, [pc, #196]	; (800136c <main+0x4fc>)
 80012a6:	6013      	str	r3, [r2, #0]
					  }

					  if (tempArray[counterCH2] == highestTemp)
 80012a8:	4b31      	ldr	r3, [pc, #196]	; (8001370 <main+0x500>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a2b      	ldr	r2, [pc, #172]	; (800135c <main+0x4ec>)
 80012ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012b2:	4b2c      	ldr	r3, [pc, #176]	; (8001364 <main+0x4f4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d104      	bne.n	80012c4 <main+0x454>
					  {
						  highestTempCellCount++;
 80012ba:	4b2b      	ldr	r3, [pc, #172]	; (8001368 <main+0x4f8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	3301      	adds	r3, #1
 80012c0:	4a29      	ldr	r2, [pc, #164]	; (8001368 <main+0x4f8>)
 80012c2:	6013      	str	r3, [r2, #0]
					  }

					  counterCH1++;
 80012c4:	4b24      	ldr	r3, [pc, #144]	; (8001358 <main+0x4e8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	4a23      	ldr	r2, [pc, #140]	; (8001358 <main+0x4e8>)
 80012cc:	6013      	str	r3, [r2, #0]

					  counterCH2++;
 80012ce:	4b28      	ldr	r3, [pc, #160]	; (8001370 <main+0x500>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	3301      	adds	r3, #1
 80012d4:	4a26      	ldr	r2, [pc, #152]	; (8001370 <main+0x500>)
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	e000      	b.n	80012dc <main+0x46c>
						  continue;
 80012da:	bf00      	nop
				  for (int s0 = 0; s0 <= 1; s0++)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3301      	adds	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	f77f ae68 	ble.w	8000fba <main+0x14a>
			  for (int s1 = 0; s1 <= 1; s1++)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	f77f ae5e 	ble.w	8000fb4 <main+0x144>
		  for (int s2 = 0; s2 <= 1; s2++)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3301      	adds	r3, #1
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b01      	cmp	r3, #1
 8001302:	f77f ae54 	ble.w	8000fae <main+0x13e>
	  for (int s3 = 0; s3 <= 1; s3++)
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	3301      	adds	r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	2b01      	cmp	r3, #1
 8001310:	f77f ae4a 	ble.w	8000fa8 <main+0x138>
				  }
			  }
		  }
	  }

	  averageSegmentTemp = (cellTempSum / CELL_COUNT);
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <main+0x4f0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a19      	ldr	r2, [pc, #100]	; (8001380 <main+0x510>)
 800131a:	fb82 1203 	smull	r1, r2, r2, r3
 800131e:	1092      	asrs	r2, r2, #2
 8001320:	17db      	asrs	r3, r3, #31
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	4a17      	ldr	r2, [pc, #92]	; (8001384 <main+0x514>)
 8001326:	6013      	str	r3, [r2, #0]

	  // Charging State Watchdog
	  if (HAL_GetTick() - currentChargingTriggerTime > 5000)
 8001328:	f000 feba 	bl	80020a0 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <main+0x518>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	f241 3288 	movw	r2, #5000	; 0x1388
 8001338:	4293      	cmp	r3, r2
 800133a:	d905      	bls.n	8001348 <main+0x4d8>
	  {
		  ecuState = DISCHARGE_STATE;
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <main+0x51c>)
 800133e:	2201      	movs	r2, #1
 8001340:	701a      	strb	r2, [r3, #0]

		  chargingTriggerFlag = false;
 8001342:	4b13      	ldr	r3, [pc, #76]	; (8001390 <main+0x520>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
	  }

	  // Temperature Threshold Check
	  switch (ecuState)
 8001348:	4b10      	ldr	r3, [pc, #64]	; (800138c <main+0x51c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d021      	beq.n	8001394 <main+0x524>
 8001350:	2b02      	cmp	r3, #2
 8001352:	d048      	beq.n	80013e6 <main+0x576>
 8001354:	e072      	b.n	800143c <main+0x5cc>
 8001356:	bf00      	nop
 8001358:	20000164 	.word	0x20000164
 800135c:	20000104 	.word	0x20000104
 8001360:	2000016c 	.word	0x2000016c
 8001364:	20000008 	.word	0x20000008
 8001368:	20000174 	.word	0x20000174
 800136c:	2000000c 	.word	0x2000000c
 8001370:	20000010 	.word	0x20000010
 8001374:	200000a0 	.word	0x200000a0
 8001378:	20000000 	.word	0x20000000
 800137c:	200001a0 	.word	0x200001a0
 8001380:	2aaaaaab 	.word	0x2aaaaaab
 8001384:	20000170 	.word	0x20000170
 8001388:	200001b0 	.word	0x200001b0
 800138c:	2000009c 	.word	0x2000009c
 8001390:	200001b8 	.word	0x200001b8
	  {
	  case DISCHARGE_STATE:

		  if ((highestTemp > DISCHARGE_TEMP_MAX_LIMIT && highestTemp < ERROR_THRESHOLD)  || lowestTemp < DISCHARGE_TEMP_MIN_LIMIT)
 8001394:	4b5d      	ldr	r3, [pc, #372]	; (800150c <main+0x69c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b3c      	cmp	r3, #60	; 0x3c
 800139a:	dd03      	ble.n	80013a4 <main+0x534>
 800139c:	4b5b      	ldr	r3, [pc, #364]	; (800150c <main+0x69c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b77      	cmp	r3, #119	; 0x77
 80013a2:	dd04      	ble.n	80013ae <main+0x53e>
 80013a4:	4b5a      	ldr	r3, [pc, #360]	; (8001510 <main+0x6a0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f113 0f14 	cmn.w	r3, #20
 80013ac:	da43      	bge.n	8001436 <main+0x5c6>
		  {
			  if (faultCounter == 4)
 80013ae:	4b59      	ldr	r3, [pc, #356]	; (8001514 <main+0x6a4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d111      	bne.n	80013da <main+0x56a>
			  {
				  HAL_GPIO_WritePin(FAULT_PIN_PORT, FAULT_OUT_PIN, GPIO_PIN_RESET);
 80013b6:	4b58      	ldr	r3, [pc, #352]	; (8001518 <main+0x6a8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013be:	2200      	movs	r2, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f002 fbfe 	bl	8003bc2 <HAL_GPIO_WritePin>

				  tx1_t.TS_ECU_TempThresholdFault = true;
 80013c6:	4b55      	ldr	r3, [pc, #340]	; (800151c <main+0x6ac>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	725a      	strb	r2, [r3, #9]

				  tx1_t.TS_ECU_FaultOutState = GPIO_PIN_RESET;
 80013cc:	4b53      	ldr	r3, [pc, #332]	; (800151c <main+0x6ac>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	721a      	strb	r2, [r3, #8]

				  faultCounter = 0;
 80013d2:	4b50      	ldr	r3, [pc, #320]	; (8001514 <main+0x6a4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
			  {
				  faultCounter++;
			  }
		  }

		  break;
 80013d8:	e02d      	b.n	8001436 <main+0x5c6>
				  faultCounter++;
 80013da:	4b4e      	ldr	r3, [pc, #312]	; (8001514 <main+0x6a4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	4a4c      	ldr	r2, [pc, #304]	; (8001514 <main+0x6a4>)
 80013e2:	6013      	str	r3, [r2, #0]
		  break;
 80013e4:	e027      	b.n	8001436 <main+0x5c6>
	  case CHARGING_STATE:

		  if ((highestTemp > CHARGE_TEMP_MAX_LIMIT && highestTemp < ERROR_THRESHOLD) || lowestTemp < CHARGE_TEMP_MIN_LIMIT)
 80013e6:	4b49      	ldr	r3, [pc, #292]	; (800150c <main+0x69c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b2d      	cmp	r3, #45	; 0x2d
 80013ec:	dd03      	ble.n	80013f6 <main+0x586>
 80013ee:	4b47      	ldr	r3, [pc, #284]	; (800150c <main+0x69c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b77      	cmp	r3, #119	; 0x77
 80013f4:	dd03      	ble.n	80013fe <main+0x58e>
 80013f6:	4b46      	ldr	r3, [pc, #280]	; (8001510 <main+0x6a0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	da1d      	bge.n	800143a <main+0x5ca>
		  {
			  if (faultCounter == 4)
 80013fe:	4b45      	ldr	r3, [pc, #276]	; (8001514 <main+0x6a4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b04      	cmp	r3, #4
 8001404:	d111      	bne.n	800142a <main+0x5ba>
			  {
				  HAL_GPIO_WritePin(FAULT_PIN_PORT, FAULT_OUT_PIN, GPIO_PIN_RESET);
 8001406:	4b44      	ldr	r3, [pc, #272]	; (8001518 <main+0x6a8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800140e:	2200      	movs	r2, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f002 fbd6 	bl	8003bc2 <HAL_GPIO_WritePin>

				  tx1_t.TS_ECU_TempThresholdFault = true;
 8001416:	4b41      	ldr	r3, [pc, #260]	; (800151c <main+0x6ac>)
 8001418:	2201      	movs	r2, #1
 800141a:	725a      	strb	r2, [r3, #9]

				  tx1_t.TS_ECU_FaultOutState = GPIO_PIN_RESET;
 800141c:	4b3f      	ldr	r3, [pc, #252]	; (800151c <main+0x6ac>)
 800141e:	2200      	movs	r2, #0
 8001420:	721a      	strb	r2, [r3, #8]

				  faultCounter = 0;
 8001422:	4b3c      	ldr	r3, [pc, #240]	; (8001514 <main+0x6a4>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
			  {
				  faultCounter++;
			  }
		  }

		  break;
 8001428:	e007      	b.n	800143a <main+0x5ca>
				  faultCounter++;
 800142a:	4b3a      	ldr	r3, [pc, #232]	; (8001514 <main+0x6a4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	3301      	adds	r3, #1
 8001430:	4a38      	ldr	r2, [pc, #224]	; (8001514 <main+0x6a4>)
 8001432:	6013      	str	r3, [r2, #0]
		  break;
 8001434:	e001      	b.n	800143a <main+0x5ca>
		  break;
 8001436:	bf00      	nop
 8001438:	e000      	b.n	800143c <main+0x5cc>
		  break;
 800143a:	bf00      	nop
	  }

	  // Sync One Response
	  if (syncOneFlag == true)
 800143c:	4b38      	ldr	r3, [pc, #224]	; (8001520 <main+0x6b0>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d139      	bne.n	80014b8 <main+0x648>
	  {
		  tx1_t.TS_ECU_AverageSegmentTemp = TS_ECU1_TX1_TS_ECU_AverageSegmentTemp_toS(averageSegmentTemp);
 8001444:	4b37      	ldr	r3, [pc, #220]	; (8001524 <main+0x6b4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	b29b      	uxth	r3, r3
 800144a:	3328      	adds	r3, #40	; 0x28
 800144c:	b29b      	uxth	r3, r3
 800144e:	b21a      	sxth	r2, r3
 8001450:	4b32      	ldr	r3, [pc, #200]	; (800151c <main+0x6ac>)
 8001452:	809a      	strh	r2, [r3, #4]
		  tx1_t.TS_ECU_MaxSegmentTemperature = TS_ECU1_TX1_TS_ECU_MaxSegmentTemperature_toS(highestTemp);
 8001454:	4b2d      	ldr	r3, [pc, #180]	; (800150c <main+0x69c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	b29b      	uxth	r3, r3
 800145a:	3328      	adds	r3, #40	; 0x28
 800145c:	b29b      	uxth	r3, r3
 800145e:	b21a      	sxth	r2, r3
 8001460:	4b2e      	ldr	r3, [pc, #184]	; (800151c <main+0x6ac>)
 8001462:	801a      	strh	r2, [r3, #0]
		  tx1_t.TS_ECU_MinSegmentTemperature = TS_ECU1_TX1_TS_ECU_MinSegmentTemperature_toS(lowestTemp);
 8001464:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <main+0x6a0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	b29b      	uxth	r3, r3
 800146a:	3328      	adds	r3, #40	; 0x28
 800146c:	b29b      	uxth	r3, r3
 800146e:	b21a      	sxth	r2, r3
 8001470:	4b2a      	ldr	r3, [pc, #168]	; (800151c <main+0x6ac>)
 8001472:	805a      	strh	r2, [r3, #2]
		  tx1_t.TS_ECU_MaxTemperatureCellCount = highestTempCellCount;
 8001474:	4b2c      	ldr	r3, [pc, #176]	; (8001528 <main+0x6b8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b28      	ldr	r3, [pc, #160]	; (800151c <main+0x6ac>)
 800147c:	719a      	strb	r2, [r3, #6]
		  tx1_t.TS_ECU_FaultInState = HAL_GPIO_ReadPin(FAULT_PIN_PORT, FAULT_IN_PIN);
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <main+0x6a8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fb83 	bl	8003b94 <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	4b22      	ldr	r3, [pc, #136]	; (800151c <main+0x6ac>)
 8001494:	71da      	strb	r2, [r3, #7]

		  if (ecuState == DISCHARGE_STATE)
 8001496:	4b25      	ldr	r3, [pc, #148]	; (800152c <main+0x6bc>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d103      	bne.n	80014a6 <main+0x636>
		  {
			  tx1_t.TS_ECU_CurrentState = 0;
 800149e:	4b1f      	ldr	r3, [pc, #124]	; (800151c <main+0x6ac>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	731a      	strb	r2, [r3, #12]
 80014a4:	e002      	b.n	80014ac <main+0x63c>
		  }
		  else
		  {
			  tx1_t.TS_ECU_CurrentState = 1;
 80014a6:	4b1d      	ldr	r3, [pc, #116]	; (800151c <main+0x6ac>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	731a      	strb	r2, [r3, #12]
		  }

		  if (SEGMENT_ID == (0x01U))
		  {
			  TS_ECU1_SendDiagnosticData(&tx1_t);
 80014ac:	481b      	ldr	r0, [pc, #108]	; (800151c <main+0x6ac>)
 80014ae:	f7ff fbb1 	bl	8000c14 <TS_ECU1_SendDiagnosticData>
		  else
		  {
			  TS_ECU4_SendDiagnosticData(&tx1_t);
		  }

		  syncOneFlag = false;
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <main+0x6b0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
	  }

	  // Sync Two Response
	  if (syncTwoFlag == true)
 80014b8:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <main+0x6c0>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d10d      	bne.n	80014dc <main+0x66c>
	  {
		  if (SEGMENT_ID == (0x01U))
		  {
			  if (HAL_GetTick() - syncTwoTime > SYNC_TIME_SHIFT_ECU1)
 80014c0:	f000 fdee 	bl	80020a0 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <main+0x6c4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b05      	cmp	r3, #5
 80014ce:	d905      	bls.n	80014dc <main+0x66c>
			  {
				  TS_ECU1_SendTemperatures(tempArray);
 80014d0:	4819      	ldr	r0, [pc, #100]	; (8001538 <main+0x6c8>)
 80014d2:	f7ff fbd9 	bl	8000c88 <TS_ECU1_SendTemperatures>

				  syncTwoFlag = false;
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <main+0x6c0>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }

	  // Reset Counters
	  highestTemp = DISCHARGE_TEMP_MIN_LIMIT;
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <main+0x69c>)
 80014de:	f06f 0213 	mvn.w	r2, #19
 80014e2:	601a      	str	r2, [r3, #0]
	  lowestTemp = DISCHARGE_TEMP_MAX_LIMIT;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <main+0x6a0>)
 80014e6:	223c      	movs	r2, #60	; 0x3c
 80014e8:	601a      	str	r2, [r3, #0]
	  highestTempCellCount = 0;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <main+0x6b8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
	  cellTempSum = 0;
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <main+0x6cc>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
	  counterCH1 = 0;
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <main+0x6d0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
	  counterCH2 = 12;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <main+0x6d4>)
 80014fe:	220c      	movs	r2, #12
 8001500:	601a      	str	r2, [r3, #0]

	  // Reset Watchdog Counter
	  HAL_IWDG_Refresh(&hiwdg);
 8001502:	4811      	ldr	r0, [pc, #68]	; (8001548 <main+0x6d8>)
 8001504:	f002 fbd0 	bl	8003ca8 <HAL_IWDG_Refresh>
	  if (msgPendingFlag == true)
 8001508:	e4fc      	b.n	8000f04 <main+0x94>
 800150a:	bf00      	nop
 800150c:	20000008 	.word	0x20000008
 8001510:	2000000c 	.word	0x2000000c
 8001514:	20000168 	.word	0x20000168
 8001518:	20000000 	.word	0x20000000
 800151c:	200001a0 	.word	0x200001a0
 8001520:	200001b9 	.word	0x200001b9
 8001524:	20000170 	.word	0x20000170
 8001528:	20000174 	.word	0x20000174
 800152c:	2000009c 	.word	0x2000009c
 8001530:	200001ba 	.word	0x200001ba
 8001534:	200001b4 	.word	0x200001b4
 8001538:	20000104 	.word	0x20000104
 800153c:	2000016c 	.word	0x2000016c
 8001540:	20000164 	.word	0x20000164
 8001544:	20000010 	.word	0x20000010
 8001548:	200000f8 	.word	0x200000f8

0800154c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b094      	sub	sp, #80	; 0x50
 8001550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001552:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001556:	2228      	movs	r2, #40	; 0x28
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f003 f91c 	bl	8004798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800157c:	2309      	movs	r3, #9
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001586:	2300      	movs	r3, #0
 8001588:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800158a:	2301      	movs	r3, #1
 800158c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800158e:	2301      	movs	r3, #1
 8001590:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001592:	2302      	movs	r3, #2
 8001594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800159a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800159c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a6:	4618      	mov	r0, r3
 80015a8:	f002 fb8e 	bl	8003cc8 <HAL_RCC_OscConfig>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80015b2:	f000 fb39 	bl	8001c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b6:	230f      	movs	r3, #15
 80015b8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ba:	2302      	movs	r3, #2
 80015bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2102      	movs	r1, #2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 fdfa 	bl	80041cc <HAL_RCC_ClockConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015de:	f000 fb23 	bl	8001c28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015e2:	2302      	movs	r3, #2
 80015e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80015e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015ea:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	4618      	mov	r0, r3
 80015f0:	f002 ff66 	bl	80044c0 <HAL_RCCEx_PeriphCLKConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80015fa:	f000 fb15 	bl	8001c28 <Error_Handler>
  }
}
 80015fe:	bf00      	nop
 8001600:	3750      	adds	r7, #80	; 0x50
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001618:	4b20      	ldr	r3, [pc, #128]	; (800169c <MX_ADC1_Init+0x94>)
 800161a:	4a21      	ldr	r2, [pc, #132]	; (80016a0 <MX_ADC1_Init+0x98>)
 800161c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800161e:	4b1f      	ldr	r3, [pc, #124]	; (800169c <MX_ADC1_Init+0x94>)
 8001620:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001624:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <MX_ADC1_Init+0x94>)
 8001628:	2200      	movs	r2, #0
 800162a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <MX_ADC1_Init+0x94>)
 800162e:	2200      	movs	r2, #0
 8001630:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <MX_ADC1_Init+0x94>)
 8001634:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001638:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <MX_ADC1_Init+0x94>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <MX_ADC1_Init+0x94>)
 8001642:	2201      	movs	r2, #1
 8001644:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001646:	4815      	ldr	r0, [pc, #84]	; (800169c <MX_ADC1_Init+0x94>)
 8001648:	f000 fd58 	bl	80020fc <HAL_ADC_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001652:	f000 fae9 	bl	8001c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001656:	2301      	movs	r3, #1
 8001658:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800165a:	2301      	movs	r3, #1
 800165c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800165e:	2305      	movs	r3, #5
 8001660:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	4619      	mov	r1, r3
 8001666:	480d      	ldr	r0, [pc, #52]	; (800169c <MX_ADC1_Init+0x94>)
 8001668:	f001 f80c 	bl	8002684 <HAL_ADC_ConfigChannel>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001672:	f000 fad9 	bl	8001c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001676:	2302      	movs	r3, #2
 8001678:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800167a:	2302      	movs	r3, #2
 800167c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	4619      	mov	r1, r3
 8001682:	4806      	ldr	r0, [pc, #24]	; (800169c <MX_ADC1_Init+0x94>)
 8001684:	f000 fffe 	bl	8002684 <HAL_ADC_ConfigChannel>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800168e:	f000 facb 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200000a0 	.word	0x200000a0
 80016a0:	40012400 	.word	0x40012400

080016a4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <MX_CAN_Init+0x64>)
 80016aa:	4a18      	ldr	r2, [pc, #96]	; (800170c <MX_CAN_Init+0x68>)
 80016ac:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80016ae:	4b16      	ldr	r3, [pc, #88]	; (8001708 <MX_CAN_Init+0x64>)
 80016b0:	2204      	movs	r2, #4
 80016b2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80016b4:	4b14      	ldr	r3, [pc, #80]	; (8001708 <MX_CAN_Init+0x64>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <MX_CAN_Init+0x64>)
 80016bc:	2200      	movs	r2, #0
 80016be:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_CAN_Init+0x64>)
 80016c2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80016c6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <MX_CAN_Init+0x64>)
 80016ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016ce:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <MX_CAN_Init+0x64>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_CAN_Init+0x64>)
 80016d8:	2200      	movs	r2, #0
 80016da:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <MX_CAN_Init+0x64>)
 80016de:	2200      	movs	r2, #0
 80016e0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_CAN_Init+0x64>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <MX_CAN_Init+0x64>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_CAN_Init+0x64>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80016f4:	4804      	ldr	r0, [pc, #16]	; (8001708 <MX_CAN_Init+0x64>)
 80016f6:	f001 f958 	bl	80029aa <HAL_CAN_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001700:	f000 fa92 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200000d0 	.word	0x200000d0
 800170c:	40006400 	.word	0x40006400

08001710 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <MX_IWDG_Init+0x2c>)
 8001716:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <MX_IWDG_Init+0x30>)
 8001718:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <MX_IWDG_Init+0x2c>)
 800171c:	2200      	movs	r2, #0
 800171e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 300;
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <MX_IWDG_Init+0x2c>)
 8001722:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001726:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001728:	4804      	ldr	r0, [pc, #16]	; (800173c <MX_IWDG_Init+0x2c>)
 800172a:	f002 fa7b 	bl	8003c24 <HAL_IWDG_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001734:	f000 fa78 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200000f8 	.word	0x200000f8
 8001740:	40003000 	.word	0x40003000

08001744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174a:	f107 0310 	add.w	r3, r7, #16
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001758:	4b42      	ldr	r3, [pc, #264]	; (8001864 <MX_GPIO_Init+0x120>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a41      	ldr	r2, [pc, #260]	; (8001864 <MX_GPIO_Init+0x120>)
 800175e:	f043 0310 	orr.w	r3, r3, #16
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <MX_GPIO_Init+0x120>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0310 	and.w	r3, r3, #16
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001770:	4b3c      	ldr	r3, [pc, #240]	; (8001864 <MX_GPIO_Init+0x120>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a3b      	ldr	r2, [pc, #236]	; (8001864 <MX_GPIO_Init+0x120>)
 8001776:	f043 0320 	orr.w	r3, r3, #32
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b39      	ldr	r3, [pc, #228]	; (8001864 <MX_GPIO_Init+0x120>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0320 	and.w	r3, r3, #32
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001788:	4b36      	ldr	r3, [pc, #216]	; (8001864 <MX_GPIO_Init+0x120>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4a35      	ldr	r2, [pc, #212]	; (8001864 <MX_GPIO_Init+0x120>)
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	6193      	str	r3, [r2, #24]
 8001794:	4b33      	ldr	r3, [pc, #204]	; (8001864 <MX_GPIO_Init+0x120>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a0:	4b30      	ldr	r3, [pc, #192]	; (8001864 <MX_GPIO_Init+0x120>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	4a2f      	ldr	r2, [pc, #188]	; (8001864 <MX_GPIO_Init+0x120>)
 80017a6:	f043 0308 	orr.w	r3, r3, #8
 80017aa:	6193      	str	r3, [r2, #24]
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <MX_GPIO_Init+0x120>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80017b8:	2201      	movs	r2, #1
 80017ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017be:	482a      	ldr	r0, [pc, #168]	; (8001868 <MX_GPIO_Init+0x124>)
 80017c0:	f002 f9ff 	bl	8003bc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2178      	movs	r1, #120	; 0x78
 80017c8:	4828      	ldr	r0, [pc, #160]	; (800186c <MX_GPIO_Init+0x128>)
 80017ca:	f002 f9fa 	bl	8003bc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d4:	4826      	ldr	r0, [pc, #152]	; (8001870 <MX_GPIO_Init+0x12c>)
 80017d6:	f002 f9f4 	bl	8003bc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2302      	movs	r3, #2
 80017ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	4619      	mov	r1, r3
 80017f2:	481d      	ldr	r0, [pc, #116]	; (8001868 <MX_GPIO_Init+0x124>)
 80017f4:	f002 f84a 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80017f8:	2378      	movs	r3, #120	; 0x78
 80017fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2302      	movs	r3, #2
 8001806:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	4619      	mov	r1, r3
 800180e:	4817      	ldr	r0, [pc, #92]	; (800186c <MX_GPIO_Init+0x128>)
 8001810:	f002 f83c 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181a:	2301      	movs	r3, #1
 800181c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2302      	movs	r3, #2
 8001824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001826:	f107 0310 	add.w	r3, r7, #16
 800182a:	4619      	mov	r1, r3
 800182c:	4810      	ldr	r0, [pc, #64]	; (8001870 <MX_GPIO_Init+0x12c>)
 800182e:	f002 f82d 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001838:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <MX_GPIO_Init+0x130>)
 800183a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	4619      	mov	r1, r3
 8001846:	480a      	ldr	r0, [pc, #40]	; (8001870 <MX_GPIO_Init+0x12c>)
 8001848:	f002 f820 	bl	800388c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2102      	movs	r1, #2
 8001850:	2017      	movs	r0, #23
 8001852:	f001 ffe4 	bl	800381e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001856:	2017      	movs	r0, #23
 8001858:	f001 fffd 	bl	8003856 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800185c:	bf00      	nop
 800185e:	3720      	adds	r7, #32
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40021000 	.word	0x40021000
 8001868:	40011000 	.word	0x40011000
 800186c:	40010800 	.word	0x40010800
 8001870:	40010c00 	.word	0x40010c00
 8001874:	10110000 	.word	0x10110000

08001878 <getTempCH1>:

/* USER CODE BEGIN 4 */

static int getTempCH1(ADC_HandleTypeDef* hadc)
{
 8001878:	b5b0      	push	{r4, r5, r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	uint32_t adcVal = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
	float voltage = 0.0;
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
	int temp = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
	ADC_ChannelConfTypeDef sConfig = {0};
 800188e:	f107 0308 	add.w	r3, r7, #8
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_1;
 800189a:	2301      	movs	r3, #1
 800189c:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800189e:	2301      	movs	r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80018a2:	2305      	movs	r3, #5
 80018a4:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	4619      	mov	r1, r3
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 fee9 	bl	8002684 <HAL_ADC_ConfigChannel>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <getTempCH1+0x44>
	{
		Error_Handler();
 80018b8:	f000 f9b6 	bl	8001c28 <Error_Handler>
	}

	HAL_ADC_Start(hadc);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 fcf5 	bl	80022ac <HAL_ADC_Start>

	HAL_ADC_PollForConversion(hadc, 1);
 80018c2:	2101      	movs	r1, #1
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 fdcb 	bl	8002460 <HAL_ADC_PollForConversion>

	adcVal = HAL_ADC_GetValue(hadc);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 fece 	bl	800266c <HAL_ADC_GetValue>
 80018d0:	61f8      	str	r0, [r7, #28]

	HAL_ADC_Stop(hadc);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 fd98 	bl	8002408 <HAL_ADC_Stop>

	adcVal += 105;
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	3369      	adds	r3, #105	; 0x69
 80018dc:	61fb      	str	r3, [r7, #28]

	voltage = ((adcVal * 3.3) / 4096);
 80018de:	69f8      	ldr	r0, [r7, #28]
 80018e0:	f7fe fd78 	bl	80003d4 <__aeabi_ui2d>
 80018e4:	a348      	add	r3, pc, #288	; (adr r3, 8001a08 <getTempCH1+0x190>)
 80018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ea:	f7fe fded 	bl	80004c8 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	4b51      	ldr	r3, [pc, #324]	; (8001a40 <getTempCH1+0x1c8>)
 80018fc:	f7fe ff0e 	bl	800071c <__aeabi_ddiv>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff f8b6 	bl	8000a78 <__aeabi_d2f>
 800190c:	4603      	mov	r3, r0
 800190e:	61bb      	str	r3, [r7, #24]

	temp = (int)(18212.8 - (47967.26*voltage) + (50732.41*pow(voltage, 2)) - (26799.56*pow(voltage, 3)) + (7056.825*pow(voltage, 4))
 8001910:	69b8      	ldr	r0, [r7, #24]
 8001912:	f7fe fd81 	bl	8000418 <__aeabi_f2d>
 8001916:	a33e      	add	r3, pc, #248	; (adr r3, 8001a10 <getTempCH1+0x198>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	f7fe fdd4 	bl	80004c8 <__aeabi_dmul>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	a13c      	add	r1, pc, #240	; (adr r1, 8001a18 <getTempCH1+0x1a0>)
 8001926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800192a:	f7fe fc15 	bl	8000158 <__aeabi_dsub>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4614      	mov	r4, r2
 8001934:	461d      	mov	r5, r3
 8001936:	69b8      	ldr	r0, [r7, #24]
 8001938:	f7fe fd6e 	bl	8000418 <__aeabi_f2d>
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001944:	f002 ff5a 	bl	80047fc <pow>
 8001948:	a335      	add	r3, pc, #212	; (adr r3, 8001a20 <getTempCH1+0x1a8>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	f7fe fdbb 	bl	80004c8 <__aeabi_dmul>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4620      	mov	r0, r4
 8001958:	4629      	mov	r1, r5
 800195a:	f7fe fbff 	bl	800015c <__adddf3>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4614      	mov	r4, r2
 8001964:	461d      	mov	r5, r3
 8001966:	69b8      	ldr	r0, [r7, #24]
 8001968:	f7fe fd56 	bl	8000418 <__aeabi_f2d>
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	4b34      	ldr	r3, [pc, #208]	; (8001a44 <getTempCH1+0x1cc>)
 8001972:	f002 ff43 	bl	80047fc <pow>
 8001976:	a32c      	add	r3, pc, #176	; (adr r3, 8001a28 <getTempCH1+0x1b0>)
 8001978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197c:	f7fe fda4 	bl	80004c8 <__aeabi_dmul>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4620      	mov	r0, r4
 8001986:	4629      	mov	r1, r5
 8001988:	f7fe fbe6 	bl	8000158 <__aeabi_dsub>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4614      	mov	r4, r2
 8001992:	461d      	mov	r5, r3
 8001994:	69b8      	ldr	r0, [r7, #24]
 8001996:	f7fe fd3f 	bl	8000418 <__aeabi_f2d>
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <getTempCH1+0x1d0>)
 80019a0:	f002 ff2c 	bl	80047fc <pow>
 80019a4:	a322      	add	r3, pc, #136	; (adr r3, 8001a30 <getTempCH1+0x1b8>)
 80019a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019aa:	f7fe fd8d 	bl	80004c8 <__aeabi_dmul>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4620      	mov	r0, r4
 80019b4:	4629      	mov	r1, r5
 80019b6:	f7fe fbd1 	bl	800015c <__adddf3>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4614      	mov	r4, r2
 80019c0:	461d      	mov	r5, r3
		      - (740.8519*pow(voltage, 5)));
 80019c2:	69b8      	ldr	r0, [r7, #24]
 80019c4:	f7fe fd28 	bl	8000418 <__aeabi_f2d>
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <getTempCH1+0x1d4>)
 80019ce:	f002 ff15 	bl	80047fc <pow>
 80019d2:	a319      	add	r3, pc, #100	; (adr r3, 8001a38 <getTempCH1+0x1c0>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	f7fe fd76 	bl	80004c8 <__aeabi_dmul>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4620      	mov	r0, r4
 80019e2:	4629      	mov	r1, r5
 80019e4:	f7fe fbb8 	bl	8000158 <__aeabi_dsub>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
	temp = (int)(18212.8 - (47967.26*voltage) + (50732.41*pow(voltage, 2)) - (26799.56*pow(voltage, 3)) + (7056.825*pow(voltage, 4))
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	f7ff f81a 	bl	8000a28 <__aeabi_d2iz>
 80019f4:	4603      	mov	r3, r0
 80019f6:	617b      	str	r3, [r7, #20]

	return temp;
 80019f8:	697b      	ldr	r3, [r7, #20]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3720      	adds	r7, #32
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bdb0      	pop	{r4, r5, r7, pc}
 8001a02:	bf00      	nop
 8001a04:	f3af 8000 	nop.w
 8001a08:	66666666 	.word	0x66666666
 8001a0c:	400a6666 	.word	0x400a6666
 8001a10:	51eb851f 	.word	0x51eb851f
 8001a14:	40e76be8 	.word	0x40e76be8
 8001a18:	33333333 	.word	0x33333333
 8001a1c:	40d1c933 	.word	0x40d1c933
 8001a20:	1eb851ec 	.word	0x1eb851ec
 8001a24:	40e8c58d 	.word	0x40e8c58d
 8001a28:	d70a3d71 	.word	0xd70a3d71
 8001a2c:	40da2be3 	.word	0x40da2be3
 8001a30:	33333333 	.word	0x33333333
 8001a34:	40bb90d3 	.word	0x40bb90d3
 8001a38:	b0f27bb3 	.word	0xb0f27bb3
 8001a3c:	408726d0 	.word	0x408726d0
 8001a40:	40b00000 	.word	0x40b00000
 8001a44:	40080000 	.word	0x40080000
 8001a48:	40100000 	.word	0x40100000
 8001a4c:	40140000 	.word	0x40140000

08001a50 <getTempCH2>:

static int getTempCH2(ADC_HandleTypeDef* hadc)
{
 8001a50:	b5b0      	push	{r4, r5, r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	uint32_t adcVal = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61fb      	str	r3, [r7, #28]
	float voltage = 0.0;
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
	int temp = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001a66:	f107 0308 	add.w	r3, r7, #8
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_2;
 8001a72:	2302      	movs	r3, #2
 8001a74:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a76:	2301      	movs	r3, #1
 8001a78:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001a7a:	2305      	movs	r3, #5
 8001a7c:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8001a7e:	f107 0308 	add.w	r3, r7, #8
 8001a82:	4619      	mov	r1, r3
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 fdfd 	bl	8002684 <HAL_ADC_ConfigChannel>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <getTempCH2+0x44>
	{
		Error_Handler();
 8001a90:	f000 f8ca 	bl	8001c28 <Error_Handler>
	}

	HAL_ADC_Start(hadc);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 fc09 	bl	80022ac <HAL_ADC_Start>

	HAL_ADC_PollForConversion(hadc, 1);
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 fcdf 	bl	8002460 <HAL_ADC_PollForConversion>

	adcVal = HAL_ADC_GetValue(hadc);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 fde2 	bl	800266c <HAL_ADC_GetValue>
 8001aa8:	61f8      	str	r0, [r7, #28]

	HAL_ADC_Stop(hadc);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 fcac 	bl	8002408 <HAL_ADC_Stop>

	adcVal += 105;
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	3369      	adds	r3, #105	; 0x69
 8001ab4:	61fb      	str	r3, [r7, #28]

	voltage = ((adcVal * 3.3) / 4096);
 8001ab6:	69f8      	ldr	r0, [r7, #28]
 8001ab8:	f7fe fc8c 	bl	80003d4 <__aeabi_ui2d>
 8001abc:	a348      	add	r3, pc, #288	; (adr r3, 8001be0 <getTempCH2+0x190>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	f7fe fd01 	bl	80004c8 <__aeabi_dmul>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	4b51      	ldr	r3, [pc, #324]	; (8001c18 <getTempCH2+0x1c8>)
 8001ad4:	f7fe fe22 	bl	800071c <__aeabi_ddiv>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f7fe ffca 	bl	8000a78 <__aeabi_d2f>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	61bb      	str	r3, [r7, #24]

	temp = (int)(18212.8 - (47967.26*voltage) + (50732.41*pow(voltage, 2)) - (26799.56*pow(voltage, 3)) + (7056.825*pow(voltage, 4))
 8001ae8:	69b8      	ldr	r0, [r7, #24]
 8001aea:	f7fe fc95 	bl	8000418 <__aeabi_f2d>
 8001aee:	a33e      	add	r3, pc, #248	; (adr r3, 8001be8 <getTempCH2+0x198>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fce8 	bl	80004c8 <__aeabi_dmul>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	a13c      	add	r1, pc, #240	; (adr r1, 8001bf0 <getTempCH2+0x1a0>)
 8001afe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b02:	f7fe fb29 	bl	8000158 <__aeabi_dsub>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4614      	mov	r4, r2
 8001b0c:	461d      	mov	r5, r3
 8001b0e:	69b8      	ldr	r0, [r7, #24]
 8001b10:	f7fe fc82 	bl	8000418 <__aeabi_f2d>
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b1c:	f002 fe6e 	bl	80047fc <pow>
 8001b20:	a335      	add	r3, pc, #212	; (adr r3, 8001bf8 <getTempCH2+0x1a8>)
 8001b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b26:	f7fe fccf 	bl	80004c8 <__aeabi_dmul>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4620      	mov	r0, r4
 8001b30:	4629      	mov	r1, r5
 8001b32:	f7fe fb13 	bl	800015c <__adddf3>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4614      	mov	r4, r2
 8001b3c:	461d      	mov	r5, r3
 8001b3e:	69b8      	ldr	r0, [r7, #24]
 8001b40:	f7fe fc6a 	bl	8000418 <__aeabi_f2d>
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	4b34      	ldr	r3, [pc, #208]	; (8001c1c <getTempCH2+0x1cc>)
 8001b4a:	f002 fe57 	bl	80047fc <pow>
 8001b4e:	a32c      	add	r3, pc, #176	; (adr r3, 8001c00 <getTempCH2+0x1b0>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe fcb8 	bl	80004c8 <__aeabi_dmul>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	4629      	mov	r1, r5
 8001b60:	f7fe fafa 	bl	8000158 <__aeabi_dsub>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4614      	mov	r4, r2
 8001b6a:	461d      	mov	r5, r3
 8001b6c:	69b8      	ldr	r0, [r7, #24]
 8001b6e:	f7fe fc53 	bl	8000418 <__aeabi_f2d>
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <getTempCH2+0x1d0>)
 8001b78:	f002 fe40 	bl	80047fc <pow>
 8001b7c:	a322      	add	r3, pc, #136	; (adr r3, 8001c08 <getTempCH2+0x1b8>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	f7fe fca1 	bl	80004c8 <__aeabi_dmul>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	f7fe fae5 	bl	800015c <__adddf3>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4614      	mov	r4, r2
 8001b98:	461d      	mov	r5, r3
	        - (740.8519*pow(voltage, 5)));
 8001b9a:	69b8      	ldr	r0, [r7, #24]
 8001b9c:	f7fe fc3c 	bl	8000418 <__aeabi_f2d>
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <getTempCH2+0x1d4>)
 8001ba6:	f002 fe29 	bl	80047fc <pow>
 8001baa:	a319      	add	r3, pc, #100	; (adr r3, 8001c10 <getTempCH2+0x1c0>)
 8001bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb0:	f7fe fc8a 	bl	80004c8 <__aeabi_dmul>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4620      	mov	r0, r4
 8001bba:	4629      	mov	r1, r5
 8001bbc:	f7fe facc 	bl	8000158 <__aeabi_dsub>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
	temp = (int)(18212.8 - (47967.26*voltage) + (50732.41*pow(voltage, 2)) - (26799.56*pow(voltage, 3)) + (7056.825*pow(voltage, 4))
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f7fe ff2e 	bl	8000a28 <__aeabi_d2iz>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	617b      	str	r3, [r7, #20]

	return temp;
 8001bd0:	697b      	ldr	r3, [r7, #20]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3720      	adds	r7, #32
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	f3af 8000 	nop.w
 8001be0:	66666666 	.word	0x66666666
 8001be4:	400a6666 	.word	0x400a6666
 8001be8:	51eb851f 	.word	0x51eb851f
 8001bec:	40e76be8 	.word	0x40e76be8
 8001bf0:	33333333 	.word	0x33333333
 8001bf4:	40d1c933 	.word	0x40d1c933
 8001bf8:	1eb851ec 	.word	0x1eb851ec
 8001bfc:	40e8c58d 	.word	0x40e8c58d
 8001c00:	d70a3d71 	.word	0xd70a3d71
 8001c04:	40da2be3 	.word	0x40da2be3
 8001c08:	33333333 	.word	0x33333333
 8001c0c:	40bb90d3 	.word	0x40bb90d3
 8001c10:	b0f27bb3 	.word	0xb0f27bb3
 8001c14:	408726d0 	.word	0x408726d0
 8001c18:	40b00000 	.word	0x40b00000
 8001c1c:	40080000 	.word	0x40080000
 8001c20:	40100000 	.word	0x40100000
 8001c24:	40140000 	.word	0x40140000

08001c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c2c:	b672      	cpsid	i
}
 8001c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <Error_Handler+0x8>
	...

08001c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <HAL_MspInit+0x5c>)
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	4a14      	ldr	r2, [pc, #80]	; (8001c90 <HAL_MspInit+0x5c>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6193      	str	r3, [r2, #24]
 8001c46:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_MspInit+0x5c>)
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <HAL_MspInit+0x5c>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <HAL_MspInit+0x5c>)
 8001c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	61d3      	str	r3, [r2, #28]
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <HAL_MspInit+0x5c>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_MspInit+0x60>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <HAL_MspInit+0x60>)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40010000 	.word	0x40010000

08001c98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 0310 	add.w	r3, r7, #16
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <HAL_ADC_MspInit+0x6c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d121      	bne.n	8001cfc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cb8:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <HAL_ADC_MspInit+0x70>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <HAL_ADC_MspInit+0x70>)
 8001cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc2:	6193      	str	r3, [r2, #24]
 8001cc4:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <HAL_ADC_MspInit+0x70>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_ADC_MspInit+0x70>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <HAL_ADC_MspInit+0x70>)
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	6193      	str	r3, [r2, #24]
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_ADC_MspInit+0x70>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001ce8:	2306      	movs	r3, #6
 8001cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cec:	2303      	movs	r3, #3
 8001cee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf0:	f107 0310 	add.w	r3, r7, #16
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4805      	ldr	r0, [pc, #20]	; (8001d0c <HAL_ADC_MspInit+0x74>)
 8001cf8:	f001 fdc8 	bl	800388c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cfc:	bf00      	nop
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40012400 	.word	0x40012400
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40010800 	.word	0x40010800

08001d10 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a24      	ldr	r2, [pc, #144]	; (8001dbc <HAL_CAN_MspInit+0xac>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d141      	bne.n	8001db4 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d30:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <HAL_CAN_MspInit+0xb0>)
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	4a22      	ldr	r2, [pc, #136]	; (8001dc0 <HAL_CAN_MspInit+0xb0>)
 8001d36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	61d3      	str	r3, [r2, #28]
 8001d3c:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <HAL_CAN_MspInit+0xb0>)
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d48:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <HAL_CAN_MspInit+0xb0>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a1c      	ldr	r2, [pc, #112]	; (8001dc0 <HAL_CAN_MspInit+0xb0>)
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <HAL_CAN_MspInit+0xb0>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	4619      	mov	r1, r3
 8001d74:	4813      	ldr	r0, [pc, #76]	; (8001dc4 <HAL_CAN_MspInit+0xb4>)
 8001d76:	f001 fd89 	bl	800388c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <HAL_CAN_MspInit+0xb4>)
 8001d90:	f001 fd7c 	bl	800388c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2101      	movs	r1, #1
 8001d98:	2014      	movs	r0, #20
 8001d9a:	f001 fd40 	bl	800381e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001d9e:	2014      	movs	r0, #20
 8001da0:	f001 fd59 	bl	8003856 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2100      	movs	r1, #0
 8001da8:	2015      	movs	r0, #21
 8001daa:	f001 fd38 	bl	800381e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001dae:	2015      	movs	r0, #21
 8001db0:	f001 fd51 	bl	8003856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001db4:	bf00      	nop
 8001db6:	3720      	adds	r7, #32
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40006400 	.word	0x40006400
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40010800 	.word	0x40010800

08001dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dcc:	e7fe      	b.n	8001dcc <NMI_Handler+0x4>

08001dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <HardFault_Handler+0x4>

08001dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <MemManage_Handler+0x4>

08001dda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <BusFault_Handler+0x4>

08001de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <UsageFault_Handler+0x4>

08001de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr

08001dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e0e:	f000 f935 	bl	800207c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001e1e:	f001 fa04 	bl	800322a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200000d0 	.word	0x200000d0

08001e2c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <CAN1_RX1_IRQHandler+0x10>)
 8001e32:	f001 f9fa 	bl	800322a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200000d0 	.word	0x200000d0

08001e40 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001e44:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e48:	f001 fed4 	bl	8003bf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <Unpack_TS_ECU_ChargingStateTrigger_Temp>:

#include "temp.h"

// --------------------------------------------------------------------------
uint32_t Unpack_TS_ECU_ChargingStateTrigger_Temp(TS_ECU_ChargingStateTrigger_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	4613      	mov	r3, r2
 8001e68:	71fb      	strb	r3, [r7, #7]
  _m->Orion_2_ChargePowerState = (_d[0] & (0x01U));
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	701a      	strb	r2, [r3, #0]
  _m->Orion_2_ChargeSafetyState = ((_d[0] >> 1) & (0x01U));
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	085b      	lsrs	r3, r3, #1
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	705a      	strb	r2, [r3, #1]
  return TS_ECU_ChargingStateTrigger_CANID;
 8001e8a:	f240 23ba 	movw	r3, #698	; 0x2ba
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <Pack_TS_ECU1_TX1_Temp>:
  _m->TS_ECU_CurrentState = ((_d[4] >> 5) & (0x07U));
  return TS_ECU1_TX1_CANID;
}

uint32_t Pack_TS_ECU1_TX1_Temp(const TS_ECU1_TX1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0; i < TS_ECU1_TX1_DLC; _d[i++] = 0);
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	75fb      	strb	r3, [r7, #23]
 8001eaa:	e007      	b.n	8001ebc <Pack_TS_ECU1_TX1_Temp+0x24>
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	75fa      	strb	r2, [r7, #23]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
 8001ebc:	7dfb      	ldrb	r3, [r7, #23]
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d9f4      	bls.n	8001eac <Pack_TS_ECU1_TX1_Temp+0x14>

  _d[0] |= (_m->TS_ECU_MaxSegmentTemperature & (0xFFU));
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	781a      	ldrb	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	701a      	strb	r2, [r3, #0]
  _d[1] |= (_m->TS_ECU_MinSegmentTemperature & (0xFFU));
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	7819      	ldrb	r1, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]
  _d[2] |= (_m->TS_ECU_AverageSegmentTemp & (0xFFU));
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	7819      	ldrb	r1, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	3302      	adds	r3, #2
 8001f00:	430a      	orrs	r2, r1
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	701a      	strb	r2, [r3, #0]
  _d[3] |= (_m->TS_ECU_MaxTemperatureCellCount & (0xFFU));
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	3303      	adds	r3, #3
 8001f0a:	7819      	ldrb	r1, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	799a      	ldrb	r2, [r3, #6]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	3303      	adds	r3, #3
 8001f14:	430a      	orrs	r2, r1
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	701a      	strb	r2, [r3, #0]
  _d[4] |= (_m->TS_ECU_FaultInState & (0x01U)) | ((_m->TS_ECU_FaultOutState & (0x01U)) << 1) | ((_m->TS_ECU_TempThresholdFault & (0x01U)) << 2) | ((_m->TS_ECU_OpenCircuitFault & (0x01U)) << 3) | ((_m->FAN_ECU_ShortToGroundFault & (0x01U)) << 4) | ((_m->TS_ECU_CurrentState & (0x07U)) << 5);
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	7819      	ldrb	r1, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	79db      	ldrb	r3, [r3, #7]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	7a1b      	ldrb	r3, [r3, #8]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	7a5b      	ldrb	r3, [r3, #9]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	7a9b      	ldrb	r3, [r3, #10]
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	7adb      	ldrb	r3, [r3, #11]
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f003 0310 	and.w	r3, r3, #16
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	7b1b      	ldrb	r3, [r3, #12]
 8001f76:	015b      	lsls	r3, r3, #5
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	3304      	adds	r3, #4
 8001f82:	430a      	orrs	r2, r1
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	701a      	strb	r2, [r3, #0]
  *_len = 5; *_ide = 0;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2205      	movs	r2, #5
 8001f8c:	701a      	strb	r2, [r3, #0]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]
  return TS_ECU1_TX1_CANID;
 8001f94:	f240 3311 	movw	r3, #785	; 0x311
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	371c      	adds	r7, #28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
	...

08001fa4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fa4:	f7ff ff54 	bl	8001e50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa8:	480b      	ldr	r0, [pc, #44]	; (8001fd8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001faa:	490c      	ldr	r1, [pc, #48]	; (8001fdc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fac:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb0:	e002      	b.n	8001fb8 <LoopCopyDataInit>

08001fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb6:	3304      	adds	r3, #4

08001fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fbc:	d3f9      	bcc.n	8001fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fbe:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fc0:	4c09      	ldr	r4, [pc, #36]	; (8001fe8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc4:	e001      	b.n	8001fca <LoopFillZerobss>

08001fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc8:	3204      	adds	r2, #4

08001fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fcc:	d3fb      	bcc.n	8001fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fce:	f002 fbf1 	bl	80047b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fd2:	f7fe ff4d 	bl	8000e70 <main>
  bx lr
 8001fd6:	4770      	bx	lr
  ldr r0, =_sdata
 8001fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fdc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001fe0:	080056a0 	.word	0x080056a0
  ldr r2, =_sbss
 8001fe4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001fe8:	200002f8 	.word	0x200002f8

08001fec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fec:	e7fe      	b.n	8001fec <ADC1_2_IRQHandler>
	...

08001ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <HAL_Init+0x28>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a07      	ldr	r2, [pc, #28]	; (8002018 <HAL_Init+0x28>)
 8001ffa:	f043 0310 	orr.w	r3, r3, #16
 8001ffe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002000:	2003      	movs	r0, #3
 8002002:	f001 fc01 	bl	8003808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002006:	200f      	movs	r0, #15
 8002008:	f000 f808 	bl	800201c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800200c:	f7ff fe12 	bl	8001c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40022000 	.word	0x40022000

0800201c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_InitTick+0x54>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_InitTick+0x58>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	4619      	mov	r1, r3
 800202e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002032:	fbb3 f3f1 	udiv	r3, r3, r1
 8002036:	fbb2 f3f3 	udiv	r3, r2, r3
 800203a:	4618      	mov	r0, r3
 800203c:	f001 fc19 	bl	8003872 <HAL_SYSTICK_Config>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e00e      	b.n	8002068 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b0f      	cmp	r3, #15
 800204e:	d80a      	bhi.n	8002066 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002050:	2200      	movs	r2, #0
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	f04f 30ff 	mov.w	r0, #4294967295
 8002058:	f001 fbe1 	bl	800381e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800205c:	4a06      	ldr	r2, [pc, #24]	; (8002078 <HAL_InitTick+0x5c>)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	e000      	b.n	8002068 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000014 	.word	0x20000014
 8002074:	2000001c 	.word	0x2000001c
 8002078:	20000018 	.word	0x20000018

0800207c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_IncTick+0x1c>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_IncTick+0x20>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4413      	add	r3, r2
 800208c:	4a03      	ldr	r2, [pc, #12]	; (800209c <HAL_IncTick+0x20>)
 800208e:	6013      	str	r3, [r2, #0]
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	2000001c 	.word	0x2000001c
 800209c:	200001bc 	.word	0x200001bc

080020a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return uwTick;
 80020a4:	4b02      	ldr	r3, [pc, #8]	; (80020b0 <HAL_GetTick+0x10>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	200001bc 	.word	0x200001bc

080020b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020bc:	f7ff fff0 	bl	80020a0 <HAL_GetTick>
 80020c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d005      	beq.n	80020da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_Delay+0x44>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4413      	add	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020da:	bf00      	nop
 80020dc:	f7ff ffe0 	bl	80020a0 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d8f7      	bhi.n	80020dc <HAL_Delay+0x28>
  {
  }
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000001c 	.word	0x2000001c

080020fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e0be      	b.n	800229c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002128:	2b00      	cmp	r3, #0
 800212a:	d109      	bne.n	8002140 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fdac 	bl	8001c98 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 fbf1 	bl	8002928 <ADC_ConversionStop_Disable>
 8002146:	4603      	mov	r3, r0
 8002148:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b00      	cmp	r3, #0
 8002154:	f040 8099 	bne.w	800228a <HAL_ADC_Init+0x18e>
 8002158:	7dfb      	ldrb	r3, [r7, #23]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f040 8095 	bne.w	800228a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002164:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002168:	f023 0302 	bic.w	r3, r3, #2
 800216c:	f043 0202 	orr.w	r2, r3, #2
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800217c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	7b1b      	ldrb	r3, [r3, #12]
 8002182:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002184:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	4313      	orrs	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002194:	d003      	beq.n	800219e <HAL_ADC_Init+0xa2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d102      	bne.n	80021a4 <HAL_ADC_Init+0xa8>
 800219e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021a2:	e000      	b.n	80021a6 <HAL_ADC_Init+0xaa>
 80021a4:	2300      	movs	r3, #0
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7d1b      	ldrb	r3, [r3, #20]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d119      	bne.n	80021e8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	7b1b      	ldrb	r3, [r3, #12]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d109      	bne.n	80021d0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	035a      	lsls	r2, r3, #13
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	e00b      	b.n	80021e8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	f043 0220 	orr.w	r2, r3, #32
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	f043 0201 	orr.w	r2, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	4b28      	ldr	r3, [pc, #160]	; (80022a4 <HAL_ADC_Init+0x1a8>)
 8002204:	4013      	ands	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	430b      	orrs	r3, r1
 800220e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002218:	d003      	beq.n	8002222 <HAL_ADC_Init+0x126>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d104      	bne.n	800222c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	3b01      	subs	r3, #1
 8002228:	051b      	lsls	r3, r3, #20
 800222a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002232:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	430a      	orrs	r2, r1
 800223e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <HAL_ADC_Init+0x1ac>)
 8002248:	4013      	ands	r3, r2
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	429a      	cmp	r2, r3
 800224e:	d10b      	bne.n	8002268 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	f023 0303 	bic.w	r3, r3, #3
 800225e:	f043 0201 	orr.w	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002266:	e018      	b.n	800229a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226c:	f023 0312 	bic.w	r3, r3, #18
 8002270:	f043 0210 	orr.w	r2, r3, #16
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227c:	f043 0201 	orr.w	r2, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002288:	e007      	b.n	800229a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228e:	f043 0210 	orr.w	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800229a:	7dfb      	ldrb	r3, [r7, #23]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	ffe1f7fd 	.word	0xffe1f7fd
 80022a8:	ff1f0efe 	.word	0xff1f0efe

080022ac <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_ADC_Start+0x1a>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e098      	b.n	80023f8 <HAL_ADC_Start+0x14c>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 fad0 	bl	8002874 <ADC_Enable>
 80022d4:	4603      	mov	r3, r0
 80022d6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f040 8087 	bne.w	80023ee <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a41      	ldr	r2, [pc, #260]	; (8002400 <HAL_ADC_Start+0x154>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d105      	bne.n	800230a <HAL_ADC_Start+0x5e>
 80022fe:	4b41      	ldr	r3, [pc, #260]	; (8002404 <HAL_ADC_Start+0x158>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d115      	bne.n	8002336 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002320:	2b00      	cmp	r3, #0
 8002322:	d026      	beq.n	8002372 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002328:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800232c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002334:	e01d      	b.n	8002372 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a2f      	ldr	r2, [pc, #188]	; (8002404 <HAL_ADC_Start+0x158>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d004      	beq.n	8002356 <HAL_ADC_Start+0xaa>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a2b      	ldr	r2, [pc, #172]	; (8002400 <HAL_ADC_Start+0x154>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d10d      	bne.n	8002372 <HAL_ADC_Start+0xc6>
 8002356:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <HAL_ADC_Start+0x158>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800236a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d006      	beq.n	800238c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	f023 0206 	bic.w	r2, r3, #6
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	62da      	str	r2, [r3, #44]	; 0x2c
 800238a:	e002      	b.n	8002392 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f06f 0202 	mvn.w	r2, #2
 80023a2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023b2:	d113      	bne.n	80023dc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023b8:	4a11      	ldr	r2, [pc, #68]	; (8002400 <HAL_ADC_Start+0x154>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d105      	bne.n	80023ca <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80023be:	4b11      	ldr	r3, [pc, #68]	; (8002404 <HAL_ADC_Start+0x158>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d108      	bne.n	80023dc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	e00c      	b.n	80023f6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	e003      	b.n	80023f6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40012800 	.word	0x40012800
 8002404:	40012400 	.word	0x40012400

08002408 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_ADC_Stop+0x1a>
 800241e:	2302      	movs	r3, #2
 8002420:	e01a      	b.n	8002458 <HAL_ADC_Stop+0x50>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fa7c 	bl	8002928 <ADC_ConversionStop_Disable>
 8002430:	4603      	mov	r3, r0
 8002432:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002442:	f023 0301 	bic.w	r3, r3, #1
 8002446:	f043 0201 	orr.w	r2, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002456:	7bfb      	ldrb	r3, [r7, #15]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002476:	f7ff fe13 	bl	80020a0 <HAL_GetTick>
 800247a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00b      	beq.n	80024a2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248e:	f043 0220 	orr.w	r2, r3, #32
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e0d3      	b.n	800264a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d131      	bne.n	8002514 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d12a      	bne.n	8002514 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80024be:	e021      	b.n	8002504 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c6:	d01d      	beq.n	8002504 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d007      	beq.n	80024de <HAL_ADC_PollForConversion+0x7e>
 80024ce:	f7ff fde7 	bl	80020a0 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d212      	bcs.n	8002504 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10b      	bne.n	8002504 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f0:	f043 0204 	orr.w	r2, r3, #4
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e0a2      	b.n	800264a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0d6      	beq.n	80024c0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002512:	e070      	b.n	80025f6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002514:	4b4f      	ldr	r3, [pc, #316]	; (8002654 <HAL_ADC_PollForConversion+0x1f4>)
 8002516:	681c      	ldr	r4, [r3, #0]
 8002518:	2002      	movs	r0, #2
 800251a:	f002 f887 	bl	800462c <HAL_RCCEx_GetPeriphCLKFreq>
 800251e:	4603      	mov	r3, r0
 8002520:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6919      	ldr	r1, [r3, #16]
 800252a:	4b4b      	ldr	r3, [pc, #300]	; (8002658 <HAL_ADC_PollForConversion+0x1f8>)
 800252c:	400b      	ands	r3, r1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d118      	bne.n	8002564 <HAL_ADC_PollForConversion+0x104>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68d9      	ldr	r1, [r3, #12]
 8002538:	4b48      	ldr	r3, [pc, #288]	; (800265c <HAL_ADC_PollForConversion+0x1fc>)
 800253a:	400b      	ands	r3, r1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d111      	bne.n	8002564 <HAL_ADC_PollForConversion+0x104>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6919      	ldr	r1, [r3, #16]
 8002546:	4b46      	ldr	r3, [pc, #280]	; (8002660 <HAL_ADC_PollForConversion+0x200>)
 8002548:	400b      	ands	r3, r1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d108      	bne.n	8002560 <HAL_ADC_PollForConversion+0x100>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68d9      	ldr	r1, [r3, #12]
 8002554:	4b43      	ldr	r3, [pc, #268]	; (8002664 <HAL_ADC_PollForConversion+0x204>)
 8002556:	400b      	ands	r3, r1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_ADC_PollForConversion+0x100>
 800255c:	2314      	movs	r3, #20
 800255e:	e020      	b.n	80025a2 <HAL_ADC_PollForConversion+0x142>
 8002560:	2329      	movs	r3, #41	; 0x29
 8002562:	e01e      	b.n	80025a2 <HAL_ADC_PollForConversion+0x142>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6919      	ldr	r1, [r3, #16]
 800256a:	4b3d      	ldr	r3, [pc, #244]	; (8002660 <HAL_ADC_PollForConversion+0x200>)
 800256c:	400b      	ands	r3, r1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <HAL_ADC_PollForConversion+0x120>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68d9      	ldr	r1, [r3, #12]
 8002578:	4b3a      	ldr	r3, [pc, #232]	; (8002664 <HAL_ADC_PollForConversion+0x204>)
 800257a:	400b      	ands	r3, r1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00d      	beq.n	800259c <HAL_ADC_PollForConversion+0x13c>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6919      	ldr	r1, [r3, #16]
 8002586:	4b38      	ldr	r3, [pc, #224]	; (8002668 <HAL_ADC_PollForConversion+0x208>)
 8002588:	400b      	ands	r3, r1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d108      	bne.n	80025a0 <HAL_ADC_PollForConversion+0x140>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68d9      	ldr	r1, [r3, #12]
 8002594:	4b34      	ldr	r3, [pc, #208]	; (8002668 <HAL_ADC_PollForConversion+0x208>)
 8002596:	400b      	ands	r3, r1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_ADC_PollForConversion+0x140>
 800259c:	2354      	movs	r3, #84	; 0x54
 800259e:	e000      	b.n	80025a2 <HAL_ADC_PollForConversion+0x142>
 80025a0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80025a2:	fb02 f303 	mul.w	r3, r2, r3
 80025a6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80025a8:	e021      	b.n	80025ee <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d01a      	beq.n	80025e8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d007      	beq.n	80025c8 <HAL_ADC_PollForConversion+0x168>
 80025b8:	f7ff fd72 	bl	80020a0 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d20f      	bcs.n	80025e8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d90b      	bls.n	80025e8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	f043 0204 	orr.w	r2, r3, #4
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e030      	b.n	800264a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3301      	adds	r3, #1
 80025ec:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d8d9      	bhi.n	80025aa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f06f 0212 	mvn.w	r2, #18
 80025fe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002604:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002616:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800261a:	d115      	bne.n	8002648 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002620:	2b00      	cmp	r3, #0
 8002622:	d111      	bne.n	8002648 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d105      	bne.n	8002648 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	f043 0201 	orr.w	r2, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	371c      	adds	r7, #28
 800264e:	46bd      	mov	sp, r7
 8002650:	bd90      	pop	{r4, r7, pc}
 8002652:	bf00      	nop
 8002654:	20000014 	.word	0x20000014
 8002658:	24924924 	.word	0x24924924
 800265c:	00924924 	.word	0x00924924
 8002660:	12492492 	.word	0x12492492
 8002664:	00492492 	.word	0x00492492
 8002668:	00249249 	.word	0x00249249

0800266c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800267a:	4618      	mov	r0, r3
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x20>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e0dc      	b.n	800285e <HAL_ADC_ConfigChannel+0x1da>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b06      	cmp	r3, #6
 80026b2:	d81c      	bhi.n	80026ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	3b05      	subs	r3, #5
 80026c6:	221f      	movs	r2, #31
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	4019      	ands	r1, r3
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	3b05      	subs	r3, #5
 80026e0:	fa00 f203 	lsl.w	r2, r0, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	635a      	str	r2, [r3, #52]	; 0x34
 80026ec:	e03c      	b.n	8002768 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b0c      	cmp	r3, #12
 80026f4:	d81c      	bhi.n	8002730 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	3b23      	subs	r3, #35	; 0x23
 8002708:	221f      	movs	r2, #31
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	4019      	ands	r1, r3
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6818      	ldr	r0, [r3, #0]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	3b23      	subs	r3, #35	; 0x23
 8002722:	fa00 f203 	lsl.w	r2, r0, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	631a      	str	r2, [r3, #48]	; 0x30
 800272e:	e01b      	b.n	8002768 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	3b41      	subs	r3, #65	; 0x41
 8002742:	221f      	movs	r2, #31
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	4019      	ands	r1, r3
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	3b41      	subs	r3, #65	; 0x41
 800275c:	fa00 f203 	lsl.w	r2, r0, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b09      	cmp	r3, #9
 800276e:	d91c      	bls.n	80027aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68d9      	ldr	r1, [r3, #12]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	4613      	mov	r3, r2
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4413      	add	r3, r2
 8002780:	3b1e      	subs	r3, #30
 8002782:	2207      	movs	r2, #7
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	4019      	ands	r1, r3
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	6898      	ldr	r0, [r3, #8]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4613      	mov	r3, r2
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4413      	add	r3, r2
 800279a:	3b1e      	subs	r3, #30
 800279c:	fa00 f203 	lsl.w	r2, r0, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	60da      	str	r2, [r3, #12]
 80027a8:	e019      	b.n	80027de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6919      	ldr	r1, [r3, #16]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4613      	mov	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4413      	add	r3, r2
 80027ba:	2207      	movs	r2, #7
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	4019      	ands	r1, r3
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6898      	ldr	r0, [r3, #8]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4613      	mov	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4413      	add	r3, r2
 80027d2:	fa00 f203 	lsl.w	r2, r0, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b10      	cmp	r3, #16
 80027e4:	d003      	beq.n	80027ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027ea:	2b11      	cmp	r3, #17
 80027ec:	d132      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1d      	ldr	r2, [pc, #116]	; (8002868 <HAL_ADC_ConfigChannel+0x1e4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d125      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d126      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002814:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b10      	cmp	r3, #16
 800281c:	d11a      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800281e:	4b13      	ldr	r3, [pc, #76]	; (800286c <HAL_ADC_ConfigChannel+0x1e8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a13      	ldr	r2, [pc, #76]	; (8002870 <HAL_ADC_ConfigChannel+0x1ec>)
 8002824:	fba2 2303 	umull	r2, r3, r2, r3
 8002828:	0c9a      	lsrs	r2, r3, #18
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002834:	e002      	b.n	800283c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	3b01      	subs	r3, #1
 800283a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f9      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x1b2>
 8002842:	e007      	b.n	8002854 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002848:	f043 0220 	orr.w	r2, r3, #32
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800285c:	7bfb      	ldrb	r3, [r7, #15]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	40012400 	.word	0x40012400
 800286c:	20000014 	.word	0x20000014
 8002870:	431bde83 	.word	0x431bde83

08002874 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b01      	cmp	r3, #1
 8002890:	d040      	beq.n	8002914 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0201 	orr.w	r2, r2, #1
 80028a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028a2:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <ADC_Enable+0xac>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a1f      	ldr	r2, [pc, #124]	; (8002924 <ADC_Enable+0xb0>)
 80028a8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ac:	0c9b      	lsrs	r3, r3, #18
 80028ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80028b0:	e002      	b.n	80028b8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f9      	bne.n	80028b2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028be:	f7ff fbef 	bl	80020a0 <HAL_GetTick>
 80028c2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028c4:	e01f      	b.n	8002906 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028c6:	f7ff fbeb 	bl	80020a0 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d918      	bls.n	8002906 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d011      	beq.n	8002906 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e6:	f043 0210 	orr.w	r2, r3, #16
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f2:	f043 0201 	orr.w	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e007      	b.n	8002916 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b01      	cmp	r3, #1
 8002912:	d1d8      	bne.n	80028c6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000014 	.word	0x20000014
 8002924:	431bde83 	.word	0x431bde83

08002928 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b01      	cmp	r3, #1
 8002940:	d12e      	bne.n	80029a0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0201 	bic.w	r2, r2, #1
 8002950:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002952:	f7ff fba5 	bl	80020a0 <HAL_GetTick>
 8002956:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002958:	e01b      	b.n	8002992 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800295a:	f7ff fba1 	bl	80020a0 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d914      	bls.n	8002992 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b01      	cmp	r3, #1
 8002974:	d10d      	bne.n	8002992 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	f043 0210 	orr.w	r2, r3, #16
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002986:	f043 0201 	orr.w	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e007      	b.n	80029a2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b01      	cmp	r3, #1
 800299e:	d0dc      	beq.n	800295a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b084      	sub	sp, #16
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0ed      	b.n	8002b98 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff f9a1 	bl	8001d10 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0201 	orr.w	r2, r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029de:	f7ff fb5f 	bl	80020a0 <HAL_GetTick>
 80029e2:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029e4:	e012      	b.n	8002a0c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029e6:	f7ff fb5b 	bl	80020a0 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b0a      	cmp	r3, #10
 80029f2:	d90b      	bls.n	8002a0c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2205      	movs	r2, #5
 8002a04:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0c5      	b.n	8002b98 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0e5      	beq.n	80029e6 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0202 	bic.w	r2, r2, #2
 8002a28:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a2a:	f7ff fb39 	bl	80020a0 <HAL_GetTick>
 8002a2e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a30:	e012      	b.n	8002a58 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a32:	f7ff fb35 	bl	80020a0 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b0a      	cmp	r3, #10
 8002a3e:	d90b      	bls.n	8002a58 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2205      	movs	r2, #5
 8002a50:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e09f      	b.n	8002b98 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1e5      	bne.n	8002a32 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	7e1b      	ldrb	r3, [r3, #24]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d108      	bne.n	8002a80 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	e007      	b.n	8002a90 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	7e5b      	ldrb	r3, [r3, #25]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d108      	bne.n	8002aaa <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	e007      	b.n	8002aba <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ab8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	7e9b      	ldrb	r3, [r3, #26]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d108      	bne.n	8002ad4 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 0220 	orr.w	r2, r2, #32
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	e007      	b.n	8002ae4 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0220 	bic.w	r2, r2, #32
 8002ae2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	7edb      	ldrb	r3, [r3, #27]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d108      	bne.n	8002afe <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0210 	bic.w	r2, r2, #16
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	e007      	b.n	8002b0e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0210 	orr.w	r2, r2, #16
 8002b0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	7f1b      	ldrb	r3, [r3, #28]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d108      	bne.n	8002b28 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0208 	orr.w	r2, r2, #8
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	e007      	b.n	8002b38 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0208 	bic.w	r2, r2, #8
 8002b36:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	7f5b      	ldrb	r3, [r3, #29]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d108      	bne.n	8002b52 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0204 	orr.w	r2, r2, #4
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	e007      	b.n	8002b62 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0204 	bic.w	r2, r2, #4
 8002b60:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	ea42 0103 	orr.w	r1, r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	1e5a      	subs	r2, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d003      	beq.n	8002bc6 <HAL_CAN_ConfigFilter+0x26>
 8002bbe:	7cfb      	ldrb	r3, [r7, #19]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	f040 80aa 	bne.w	8002d1a <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bcc:	f043 0201 	orr.w	r2, r3, #1
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f003 031f 	and.w	r3, r3, #31
 8002bde:	2201      	movs	r2, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	401a      	ands	r2, r3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d123      	bne.n	8002c48 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	401a      	ands	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002c22:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	3248      	adds	r2, #72	; 0x48
 8002c28:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c3e:	6979      	ldr	r1, [r7, #20]
 8002c40:	3348      	adds	r3, #72	; 0x48
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	440b      	add	r3, r1
 8002c46:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d122      	bne.n	8002c96 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c70:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	3248      	adds	r2, #72	; 0x48
 8002c76:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c8a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c8c:	6979      	ldr	r1, [r7, #20]
 8002c8e:	3348      	adds	r3, #72	; 0x48
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	440b      	add	r3, r1
 8002c94:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	401a      	ands	r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002cb0:	e007      	b.n	8002cc2 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	401a      	ands	r2, r3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002cdc:	e007      	b.n	8002cee <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d107      	bne.n	8002d06 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d0c:	f023 0201 	bic.w	r2, r3, #1
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e006      	b.n	8002d28 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
  }
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	371c      	adds	r7, #28
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr

08002d32 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d12e      	bne.n	8002da4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0201 	bic.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d5e:	f7ff f99f 	bl	80020a0 <HAL_GetTick>
 8002d62:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d64:	e012      	b.n	8002d8c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d66:	f7ff f99b 	bl	80020a0 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b0a      	cmp	r3, #10
 8002d72:	d90b      	bls.n	8002d8c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2205      	movs	r2, #5
 8002d84:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e012      	b.n	8002db2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1e5      	bne.n	8002d66 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	e006      	b.n	8002db2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
  }
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b089      	sub	sp, #36	; 0x24
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dce:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002dd8:	7ffb      	ldrb	r3, [r7, #31]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d003      	beq.n	8002de6 <HAL_CAN_AddTxMessage+0x2c>
 8002dde:	7ffb      	ldrb	r3, [r7, #31]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	f040 80ad 	bne.w	8002f40 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10a      	bne.n	8002e06 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d105      	bne.n	8002e06 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 8095 	beq.w	8002f30 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	0e1b      	lsrs	r3, r3, #24
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002e10:	2201      	movs	r2, #1
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	409a      	lsls	r2, r3
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10d      	bne.n	8002e3e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002e2c:	68f9      	ldr	r1, [r7, #12]
 8002e2e:	6809      	ldr	r1, [r1, #0]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	3318      	adds	r3, #24
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	440b      	add	r3, r1
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	e00f      	b.n	8002e5e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e48:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e4e:	68f9      	ldr	r1, [r7, #12]
 8002e50:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002e52:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	3318      	adds	r3, #24
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	440b      	add	r3, r1
 8002e5c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6819      	ldr	r1, [r3, #0]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	3318      	adds	r3, #24
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3304      	adds	r3, #4
 8002e70:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	7d1b      	ldrb	r3, [r3, #20]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d111      	bne.n	8002e9e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	3318      	adds	r3, #24
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	4413      	add	r3, r2
 8002e86:	3304      	adds	r3, #4
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	6811      	ldr	r1, [r2, #0]
 8002e8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	3318      	adds	r3, #24
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	440b      	add	r3, r1
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3307      	adds	r3, #7
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	061a      	lsls	r2, r3, #24
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3306      	adds	r3, #6
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	041b      	lsls	r3, r3, #16
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3305      	adds	r3, #5
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	3204      	adds	r2, #4
 8002ebe:	7812      	ldrb	r2, [r2, #0]
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	6811      	ldr	r1, [r2, #0]
 8002ec6:	ea43 0200 	orr.w	r2, r3, r0
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	440b      	add	r3, r1
 8002ed0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002ed4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3303      	adds	r3, #3
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	061a      	lsls	r2, r3, #24
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	041b      	lsls	r3, r3, #16
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3301      	adds	r3, #1
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	021b      	lsls	r3, r3, #8
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	7812      	ldrb	r2, [r2, #0]
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	6811      	ldr	r1, [r2, #0]
 8002efc:	ea43 0200 	orr.w	r2, r3, r0
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	440b      	add	r3, r1
 8002f06:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002f0a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	3318      	adds	r3, #24
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	4413      	add	r3, r2
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	6811      	ldr	r1, [r2, #0]
 8002f1e:	f043 0201 	orr.w	r2, r3, #1
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	3318      	adds	r3, #24
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	440b      	add	r3, r1
 8002f2a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e00e      	b.n	8002f4e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e006      	b.n	8002f4e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
  }
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3724      	adds	r7, #36	; 0x24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f6c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f6e:	7afb      	ldrb	r3, [r7, #11]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d002      	beq.n	8002f7a <HAL_CAN_IsTxMessagePending+0x22>
 8002f74:	7afb      	ldrb	r3, [r7, #11]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d10b      	bne.n	8002f92 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	069b      	lsls	r3, r3, #26
 8002f84:	401a      	ands	r2, r3
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	069b      	lsls	r3, r3, #26
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d001      	beq.n	8002f92 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8002f92:	68fb      	ldr	r3, [r7, #12]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b087      	sub	sp, #28
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fb2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d003      	beq.n	8002fc2 <HAL_CAN_GetRxMessage+0x24>
 8002fba:	7dfb      	ldrb	r3, [r7, #23]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	f040 8103 	bne.w	80031c8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10e      	bne.n	8002fe6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d116      	bne.n	8003004 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e0f7      	b.n	80031d6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d107      	bne.n	8003004 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0e8      	b.n	80031d6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	331b      	adds	r3, #27
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	4413      	add	r3, r2
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0204 	and.w	r2, r3, #4
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10c      	bne.n	800303c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	331b      	adds	r3, #27
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	4413      	add	r3, r2
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	0d5b      	lsrs	r3, r3, #21
 8003032:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	e00b      	b.n	8003054 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	331b      	adds	r3, #27
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	4413      	add	r3, r2
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	08db      	lsrs	r3, r3, #3
 800304c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	331b      	adds	r3, #27
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	4413      	add	r3, r2
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0202 	and.w	r2, r3, #2
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	331b      	adds	r3, #27
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	4413      	add	r3, r2
 8003076:	3304      	adds	r3, #4
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2208      	movs	r2, #8
 8003086:	611a      	str	r2, [r3, #16]
 8003088:	e00b      	b.n	80030a2 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	331b      	adds	r3, #27
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	4413      	add	r3, r2
 8003096:	3304      	adds	r3, #4
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 020f 	and.w	r2, r3, #15
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	331b      	adds	r3, #27
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	4413      	add	r3, r2
 80030ae:	3304      	adds	r3, #4
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	331b      	adds	r3, #27
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	4413      	add	r3, r2
 80030c6:	3304      	adds	r3, #4
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	0c1b      	lsrs	r3, r3, #16
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	4413      	add	r3, r2
 80030dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	0a1a      	lsrs	r2, r3, #8
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	3301      	adds	r3, #1
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	4413      	add	r3, r2
 800310c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	0c1a      	lsrs	r2, r3, #16
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	3302      	adds	r3, #2
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	4413      	add	r3, r2
 8003126:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	0e1a      	lsrs	r2, r3, #24
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	3303      	adds	r3, #3
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	4413      	add	r3, r2
 8003140:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	3304      	adds	r3, #4
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	4413      	add	r3, r2
 8003158:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	0a1a      	lsrs	r2, r3, #8
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	3305      	adds	r3, #5
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	4413      	add	r3, r2
 8003172:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	0c1a      	lsrs	r2, r3, #16
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	3306      	adds	r3, #6
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	4413      	add	r3, r2
 800318c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	0e1a      	lsrs	r2, r3, #24
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	3307      	adds	r3, #7
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d108      	bne.n	80031b4 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0220 	orr.w	r2, r2, #32
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	e007      	b.n	80031c4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0220 	orr.w	r2, r2, #32
 80031c2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	e006      	b.n	80031d6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
  }
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr

080031e0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031f0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d002      	beq.n	80031fe <HAL_CAN_ActivateNotification+0x1e>
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d109      	bne.n	8003212 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6959      	ldr	r1, [r3, #20]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	e006      	b.n	8003220 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
  }
}
 8003220:	4618      	mov	r0, r3
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr

0800322a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b08a      	sub	sp, #40	; 0x28
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003232:	2300      	movs	r3, #0
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d07c      	beq.n	800336a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d023      	beq.n	80032c2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2201      	movs	r2, #1
 8003280:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f983 	bl	8003598 <HAL_CAN_TxMailbox0CompleteCallback>
 8003292:	e016      	b.n	80032c2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b00      	cmp	r3, #0
 800329c:	d004      	beq.n	80032a8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
 80032a6:	e00c      	b.n	80032c2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d004      	beq.n	80032bc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ba:	e002      	b.n	80032c2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f986 	bl	80035ce <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d024      	beq.n	8003316 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f962 	bl	80035aa <HAL_CAN_TxMailbox1CompleteCallback>
 80032e6:	e016      	b.n	8003316 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d004      	beq.n	80032fc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
 80032fa:	e00c      	b.n	8003316 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003302:	2b00      	cmp	r3, #0
 8003304:	d004      	beq.n	8003310 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
 800330e:	e002      	b.n	8003316 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f965 	bl	80035e0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d024      	beq.n	800336a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003328:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f941 	bl	80035bc <HAL_CAN_TxMailbox2CompleteCallback>
 800333a:	e016      	b.n	800336a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d004      	beq.n	8003350 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
 800334e:	e00c      	b.n	800336a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d004      	beq.n	8003364 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
 8003362:	e002      	b.n	800336a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f944 	bl	80035f2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00c      	beq.n	800338e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	2b00      	cmp	r3, #0
 800337c:	d007      	beq.n	800338e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003384:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2210      	movs	r2, #16
 800338c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00b      	beq.n	80033b0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d006      	beq.n	80033b0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2208      	movs	r2, #8
 80033a8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f92a 	bl	8003604 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d009      	beq.n	80033ce <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7fd fd0d 	bl	8000de8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00c      	beq.n	80033f2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2210      	movs	r2, #16
 80033f0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	f003 0320 	and.w	r3, r3, #32
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00b      	beq.n	8003414 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d006      	beq.n	8003414 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2208      	movs	r2, #8
 800340c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f90a 	bl	8003628 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	2b00      	cmp	r3, #0
 800341c:	d009      	beq.n	8003432 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f8f2 	bl	8003616 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00b      	beq.n	8003454 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f003 0310 	and.w	r3, r3, #16
 8003442:	2b00      	cmp	r3, #0
 8003444:	d006      	beq.n	8003454 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2210      	movs	r2, #16
 800344c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f8f3 	bl	800363a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00b      	beq.n	8003476 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d006      	beq.n	8003476 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2208      	movs	r2, #8
 800346e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f8eb 	bl	800364c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d07b      	beq.n	8003578 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b00      	cmp	r3, #0
 8003488:	d072      	beq.n	8003570 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	f043 0302 	orr.w	r3, r3, #2
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	f043 0304 	orr.w	r3, r3, #4
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d043      	beq.n	8003570 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d03e      	beq.n	8003570 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034f8:	2b60      	cmp	r3, #96	; 0x60
 80034fa:	d02b      	beq.n	8003554 <HAL_CAN_IRQHandler+0x32a>
 80034fc:	2b60      	cmp	r3, #96	; 0x60
 80034fe:	d82e      	bhi.n	800355e <HAL_CAN_IRQHandler+0x334>
 8003500:	2b50      	cmp	r3, #80	; 0x50
 8003502:	d022      	beq.n	800354a <HAL_CAN_IRQHandler+0x320>
 8003504:	2b50      	cmp	r3, #80	; 0x50
 8003506:	d82a      	bhi.n	800355e <HAL_CAN_IRQHandler+0x334>
 8003508:	2b40      	cmp	r3, #64	; 0x40
 800350a:	d019      	beq.n	8003540 <HAL_CAN_IRQHandler+0x316>
 800350c:	2b40      	cmp	r3, #64	; 0x40
 800350e:	d826      	bhi.n	800355e <HAL_CAN_IRQHandler+0x334>
 8003510:	2b30      	cmp	r3, #48	; 0x30
 8003512:	d010      	beq.n	8003536 <HAL_CAN_IRQHandler+0x30c>
 8003514:	2b30      	cmp	r3, #48	; 0x30
 8003516:	d822      	bhi.n	800355e <HAL_CAN_IRQHandler+0x334>
 8003518:	2b10      	cmp	r3, #16
 800351a:	d002      	beq.n	8003522 <HAL_CAN_IRQHandler+0x2f8>
 800351c:	2b20      	cmp	r3, #32
 800351e:	d005      	beq.n	800352c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003520:	e01d      	b.n	800355e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	f043 0308 	orr.w	r3, r3, #8
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800352a:	e019      	b.n	8003560 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	f043 0310 	orr.w	r3, r3, #16
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003534:	e014      	b.n	8003560 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	f043 0320 	orr.w	r3, r3, #32
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800353e:	e00f      	b.n	8003560 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003548:	e00a      	b.n	8003560 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003552:	e005      	b.n	8003560 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800355c:	e000      	b.n	8003560 <HAL_CAN_IRQHandler+0x336>
            break;
 800355e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699a      	ldr	r2, [r3, #24]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800356e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2204      	movs	r2, #4
 8003576:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	2b00      	cmp	r3, #0
 800357c:	d008      	beq.n	8003590 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f867 	bl	800365e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003590:	bf00      	nop
 8003592:	3728      	adds	r7, #40	; 0x28
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr

080035aa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr

080035bc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr

080035ce <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr

080035f2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr

08003616 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr

08003628 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr

0800363a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr

0800365e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr

08003670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003680:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800368c:	4013      	ands	r3, r2
 800368e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800369c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036a2:	4a04      	ldr	r2, [pc, #16]	; (80036b4 <__NVIC_SetPriorityGrouping+0x44>)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	60d3      	str	r3, [r2, #12]
}
 80036a8:	bf00      	nop
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036bc:	4b04      	ldr	r3, [pc, #16]	; (80036d0 <__NVIC_GetPriorityGrouping+0x18>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	0a1b      	lsrs	r3, r3, #8
 80036c2:	f003 0307 	and.w	r3, r3, #7
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	db0b      	blt.n	80036fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	f003 021f 	and.w	r2, r3, #31
 80036ec:	4906      	ldr	r1, [pc, #24]	; (8003708 <__NVIC_EnableIRQ+0x34>)
 80036ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	2001      	movs	r0, #1
 80036f6:	fa00 f202 	lsl.w	r2, r0, r2
 80036fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr
 8003708:	e000e100 	.word	0xe000e100

0800370c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	6039      	str	r1, [r7, #0]
 8003716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371c:	2b00      	cmp	r3, #0
 800371e:	db0a      	blt.n	8003736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	b2da      	uxtb	r2, r3
 8003724:	490c      	ldr	r1, [pc, #48]	; (8003758 <__NVIC_SetPriority+0x4c>)
 8003726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372a:	0112      	lsls	r2, r2, #4
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	440b      	add	r3, r1
 8003730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003734:	e00a      	b.n	800374c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	b2da      	uxtb	r2, r3
 800373a:	4908      	ldr	r1, [pc, #32]	; (800375c <__NVIC_SetPriority+0x50>)
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	3b04      	subs	r3, #4
 8003744:	0112      	lsls	r2, r2, #4
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	440b      	add	r3, r1
 800374a:	761a      	strb	r2, [r3, #24]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	e000e100 	.word	0xe000e100
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003760:	b480      	push	{r7}
 8003762:	b089      	sub	sp, #36	; 0x24
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f1c3 0307 	rsb	r3, r3, #7
 800377a:	2b04      	cmp	r3, #4
 800377c:	bf28      	it	cs
 800377e:	2304      	movcs	r3, #4
 8003780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	3304      	adds	r3, #4
 8003786:	2b06      	cmp	r3, #6
 8003788:	d902      	bls.n	8003790 <NVIC_EncodePriority+0x30>
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3b03      	subs	r3, #3
 800378e:	e000      	b.n	8003792 <NVIC_EncodePriority+0x32>
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003794:	f04f 32ff 	mov.w	r2, #4294967295
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43da      	mvns	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	401a      	ands	r2, r3
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037a8:	f04f 31ff 	mov.w	r1, #4294967295
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	fa01 f303 	lsl.w	r3, r1, r3
 80037b2:	43d9      	mvns	r1, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b8:	4313      	orrs	r3, r2
         );
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3724      	adds	r7, #36	; 0x24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr

080037c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037d4:	d301      	bcc.n	80037da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037d6:	2301      	movs	r3, #1
 80037d8:	e00f      	b.n	80037fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037da:	4a0a      	ldr	r2, [pc, #40]	; (8003804 <SysTick_Config+0x40>)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3b01      	subs	r3, #1
 80037e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037e2:	210f      	movs	r1, #15
 80037e4:	f04f 30ff 	mov.w	r0, #4294967295
 80037e8:	f7ff ff90 	bl	800370c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <SysTick_Config+0x40>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037f2:	4b04      	ldr	r3, [pc, #16]	; (8003804 <SysTick_Config+0x40>)
 80037f4:	2207      	movs	r2, #7
 80037f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	e000e010 	.word	0xe000e010

08003808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff ff2d 	bl	8003670 <__NVIC_SetPriorityGrouping>
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800381e:	b580      	push	{r7, lr}
 8003820:	b086      	sub	sp, #24
 8003822:	af00      	add	r7, sp, #0
 8003824:	4603      	mov	r3, r0
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
 800382a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003830:	f7ff ff42 	bl	80036b8 <__NVIC_GetPriorityGrouping>
 8003834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	6978      	ldr	r0, [r7, #20]
 800383c:	f7ff ff90 	bl	8003760 <NVIC_EncodePriority>
 8003840:	4602      	mov	r2, r0
 8003842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003846:	4611      	mov	r1, r2
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff ff5f 	bl	800370c <__NVIC_SetPriority>
}
 800384e:	bf00      	nop
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	4603      	mov	r3, r0
 800385e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff ff35 	bl	80036d4 <__NVIC_EnableIRQ>
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff ffa2 	bl	80037c4 <SysTick_Config>
 8003880:	4603      	mov	r3, r0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800388c:	b480      	push	{r7}
 800388e:	b08b      	sub	sp, #44	; 0x2c
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003896:	2300      	movs	r3, #0
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800389a:	2300      	movs	r3, #0
 800389c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800389e:	e169      	b.n	8003b74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80038a0:	2201      	movs	r2, #1
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	4013      	ands	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	f040 8158 	bne.w	8003b6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4a9a      	ldr	r2, [pc, #616]	; (8003b2c <HAL_GPIO_Init+0x2a0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d05e      	beq.n	8003986 <HAL_GPIO_Init+0xfa>
 80038c8:	4a98      	ldr	r2, [pc, #608]	; (8003b2c <HAL_GPIO_Init+0x2a0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d875      	bhi.n	80039ba <HAL_GPIO_Init+0x12e>
 80038ce:	4a98      	ldr	r2, [pc, #608]	; (8003b30 <HAL_GPIO_Init+0x2a4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d058      	beq.n	8003986 <HAL_GPIO_Init+0xfa>
 80038d4:	4a96      	ldr	r2, [pc, #600]	; (8003b30 <HAL_GPIO_Init+0x2a4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d86f      	bhi.n	80039ba <HAL_GPIO_Init+0x12e>
 80038da:	4a96      	ldr	r2, [pc, #600]	; (8003b34 <HAL_GPIO_Init+0x2a8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d052      	beq.n	8003986 <HAL_GPIO_Init+0xfa>
 80038e0:	4a94      	ldr	r2, [pc, #592]	; (8003b34 <HAL_GPIO_Init+0x2a8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d869      	bhi.n	80039ba <HAL_GPIO_Init+0x12e>
 80038e6:	4a94      	ldr	r2, [pc, #592]	; (8003b38 <HAL_GPIO_Init+0x2ac>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d04c      	beq.n	8003986 <HAL_GPIO_Init+0xfa>
 80038ec:	4a92      	ldr	r2, [pc, #584]	; (8003b38 <HAL_GPIO_Init+0x2ac>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d863      	bhi.n	80039ba <HAL_GPIO_Init+0x12e>
 80038f2:	4a92      	ldr	r2, [pc, #584]	; (8003b3c <HAL_GPIO_Init+0x2b0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d046      	beq.n	8003986 <HAL_GPIO_Init+0xfa>
 80038f8:	4a90      	ldr	r2, [pc, #576]	; (8003b3c <HAL_GPIO_Init+0x2b0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d85d      	bhi.n	80039ba <HAL_GPIO_Init+0x12e>
 80038fe:	2b12      	cmp	r3, #18
 8003900:	d82a      	bhi.n	8003958 <HAL_GPIO_Init+0xcc>
 8003902:	2b12      	cmp	r3, #18
 8003904:	d859      	bhi.n	80039ba <HAL_GPIO_Init+0x12e>
 8003906:	a201      	add	r2, pc, #4	; (adr r2, 800390c <HAL_GPIO_Init+0x80>)
 8003908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390c:	08003987 	.word	0x08003987
 8003910:	08003961 	.word	0x08003961
 8003914:	08003973 	.word	0x08003973
 8003918:	080039b5 	.word	0x080039b5
 800391c:	080039bb 	.word	0x080039bb
 8003920:	080039bb 	.word	0x080039bb
 8003924:	080039bb 	.word	0x080039bb
 8003928:	080039bb 	.word	0x080039bb
 800392c:	080039bb 	.word	0x080039bb
 8003930:	080039bb 	.word	0x080039bb
 8003934:	080039bb 	.word	0x080039bb
 8003938:	080039bb 	.word	0x080039bb
 800393c:	080039bb 	.word	0x080039bb
 8003940:	080039bb 	.word	0x080039bb
 8003944:	080039bb 	.word	0x080039bb
 8003948:	080039bb 	.word	0x080039bb
 800394c:	080039bb 	.word	0x080039bb
 8003950:	08003969 	.word	0x08003969
 8003954:	0800397d 	.word	0x0800397d
 8003958:	4a79      	ldr	r2, [pc, #484]	; (8003b40 <HAL_GPIO_Init+0x2b4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d013      	beq.n	8003986 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800395e:	e02c      	b.n	80039ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	623b      	str	r3, [r7, #32]
          break;
 8003966:	e029      	b.n	80039bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	3304      	adds	r3, #4
 800396e:	623b      	str	r3, [r7, #32]
          break;
 8003970:	e024      	b.n	80039bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	3308      	adds	r3, #8
 8003978:	623b      	str	r3, [r7, #32]
          break;
 800397a:	e01f      	b.n	80039bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	330c      	adds	r3, #12
 8003982:	623b      	str	r3, [r7, #32]
          break;
 8003984:	e01a      	b.n	80039bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d102      	bne.n	8003994 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800398e:	2304      	movs	r3, #4
 8003990:	623b      	str	r3, [r7, #32]
          break;
 8003992:	e013      	b.n	80039bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d105      	bne.n	80039a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800399c:	2308      	movs	r3, #8
 800399e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69fa      	ldr	r2, [r7, #28]
 80039a4:	611a      	str	r2, [r3, #16]
          break;
 80039a6:	e009      	b.n	80039bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039a8:	2308      	movs	r3, #8
 80039aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	615a      	str	r2, [r3, #20]
          break;
 80039b2:	e003      	b.n	80039bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039b4:	2300      	movs	r3, #0
 80039b6:	623b      	str	r3, [r7, #32]
          break;
 80039b8:	e000      	b.n	80039bc <HAL_GPIO_Init+0x130>
          break;
 80039ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	2bff      	cmp	r3, #255	; 0xff
 80039c0:	d801      	bhi.n	80039c6 <HAL_GPIO_Init+0x13a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	e001      	b.n	80039ca <HAL_GPIO_Init+0x13e>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3304      	adds	r3, #4
 80039ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2bff      	cmp	r3, #255	; 0xff
 80039d0:	d802      	bhi.n	80039d8 <HAL_GPIO_Init+0x14c>
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	e002      	b.n	80039de <HAL_GPIO_Init+0x152>
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	3b08      	subs	r3, #8
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	210f      	movs	r1, #15
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	401a      	ands	r2, r3
 80039f0:	6a39      	ldr	r1, [r7, #32]
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	fa01 f303 	lsl.w	r3, r1, r3
 80039f8:	431a      	orrs	r2, r3
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80b1 	beq.w	8003b6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a0c:	4b4d      	ldr	r3, [pc, #308]	; (8003b44 <HAL_GPIO_Init+0x2b8>)
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	4a4c      	ldr	r2, [pc, #304]	; (8003b44 <HAL_GPIO_Init+0x2b8>)
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	6193      	str	r3, [r2, #24]
 8003a18:	4b4a      	ldr	r3, [pc, #296]	; (8003b44 <HAL_GPIO_Init+0x2b8>)
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a24:	4a48      	ldr	r2, [pc, #288]	; (8003b48 <HAL_GPIO_Init+0x2bc>)
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	089b      	lsrs	r3, r3, #2
 8003a2a:	3302      	adds	r3, #2
 8003a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	220f      	movs	r2, #15
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	43db      	mvns	r3, r3
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4013      	ands	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a40      	ldr	r2, [pc, #256]	; (8003b4c <HAL_GPIO_Init+0x2c0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d013      	beq.n	8003a78 <HAL_GPIO_Init+0x1ec>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a3f      	ldr	r2, [pc, #252]	; (8003b50 <HAL_GPIO_Init+0x2c4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00d      	beq.n	8003a74 <HAL_GPIO_Init+0x1e8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a3e      	ldr	r2, [pc, #248]	; (8003b54 <HAL_GPIO_Init+0x2c8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d007      	beq.n	8003a70 <HAL_GPIO_Init+0x1e4>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a3d      	ldr	r2, [pc, #244]	; (8003b58 <HAL_GPIO_Init+0x2cc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d101      	bne.n	8003a6c <HAL_GPIO_Init+0x1e0>
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e006      	b.n	8003a7a <HAL_GPIO_Init+0x1ee>
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	e004      	b.n	8003a7a <HAL_GPIO_Init+0x1ee>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e002      	b.n	8003a7a <HAL_GPIO_Init+0x1ee>
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <HAL_GPIO_Init+0x1ee>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7c:	f002 0203 	and.w	r2, r2, #3
 8003a80:	0092      	lsls	r2, r2, #2
 8003a82:	4093      	lsls	r3, r2
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a8a:	492f      	ldr	r1, [pc, #188]	; (8003b48 <HAL_GPIO_Init+0x2bc>)
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	089b      	lsrs	r3, r3, #2
 8003a90:	3302      	adds	r3, #2
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d006      	beq.n	8003ab2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003aa4:	4b2d      	ldr	r3, [pc, #180]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	492c      	ldr	r1, [pc, #176]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	608b      	str	r3, [r1, #8]
 8003ab0:	e006      	b.n	8003ac0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ab2:	4b2a      	ldr	r3, [pc, #168]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	4928      	ldr	r1, [pc, #160]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d006      	beq.n	8003ada <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003acc:	4b23      	ldr	r3, [pc, #140]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	4922      	ldr	r1, [pc, #136]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60cb      	str	r3, [r1, #12]
 8003ad8:	e006      	b.n	8003ae8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ada:	4b20      	ldr	r3, [pc, #128]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	491e      	ldr	r1, [pc, #120]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d006      	beq.n	8003b02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003af4:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	4918      	ldr	r1, [pc, #96]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	604b      	str	r3, [r1, #4]
 8003b00:	e006      	b.n	8003b10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b02:	4b16      	ldr	r3, [pc, #88]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	4914      	ldr	r1, [pc, #80]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d021      	beq.n	8003b60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b1c:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	490e      	ldr	r1, [pc, #56]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	600b      	str	r3, [r1, #0]
 8003b28:	e021      	b.n	8003b6e <HAL_GPIO_Init+0x2e2>
 8003b2a:	bf00      	nop
 8003b2c:	10320000 	.word	0x10320000
 8003b30:	10310000 	.word	0x10310000
 8003b34:	10220000 	.word	0x10220000
 8003b38:	10210000 	.word	0x10210000
 8003b3c:	10120000 	.word	0x10120000
 8003b40:	10110000 	.word	0x10110000
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40010000 	.word	0x40010000
 8003b4c:	40010800 	.word	0x40010800
 8003b50:	40010c00 	.word	0x40010c00
 8003b54:	40011000 	.word	0x40011000
 8003b58:	40011400 	.word	0x40011400
 8003b5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_GPIO_Init+0x304>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	43db      	mvns	r3, r3
 8003b68:	4909      	ldr	r1, [pc, #36]	; (8003b90 <HAL_GPIO_Init+0x304>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	3301      	adds	r3, #1
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f47f ae8e 	bne.w	80038a0 <HAL_GPIO_Init+0x14>
  }
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop
 8003b88:	372c      	adds	r7, #44	; 0x2c
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr
 8003b90:	40010400 	.word	0x40010400

08003b94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	887b      	ldrh	r3, [r7, #2]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bac:	2301      	movs	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
 8003bb0:	e001      	b.n	8003bb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr

08003bc2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	807b      	strh	r3, [r7, #2]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bd2:	787b      	ldrb	r3, [r7, #1]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bd8:	887a      	ldrh	r2, [r7, #2]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003bde:	e003      	b.n	8003be8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003be0:	887b      	ldrh	r3, [r7, #2]
 8003be2:	041a      	lsls	r2, r3, #16
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	611a      	str	r2, [r3, #16]
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr
	...

08003bf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003bfe:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c00:	695a      	ldr	r2, [r3, #20]
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d006      	beq.n	8003c18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c0a:	4a05      	ldr	r2, [pc, #20]	; (8003c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c0c:	88fb      	ldrh	r3, [r7, #6]
 8003c0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fd f906 	bl	8000e24 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c18:	bf00      	nop
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40010400 	.word	0x40010400

08003c24 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e034      	b.n	8003ca0 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f245 5255 	movw	r2, #21845	; 0x5555
 8003c48:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6852      	ldr	r2, [r2, #4]
 8003c52:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6892      	ldr	r2, [r2, #8]
 8003c5c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003c5e:	f7fe fa1f 	bl	80020a0 <HAL_GetTick>
 8003c62:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003c64:	e00f      	b.n	8003c86 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003c66:	f7fe fa1b 	bl	80020a0 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b27      	cmp	r3, #39	; 0x27
 8003c72:	d908      	bls.n	8003c86 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e00c      	b.n	8003ca0 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1e8      	bne.n	8003c66 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003c9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003cb8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr
	...

08003cc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e272      	b.n	80041c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8087 	beq.w	8003df6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ce8:	4b92      	ldr	r3, [pc, #584]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 030c 	and.w	r3, r3, #12
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d00c      	beq.n	8003d0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cf4:	4b8f      	ldr	r3, [pc, #572]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 030c 	and.w	r3, r3, #12
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d112      	bne.n	8003d26 <HAL_RCC_OscConfig+0x5e>
 8003d00:	4b8c      	ldr	r3, [pc, #560]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d0c:	d10b      	bne.n	8003d26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0e:	4b89      	ldr	r3, [pc, #548]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d06c      	beq.n	8003df4 <HAL_RCC_OscConfig+0x12c>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d168      	bne.n	8003df4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e24c      	b.n	80041c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2e:	d106      	bne.n	8003d3e <HAL_RCC_OscConfig+0x76>
 8003d30:	4b80      	ldr	r3, [pc, #512]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a7f      	ldr	r2, [pc, #508]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	e02e      	b.n	8003d9c <HAL_RCC_OscConfig+0xd4>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10c      	bne.n	8003d60 <HAL_RCC_OscConfig+0x98>
 8003d46:	4b7b      	ldr	r3, [pc, #492]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a7a      	ldr	r2, [pc, #488]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	4b78      	ldr	r3, [pc, #480]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a77      	ldr	r2, [pc, #476]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	e01d      	b.n	8003d9c <HAL_RCC_OscConfig+0xd4>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d68:	d10c      	bne.n	8003d84 <HAL_RCC_OscConfig+0xbc>
 8003d6a:	4b72      	ldr	r3, [pc, #456]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a71      	ldr	r2, [pc, #452]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	4b6f      	ldr	r3, [pc, #444]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a6e      	ldr	r2, [pc, #440]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	e00b      	b.n	8003d9c <HAL_RCC_OscConfig+0xd4>
 8003d84:	4b6b      	ldr	r3, [pc, #428]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a6a      	ldr	r2, [pc, #424]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	4b68      	ldr	r3, [pc, #416]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a67      	ldr	r2, [pc, #412]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d013      	beq.n	8003dcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da4:	f7fe f97c 	bl	80020a0 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dac:	f7fe f978 	bl	80020a0 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b64      	cmp	r3, #100	; 0x64
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e200      	b.n	80041c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dbe:	4b5d      	ldr	r3, [pc, #372]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCC_OscConfig+0xe4>
 8003dca:	e014      	b.n	8003df6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dcc:	f7fe f968 	bl	80020a0 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd4:	f7fe f964 	bl	80020a0 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b64      	cmp	r3, #100	; 0x64
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e1ec      	b.n	80041c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de6:	4b53      	ldr	r3, [pc, #332]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x10c>
 8003df2:	e000      	b.n	8003df6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d063      	beq.n	8003eca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e02:	4b4c      	ldr	r3, [pc, #304]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f003 030c 	and.w	r3, r3, #12
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00b      	beq.n	8003e26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e0e:	4b49      	ldr	r3, [pc, #292]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f003 030c 	and.w	r3, r3, #12
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d11c      	bne.n	8003e54 <HAL_RCC_OscConfig+0x18c>
 8003e1a:	4b46      	ldr	r3, [pc, #280]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d116      	bne.n	8003e54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e26:	4b43      	ldr	r3, [pc, #268]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d005      	beq.n	8003e3e <HAL_RCC_OscConfig+0x176>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d001      	beq.n	8003e3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e1c0      	b.n	80041c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3e:	4b3d      	ldr	r3, [pc, #244]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4939      	ldr	r1, [pc, #228]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e52:	e03a      	b.n	8003eca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d020      	beq.n	8003e9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e5c:	4b36      	ldr	r3, [pc, #216]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003e5e:	2201      	movs	r2, #1
 8003e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e62:	f7fe f91d 	bl	80020a0 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e6a:	f7fe f919 	bl	80020a0 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e1a1      	b.n	80041c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7c:	4b2d      	ldr	r3, [pc, #180]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0f0      	beq.n	8003e6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e88:	4b2a      	ldr	r3, [pc, #168]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4927      	ldr	r1, [pc, #156]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	600b      	str	r3, [r1, #0]
 8003e9c:	e015      	b.n	8003eca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e9e:	4b26      	ldr	r3, [pc, #152]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea4:	f7fe f8fc 	bl	80020a0 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eac:	f7fe f8f8 	bl	80020a0 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e180      	b.n	80041c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ebe:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d03a      	beq.n	8003f4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d019      	beq.n	8003f12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ede:	4b17      	ldr	r3, [pc, #92]	; (8003f3c <HAL_RCC_OscConfig+0x274>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee4:	f7fe f8dc 	bl	80020a0 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eec:	f7fe f8d8 	bl	80020a0 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e160      	b.n	80041c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003efe:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <HAL_RCC_OscConfig+0x26c>)
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0f0      	beq.n	8003eec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f0a:	2001      	movs	r0, #1
 8003f0c:	f000 faba 	bl	8004484 <RCC_Delay>
 8003f10:	e01c      	b.n	8003f4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f12:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <HAL_RCC_OscConfig+0x274>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f18:	f7fe f8c2 	bl	80020a0 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f1e:	e00f      	b.n	8003f40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f20:	f7fe f8be 	bl	80020a0 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d908      	bls.n	8003f40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e146      	b.n	80041c0 <HAL_RCC_OscConfig+0x4f8>
 8003f32:	bf00      	nop
 8003f34:	40021000 	.word	0x40021000
 8003f38:	42420000 	.word	0x42420000
 8003f3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f40:	4b92      	ldr	r3, [pc, #584]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e9      	bne.n	8003f20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 80a6 	beq.w	80040a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f5e:	4b8b      	ldr	r3, [pc, #556]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10d      	bne.n	8003f86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f6a:	4b88      	ldr	r3, [pc, #544]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	4a87      	ldr	r2, [pc, #540]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 8003f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f74:	61d3      	str	r3, [r2, #28]
 8003f76:	4b85      	ldr	r3, [pc, #532]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	60bb      	str	r3, [r7, #8]
 8003f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f82:	2301      	movs	r3, #1
 8003f84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f86:	4b82      	ldr	r3, [pc, #520]	; (8004190 <HAL_RCC_OscConfig+0x4c8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d118      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f92:	4b7f      	ldr	r3, [pc, #508]	; (8004190 <HAL_RCC_OscConfig+0x4c8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a7e      	ldr	r2, [pc, #504]	; (8004190 <HAL_RCC_OscConfig+0x4c8>)
 8003f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9e:	f7fe f87f 	bl	80020a0 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa6:	f7fe f87b 	bl	80020a0 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b64      	cmp	r3, #100	; 0x64
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e103      	b.n	80041c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb8:	4b75      	ldr	r3, [pc, #468]	; (8004190 <HAL_RCC_OscConfig+0x4c8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d106      	bne.n	8003fda <HAL_RCC_OscConfig+0x312>
 8003fcc:	4b6f      	ldr	r3, [pc, #444]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	4a6e      	ldr	r2, [pc, #440]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	6213      	str	r3, [r2, #32]
 8003fd8:	e02d      	b.n	8004036 <HAL_RCC_OscConfig+0x36e>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCC_OscConfig+0x334>
 8003fe2:	4b6a      	ldr	r3, [pc, #424]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	4a69      	ldr	r2, [pc, #420]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	6213      	str	r3, [r2, #32]
 8003fee:	4b67      	ldr	r3, [pc, #412]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	4a66      	ldr	r2, [pc, #408]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 8003ff4:	f023 0304 	bic.w	r3, r3, #4
 8003ff8:	6213      	str	r3, [r2, #32]
 8003ffa:	e01c      	b.n	8004036 <HAL_RCC_OscConfig+0x36e>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	2b05      	cmp	r3, #5
 8004002:	d10c      	bne.n	800401e <HAL_RCC_OscConfig+0x356>
 8004004:	4b61      	ldr	r3, [pc, #388]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	4a60      	ldr	r2, [pc, #384]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 800400a:	f043 0304 	orr.w	r3, r3, #4
 800400e:	6213      	str	r3, [r2, #32]
 8004010:	4b5e      	ldr	r3, [pc, #376]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	4a5d      	ldr	r2, [pc, #372]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	6213      	str	r3, [r2, #32]
 800401c:	e00b      	b.n	8004036 <HAL_RCC_OscConfig+0x36e>
 800401e:	4b5b      	ldr	r3, [pc, #364]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	4a5a      	ldr	r2, [pc, #360]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 8004024:	f023 0301 	bic.w	r3, r3, #1
 8004028:	6213      	str	r3, [r2, #32]
 800402a:	4b58      	ldr	r3, [pc, #352]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	4a57      	ldr	r2, [pc, #348]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 8004030:	f023 0304 	bic.w	r3, r3, #4
 8004034:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d015      	beq.n	800406a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800403e:	f7fe f82f 	bl	80020a0 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004044:	e00a      	b.n	800405c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004046:	f7fe f82b 	bl	80020a0 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	f241 3288 	movw	r2, #5000	; 0x1388
 8004054:	4293      	cmp	r3, r2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e0b1      	b.n	80041c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405c:	4b4b      	ldr	r3, [pc, #300]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0ee      	beq.n	8004046 <HAL_RCC_OscConfig+0x37e>
 8004068:	e014      	b.n	8004094 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800406a:	f7fe f819 	bl	80020a0 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004070:	e00a      	b.n	8004088 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004072:	f7fe f815 	bl	80020a0 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e09b      	b.n	80041c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004088:	4b40      	ldr	r3, [pc, #256]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1ee      	bne.n	8004072 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004094:	7dfb      	ldrb	r3, [r7, #23]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d105      	bne.n	80040a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800409a:	4b3c      	ldr	r3, [pc, #240]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	4a3b      	ldr	r2, [pc, #236]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 80040a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 8087 	beq.w	80041be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040b0:	4b36      	ldr	r3, [pc, #216]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f003 030c 	and.w	r3, r3, #12
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d061      	beq.n	8004180 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d146      	bne.n	8004152 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c4:	4b33      	ldr	r3, [pc, #204]	; (8004194 <HAL_RCC_OscConfig+0x4cc>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ca:	f7fd ffe9 	bl	80020a0 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d2:	f7fd ffe5 	bl	80020a0 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e06d      	b.n	80041c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040e4:	4b29      	ldr	r3, [pc, #164]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1f0      	bne.n	80040d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f8:	d108      	bne.n	800410c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040fa:	4b24      	ldr	r3, [pc, #144]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	4921      	ldr	r1, [pc, #132]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 8004108:	4313      	orrs	r3, r2
 800410a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800410c:	4b1f      	ldr	r3, [pc, #124]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a19      	ldr	r1, [r3, #32]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	430b      	orrs	r3, r1
 800411e:	491b      	ldr	r1, [pc, #108]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 8004120:	4313      	orrs	r3, r2
 8004122:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004124:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <HAL_RCC_OscConfig+0x4cc>)
 8004126:	2201      	movs	r2, #1
 8004128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412a:	f7fd ffb9 	bl	80020a0 <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004132:	f7fd ffb5 	bl	80020a0 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e03d      	b.n	80041c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004144:	4b11      	ldr	r3, [pc, #68]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0f0      	beq.n	8004132 <HAL_RCC_OscConfig+0x46a>
 8004150:	e035      	b.n	80041be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004152:	4b10      	ldr	r3, [pc, #64]	; (8004194 <HAL_RCC_OscConfig+0x4cc>)
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fd ffa2 	bl	80020a0 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004160:	f7fd ff9e 	bl	80020a0 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e026      	b.n	80041c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004172:	4b06      	ldr	r3, [pc, #24]	; (800418c <HAL_RCC_OscConfig+0x4c4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0x498>
 800417e:	e01e      	b.n	80041be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d107      	bne.n	8004198 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e019      	b.n	80041c0 <HAL_RCC_OscConfig+0x4f8>
 800418c:	40021000 	.word	0x40021000
 8004190:	40007000 	.word	0x40007000
 8004194:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004198:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <HAL_RCC_OscConfig+0x500>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d106      	bne.n	80041ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d001      	beq.n	80041be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40021000 	.word	0x40021000

080041cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e0d0      	b.n	8004382 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041e0:	4b6a      	ldr	r3, [pc, #424]	; (800438c <HAL_RCC_ClockConfig+0x1c0>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d910      	bls.n	8004210 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b67      	ldr	r3, [pc, #412]	; (800438c <HAL_RCC_ClockConfig+0x1c0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 0207 	bic.w	r2, r3, #7
 80041f6:	4965      	ldr	r1, [pc, #404]	; (800438c <HAL_RCC_ClockConfig+0x1c0>)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fe:	4b63      	ldr	r3, [pc, #396]	; (800438c <HAL_RCC_ClockConfig+0x1c0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d001      	beq.n	8004210 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e0b8      	b.n	8004382 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d020      	beq.n	800425e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d005      	beq.n	8004234 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004228:	4b59      	ldr	r3, [pc, #356]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	4a58      	ldr	r2, [pc, #352]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 800422e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004232:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004240:	4b53      	ldr	r3, [pc, #332]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	4a52      	ldr	r2, [pc, #328]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 8004246:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800424a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800424c:	4b50      	ldr	r3, [pc, #320]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	494d      	ldr	r1, [pc, #308]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 800425a:	4313      	orrs	r3, r2
 800425c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d040      	beq.n	80042ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d107      	bne.n	8004282 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004272:	4b47      	ldr	r3, [pc, #284]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d115      	bne.n	80042aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e07f      	b.n	8004382 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d107      	bne.n	800429a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428a:	4b41      	ldr	r3, [pc, #260]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d109      	bne.n	80042aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e073      	b.n	8004382 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429a:	4b3d      	ldr	r3, [pc, #244]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e06b      	b.n	8004382 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042aa:	4b39      	ldr	r3, [pc, #228]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f023 0203 	bic.w	r2, r3, #3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	4936      	ldr	r1, [pc, #216]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042bc:	f7fd fef0 	bl	80020a0 <HAL_GetTick>
 80042c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c2:	e00a      	b.n	80042da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c4:	f7fd feec 	bl	80020a0 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e053      	b.n	8004382 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042da:	4b2d      	ldr	r3, [pc, #180]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f003 020c 	and.w	r2, r3, #12
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d1eb      	bne.n	80042c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042ec:	4b27      	ldr	r3, [pc, #156]	; (800438c <HAL_RCC_ClockConfig+0x1c0>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d210      	bcs.n	800431c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fa:	4b24      	ldr	r3, [pc, #144]	; (800438c <HAL_RCC_ClockConfig+0x1c0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f023 0207 	bic.w	r2, r3, #7
 8004302:	4922      	ldr	r1, [pc, #136]	; (800438c <HAL_RCC_ClockConfig+0x1c0>)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	4313      	orrs	r3, r2
 8004308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800430a:	4b20      	ldr	r3, [pc, #128]	; (800438c <HAL_RCC_ClockConfig+0x1c0>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d001      	beq.n	800431c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e032      	b.n	8004382 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d008      	beq.n	800433a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004328:	4b19      	ldr	r3, [pc, #100]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4916      	ldr	r1, [pc, #88]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 8004336:	4313      	orrs	r3, r2
 8004338:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d009      	beq.n	800435a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004346:	4b12      	ldr	r3, [pc, #72]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	490e      	ldr	r1, [pc, #56]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 8004356:	4313      	orrs	r3, r2
 8004358:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800435a:	f000 f821 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 800435e:	4602      	mov	r2, r0
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	091b      	lsrs	r3, r3, #4
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	490a      	ldr	r1, [pc, #40]	; (8004394 <HAL_RCC_ClockConfig+0x1c8>)
 800436c:	5ccb      	ldrb	r3, [r1, r3]
 800436e:	fa22 f303 	lsr.w	r3, r2, r3
 8004372:	4a09      	ldr	r2, [pc, #36]	; (8004398 <HAL_RCC_ClockConfig+0x1cc>)
 8004374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004376:	4b09      	ldr	r3, [pc, #36]	; (800439c <HAL_RCC_ClockConfig+0x1d0>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f7fd fe4e 	bl	800201c <HAL_InitTick>

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40022000 	.word	0x40022000
 8004390:	40021000 	.word	0x40021000
 8004394:	08005628 	.word	0x08005628
 8004398:	20000014 	.word	0x20000014
 800439c:	20000018 	.word	0x20000018

080043a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	2300      	movs	r3, #0
 80043ac:	60bb      	str	r3, [r7, #8]
 80043ae:	2300      	movs	r3, #0
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	2300      	movs	r3, #0
 80043b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043ba:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <HAL_RCC_GetSysClockFreq+0x94>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f003 030c 	and.w	r3, r3, #12
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d002      	beq.n	80043d0 <HAL_RCC_GetSysClockFreq+0x30>
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	d003      	beq.n	80043d6 <HAL_RCC_GetSysClockFreq+0x36>
 80043ce:	e027      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043d0:	4b19      	ldr	r3, [pc, #100]	; (8004438 <HAL_RCC_GetSysClockFreq+0x98>)
 80043d2:	613b      	str	r3, [r7, #16]
      break;
 80043d4:	e027      	b.n	8004426 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	0c9b      	lsrs	r3, r3, #18
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	4a17      	ldr	r2, [pc, #92]	; (800443c <HAL_RCC_GetSysClockFreq+0x9c>)
 80043e0:	5cd3      	ldrb	r3, [r2, r3]
 80043e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d010      	beq.n	8004410 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043ee:	4b11      	ldr	r3, [pc, #68]	; (8004434 <HAL_RCC_GetSysClockFreq+0x94>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	0c5b      	lsrs	r3, r3, #17
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	4a11      	ldr	r2, [pc, #68]	; (8004440 <HAL_RCC_GetSysClockFreq+0xa0>)
 80043fa:	5cd3      	ldrb	r3, [r2, r3]
 80043fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a0d      	ldr	r2, [pc, #52]	; (8004438 <HAL_RCC_GetSysClockFreq+0x98>)
 8004402:	fb03 f202 	mul.w	r2, r3, r2
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	fbb2 f3f3 	udiv	r3, r2, r3
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	e004      	b.n	800441a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a0c      	ldr	r2, [pc, #48]	; (8004444 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004414:	fb02 f303 	mul.w	r3, r2, r3
 8004418:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	613b      	str	r3, [r7, #16]
      break;
 800441e:	e002      	b.n	8004426 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004420:	4b05      	ldr	r3, [pc, #20]	; (8004438 <HAL_RCC_GetSysClockFreq+0x98>)
 8004422:	613b      	str	r3, [r7, #16]
      break;
 8004424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004426:	693b      	ldr	r3, [r7, #16]
}
 8004428:	4618      	mov	r0, r3
 800442a:	371c      	adds	r7, #28
 800442c:	46bd      	mov	sp, r7
 800442e:	bc80      	pop	{r7}
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40021000 	.word	0x40021000
 8004438:	007a1200 	.word	0x007a1200
 800443c:	08005640 	.word	0x08005640
 8004440:	08005650 	.word	0x08005650
 8004444:	003d0900 	.word	0x003d0900

08004448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800444c:	4b02      	ldr	r3, [pc, #8]	; (8004458 <HAL_RCC_GetHCLKFreq+0x10>)
 800444e:	681b      	ldr	r3, [r3, #0]
}
 8004450:	4618      	mov	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr
 8004458:	20000014 	.word	0x20000014

0800445c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004460:	f7ff fff2 	bl	8004448 <HAL_RCC_GetHCLKFreq>
 8004464:	4602      	mov	r2, r0
 8004466:	4b05      	ldr	r3, [pc, #20]	; (800447c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	0adb      	lsrs	r3, r3, #11
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	4903      	ldr	r1, [pc, #12]	; (8004480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004472:	5ccb      	ldrb	r3, [r1, r3]
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40021000 	.word	0x40021000
 8004480:	08005638 	.word	0x08005638

08004484 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800448c:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <RCC_Delay+0x34>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0a      	ldr	r2, [pc, #40]	; (80044bc <RCC_Delay+0x38>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	0a5b      	lsrs	r3, r3, #9
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044a0:	bf00      	nop
  }
  while (Delay --);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1e5a      	subs	r2, r3, #1
 80044a6:	60fa      	str	r2, [r7, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f9      	bne.n	80044a0 <RCC_Delay+0x1c>
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr
 80044b8:	20000014 	.word	0x20000014
 80044bc:	10624dd3 	.word	0x10624dd3

080044c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d07d      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80044dc:	2300      	movs	r3, #0
 80044de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e0:	4b4f      	ldr	r3, [pc, #316]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10d      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ec:	4b4c      	ldr	r3, [pc, #304]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	4a4b      	ldr	r2, [pc, #300]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f6:	61d3      	str	r3, [r2, #28]
 80044f8:	4b49      	ldr	r3, [pc, #292]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004504:	2301      	movs	r3, #1
 8004506:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004508:	4b46      	ldr	r3, [pc, #280]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004510:	2b00      	cmp	r3, #0
 8004512:	d118      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004514:	4b43      	ldr	r3, [pc, #268]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a42      	ldr	r2, [pc, #264]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800451a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800451e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004520:	f7fd fdbe 	bl	80020a0 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004526:	e008      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004528:	f7fd fdba 	bl	80020a0 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b64      	cmp	r3, #100	; 0x64
 8004534:	d901      	bls.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e06d      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453a:	4b3a      	ldr	r3, [pc, #232]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f0      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004546:	4b36      	ldr	r3, [pc, #216]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d02e      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	429a      	cmp	r2, r3
 8004562:	d027      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004564:	4b2e      	ldr	r3, [pc, #184]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800456e:	4b2e      	ldr	r3, [pc, #184]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004570:	2201      	movs	r2, #1
 8004572:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004574:	4b2c      	ldr	r3, [pc, #176]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800457a:	4a29      	ldr	r2, [pc, #164]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d014      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458a:	f7fd fd89 	bl	80020a0 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004590:	e00a      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004592:	f7fd fd85 	bl	80020a0 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e036      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a8:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0ee      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045b4:	4b1a      	ldr	r3, [pc, #104]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	4917      	ldr	r1, [pc, #92]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045c6:	7dfb      	ldrb	r3, [r7, #23]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d105      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045cc:	4b14      	ldr	r3, [pc, #80]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	4a13      	ldr	r2, [pc, #76]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d008      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045e4:	4b0e      	ldr	r3, [pc, #56]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	490b      	ldr	r1, [pc, #44]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d008      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004602:	4b07      	ldr	r3, [pc, #28]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	4904      	ldr	r1, [pc, #16]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004610:	4313      	orrs	r3, r2
 8004612:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40021000 	.word	0x40021000
 8004624:	40007000 	.word	0x40007000
 8004628:	42420440 	.word	0x42420440

0800462c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b088      	sub	sp, #32
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	2300      	movs	r3, #0
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	2300      	movs	r3, #0
 800463e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	2300      	movs	r3, #0
 8004646:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b10      	cmp	r3, #16
 800464c:	d00a      	beq.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b10      	cmp	r3, #16
 8004652:	f200 808a 	bhi.w	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d045      	beq.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d075      	beq.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004662:	e082      	b.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004664:	4b46      	ldr	r3, [pc, #280]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800466a:	4b45      	ldr	r3, [pc, #276]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d07b      	beq.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	0c9b      	lsrs	r3, r3, #18
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	4a41      	ldr	r2, [pc, #260]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004680:	5cd3      	ldrb	r3, [r2, r3]
 8004682:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d015      	beq.n	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800468e:	4b3c      	ldr	r3, [pc, #240]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	0c5b      	lsrs	r3, r3, #17
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	4a3b      	ldr	r2, [pc, #236]	; (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800469a:	5cd3      	ldrb	r3, [r2, r3]
 800469c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00d      	beq.n	80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80046a8:	4a38      	ldr	r2, [pc, #224]	; (800478c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	61fb      	str	r3, [r7, #28]
 80046b8:	e004      	b.n	80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	4a34      	ldr	r2, [pc, #208]	; (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80046be:	fb02 f303 	mul.w	r3, r2, r3
 80046c2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80046c4:	4b2e      	ldr	r3, [pc, #184]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d0:	d102      	bne.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	61bb      	str	r3, [r7, #24]
      break;
 80046d6:	e04a      	b.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	4a2d      	ldr	r2, [pc, #180]	; (8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	085b      	lsrs	r3, r3, #1
 80046e4:	61bb      	str	r3, [r7, #24]
      break;
 80046e6:	e042      	b.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80046e8:	4b25      	ldr	r3, [pc, #148]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046f8:	d108      	bne.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004704:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	e01f      	b.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004716:	d109      	bne.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004718:	4b19      	ldr	r3, [pc, #100]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004724:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	e00f      	b.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004736:	d11c      	bne.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004738:	4b11      	ldr	r3, [pc, #68]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d016      	beq.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004744:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004748:	61bb      	str	r3, [r7, #24]
      break;
 800474a:	e012      	b.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800474c:	e011      	b.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800474e:	f7ff fe85 	bl	800445c <HAL_RCC_GetPCLK2Freq>
 8004752:	4602      	mov	r2, r0
 8004754:	4b0a      	ldr	r3, [pc, #40]	; (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	0b9b      	lsrs	r3, r3, #14
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	3301      	adds	r3, #1
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	fbb2 f3f3 	udiv	r3, r2, r3
 8004766:	61bb      	str	r3, [r7, #24]
      break;
 8004768:	e004      	b.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800476a:	bf00      	nop
 800476c:	e002      	b.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800476e:	bf00      	nop
 8004770:	e000      	b.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004772:	bf00      	nop
    }
  }
  return (frequency);
 8004774:	69bb      	ldr	r3, [r7, #24]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3720      	adds	r7, #32
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	40021000 	.word	0x40021000
 8004784:	08005654 	.word	0x08005654
 8004788:	08005664 	.word	0x08005664
 800478c:	007a1200 	.word	0x007a1200
 8004790:	003d0900 	.word	0x003d0900
 8004794:	aaaaaaab 	.word	0xaaaaaaab

08004798 <memset>:
 8004798:	4603      	mov	r3, r0
 800479a:	4402      	add	r2, r0
 800479c:	4293      	cmp	r3, r2
 800479e:	d100      	bne.n	80047a2 <memset+0xa>
 80047a0:	4770      	bx	lr
 80047a2:	f803 1b01 	strb.w	r1, [r3], #1
 80047a6:	e7f9      	b.n	800479c <memset+0x4>

080047a8 <__errno>:
 80047a8:	4b01      	ldr	r3, [pc, #4]	; (80047b0 <__errno+0x8>)
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	2000006c 	.word	0x2000006c

080047b4 <__libc_init_array>:
 80047b4:	b570      	push	{r4, r5, r6, lr}
 80047b6:	2600      	movs	r6, #0
 80047b8:	4d0c      	ldr	r5, [pc, #48]	; (80047ec <__libc_init_array+0x38>)
 80047ba:	4c0d      	ldr	r4, [pc, #52]	; (80047f0 <__libc_init_array+0x3c>)
 80047bc:	1b64      	subs	r4, r4, r5
 80047be:	10a4      	asrs	r4, r4, #2
 80047c0:	42a6      	cmp	r6, r4
 80047c2:	d109      	bne.n	80047d8 <__libc_init_array+0x24>
 80047c4:	f000 ff22 	bl	800560c <_init>
 80047c8:	2600      	movs	r6, #0
 80047ca:	4d0a      	ldr	r5, [pc, #40]	; (80047f4 <__libc_init_array+0x40>)
 80047cc:	4c0a      	ldr	r4, [pc, #40]	; (80047f8 <__libc_init_array+0x44>)
 80047ce:	1b64      	subs	r4, r4, r5
 80047d0:	10a4      	asrs	r4, r4, #2
 80047d2:	42a6      	cmp	r6, r4
 80047d4:	d105      	bne.n	80047e2 <__libc_init_array+0x2e>
 80047d6:	bd70      	pop	{r4, r5, r6, pc}
 80047d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047dc:	4798      	blx	r3
 80047de:	3601      	adds	r6, #1
 80047e0:	e7ee      	b.n	80047c0 <__libc_init_array+0xc>
 80047e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e6:	4798      	blx	r3
 80047e8:	3601      	adds	r6, #1
 80047ea:	e7f2      	b.n	80047d2 <__libc_init_array+0x1e>
 80047ec:	08005698 	.word	0x08005698
 80047f0:	08005698 	.word	0x08005698
 80047f4:	08005698 	.word	0x08005698
 80047f8:	0800569c 	.word	0x0800569c

080047fc <pow>:
 80047fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004800:	4614      	mov	r4, r2
 8004802:	461d      	mov	r5, r3
 8004804:	4680      	mov	r8, r0
 8004806:	4689      	mov	r9, r1
 8004808:	f000 f866 	bl	80048d8 <__ieee754_pow>
 800480c:	4622      	mov	r2, r4
 800480e:	4606      	mov	r6, r0
 8004810:	460f      	mov	r7, r1
 8004812:	462b      	mov	r3, r5
 8004814:	4620      	mov	r0, r4
 8004816:	4629      	mov	r1, r5
 8004818:	f7fc f8f0 	bl	80009fc <__aeabi_dcmpun>
 800481c:	bbc8      	cbnz	r0, 8004892 <pow+0x96>
 800481e:	2200      	movs	r2, #0
 8004820:	2300      	movs	r3, #0
 8004822:	4640      	mov	r0, r8
 8004824:	4649      	mov	r1, r9
 8004826:	f7fc f8b7 	bl	8000998 <__aeabi_dcmpeq>
 800482a:	b1b8      	cbz	r0, 800485c <pow+0x60>
 800482c:	2200      	movs	r2, #0
 800482e:	2300      	movs	r3, #0
 8004830:	4620      	mov	r0, r4
 8004832:	4629      	mov	r1, r5
 8004834:	f7fc f8b0 	bl	8000998 <__aeabi_dcmpeq>
 8004838:	2800      	cmp	r0, #0
 800483a:	d141      	bne.n	80048c0 <pow+0xc4>
 800483c:	4620      	mov	r0, r4
 800483e:	4629      	mov	r1, r5
 8004840:	f000 f844 	bl	80048cc <finite>
 8004844:	b328      	cbz	r0, 8004892 <pow+0x96>
 8004846:	2200      	movs	r2, #0
 8004848:	2300      	movs	r3, #0
 800484a:	4620      	mov	r0, r4
 800484c:	4629      	mov	r1, r5
 800484e:	f7fc f8ad 	bl	80009ac <__aeabi_dcmplt>
 8004852:	b1f0      	cbz	r0, 8004892 <pow+0x96>
 8004854:	f7ff ffa8 	bl	80047a8 <__errno>
 8004858:	2322      	movs	r3, #34	; 0x22
 800485a:	e019      	b.n	8004890 <pow+0x94>
 800485c:	4630      	mov	r0, r6
 800485e:	4639      	mov	r1, r7
 8004860:	f000 f834 	bl	80048cc <finite>
 8004864:	b9c8      	cbnz	r0, 800489a <pow+0x9e>
 8004866:	4640      	mov	r0, r8
 8004868:	4649      	mov	r1, r9
 800486a:	f000 f82f 	bl	80048cc <finite>
 800486e:	b1a0      	cbz	r0, 800489a <pow+0x9e>
 8004870:	4620      	mov	r0, r4
 8004872:	4629      	mov	r1, r5
 8004874:	f000 f82a 	bl	80048cc <finite>
 8004878:	b178      	cbz	r0, 800489a <pow+0x9e>
 800487a:	4632      	mov	r2, r6
 800487c:	463b      	mov	r3, r7
 800487e:	4630      	mov	r0, r6
 8004880:	4639      	mov	r1, r7
 8004882:	f7fc f8bb 	bl	80009fc <__aeabi_dcmpun>
 8004886:	2800      	cmp	r0, #0
 8004888:	d0e4      	beq.n	8004854 <pow+0x58>
 800488a:	f7ff ff8d 	bl	80047a8 <__errno>
 800488e:	2321      	movs	r3, #33	; 0x21
 8004890:	6003      	str	r3, [r0, #0]
 8004892:	4630      	mov	r0, r6
 8004894:	4639      	mov	r1, r7
 8004896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800489a:	2200      	movs	r2, #0
 800489c:	2300      	movs	r3, #0
 800489e:	4630      	mov	r0, r6
 80048a0:	4639      	mov	r1, r7
 80048a2:	f7fc f879 	bl	8000998 <__aeabi_dcmpeq>
 80048a6:	2800      	cmp	r0, #0
 80048a8:	d0f3      	beq.n	8004892 <pow+0x96>
 80048aa:	4640      	mov	r0, r8
 80048ac:	4649      	mov	r1, r9
 80048ae:	f000 f80d 	bl	80048cc <finite>
 80048b2:	2800      	cmp	r0, #0
 80048b4:	d0ed      	beq.n	8004892 <pow+0x96>
 80048b6:	4620      	mov	r0, r4
 80048b8:	4629      	mov	r1, r5
 80048ba:	f000 f807 	bl	80048cc <finite>
 80048be:	e7c8      	b.n	8004852 <pow+0x56>
 80048c0:	2600      	movs	r6, #0
 80048c2:	4f01      	ldr	r7, [pc, #4]	; (80048c8 <pow+0xcc>)
 80048c4:	e7e5      	b.n	8004892 <pow+0x96>
 80048c6:	bf00      	nop
 80048c8:	3ff00000 	.word	0x3ff00000

080048cc <finite>:
 80048cc:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80048d0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80048d4:	0fc0      	lsrs	r0, r0, #31
 80048d6:	4770      	bx	lr

080048d8 <__ieee754_pow>:
 80048d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048dc:	b093      	sub	sp, #76	; 0x4c
 80048de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048e2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80048e6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80048ea:	4689      	mov	r9, r1
 80048ec:	ea56 0102 	orrs.w	r1, r6, r2
 80048f0:	4680      	mov	r8, r0
 80048f2:	d111      	bne.n	8004918 <__ieee754_pow+0x40>
 80048f4:	1803      	adds	r3, r0, r0
 80048f6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80048fa:	4152      	adcs	r2, r2
 80048fc:	4299      	cmp	r1, r3
 80048fe:	4b82      	ldr	r3, [pc, #520]	; (8004b08 <__ieee754_pow+0x230>)
 8004900:	4193      	sbcs	r3, r2
 8004902:	f080 84ba 	bcs.w	800527a <__ieee754_pow+0x9a2>
 8004906:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800490a:	4640      	mov	r0, r8
 800490c:	4649      	mov	r1, r9
 800490e:	f7fb fc25 	bl	800015c <__adddf3>
 8004912:	4683      	mov	fp, r0
 8004914:	468c      	mov	ip, r1
 8004916:	e06f      	b.n	80049f8 <__ieee754_pow+0x120>
 8004918:	4b7c      	ldr	r3, [pc, #496]	; (8004b0c <__ieee754_pow+0x234>)
 800491a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800491e:	429c      	cmp	r4, r3
 8004920:	464d      	mov	r5, r9
 8004922:	4682      	mov	sl, r0
 8004924:	dc06      	bgt.n	8004934 <__ieee754_pow+0x5c>
 8004926:	d101      	bne.n	800492c <__ieee754_pow+0x54>
 8004928:	2800      	cmp	r0, #0
 800492a:	d1ec      	bne.n	8004906 <__ieee754_pow+0x2e>
 800492c:	429e      	cmp	r6, r3
 800492e:	dc01      	bgt.n	8004934 <__ieee754_pow+0x5c>
 8004930:	d10f      	bne.n	8004952 <__ieee754_pow+0x7a>
 8004932:	b172      	cbz	r2, 8004952 <__ieee754_pow+0x7a>
 8004934:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004938:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800493c:	ea55 050a 	orrs.w	r5, r5, sl
 8004940:	d1e1      	bne.n	8004906 <__ieee754_pow+0x2e>
 8004942:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004946:	18db      	adds	r3, r3, r3
 8004948:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800494c:	4152      	adcs	r2, r2
 800494e:	429d      	cmp	r5, r3
 8004950:	e7d5      	b.n	80048fe <__ieee754_pow+0x26>
 8004952:	2d00      	cmp	r5, #0
 8004954:	da39      	bge.n	80049ca <__ieee754_pow+0xf2>
 8004956:	4b6e      	ldr	r3, [pc, #440]	; (8004b10 <__ieee754_pow+0x238>)
 8004958:	429e      	cmp	r6, r3
 800495a:	dc52      	bgt.n	8004a02 <__ieee754_pow+0x12a>
 800495c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004960:	429e      	cmp	r6, r3
 8004962:	f340 849d 	ble.w	80052a0 <__ieee754_pow+0x9c8>
 8004966:	1533      	asrs	r3, r6, #20
 8004968:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800496c:	2b14      	cmp	r3, #20
 800496e:	dd0f      	ble.n	8004990 <__ieee754_pow+0xb8>
 8004970:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004974:	fa22 f103 	lsr.w	r1, r2, r3
 8004978:	fa01 f303 	lsl.w	r3, r1, r3
 800497c:	4293      	cmp	r3, r2
 800497e:	f040 848f 	bne.w	80052a0 <__ieee754_pow+0x9c8>
 8004982:	f001 0101 	and.w	r1, r1, #1
 8004986:	f1c1 0302 	rsb	r3, r1, #2
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	b182      	cbz	r2, 80049b0 <__ieee754_pow+0xd8>
 800498e:	e05d      	b.n	8004a4c <__ieee754_pow+0x174>
 8004990:	2a00      	cmp	r2, #0
 8004992:	d159      	bne.n	8004a48 <__ieee754_pow+0x170>
 8004994:	f1c3 0314 	rsb	r3, r3, #20
 8004998:	fa46 f103 	asr.w	r1, r6, r3
 800499c:	fa01 f303 	lsl.w	r3, r1, r3
 80049a0:	42b3      	cmp	r3, r6
 80049a2:	f040 847a 	bne.w	800529a <__ieee754_pow+0x9c2>
 80049a6:	f001 0101 	and.w	r1, r1, #1
 80049aa:	f1c1 0302 	rsb	r3, r1, #2
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	4b58      	ldr	r3, [pc, #352]	; (8004b14 <__ieee754_pow+0x23c>)
 80049b2:	429e      	cmp	r6, r3
 80049b4:	d132      	bne.n	8004a1c <__ieee754_pow+0x144>
 80049b6:	2f00      	cmp	r7, #0
 80049b8:	f280 846b 	bge.w	8005292 <__ieee754_pow+0x9ba>
 80049bc:	4642      	mov	r2, r8
 80049be:	464b      	mov	r3, r9
 80049c0:	2000      	movs	r0, #0
 80049c2:	4954      	ldr	r1, [pc, #336]	; (8004b14 <__ieee754_pow+0x23c>)
 80049c4:	f7fb feaa 	bl	800071c <__aeabi_ddiv>
 80049c8:	e7a3      	b.n	8004912 <__ieee754_pow+0x3a>
 80049ca:	2300      	movs	r3, #0
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	2a00      	cmp	r2, #0
 80049d0:	d13c      	bne.n	8004a4c <__ieee754_pow+0x174>
 80049d2:	4b4e      	ldr	r3, [pc, #312]	; (8004b0c <__ieee754_pow+0x234>)
 80049d4:	429e      	cmp	r6, r3
 80049d6:	d1eb      	bne.n	80049b0 <__ieee754_pow+0xd8>
 80049d8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80049dc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80049e0:	ea53 030a 	orrs.w	r3, r3, sl
 80049e4:	f000 8449 	beq.w	800527a <__ieee754_pow+0x9a2>
 80049e8:	4b4b      	ldr	r3, [pc, #300]	; (8004b18 <__ieee754_pow+0x240>)
 80049ea:	429c      	cmp	r4, r3
 80049ec:	dd0b      	ble.n	8004a06 <__ieee754_pow+0x12e>
 80049ee:	2f00      	cmp	r7, #0
 80049f0:	f2c0 8449 	blt.w	8005286 <__ieee754_pow+0x9ae>
 80049f4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80049f8:	4658      	mov	r0, fp
 80049fa:	4661      	mov	r1, ip
 80049fc:	b013      	add	sp, #76	; 0x4c
 80049fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a02:	2302      	movs	r3, #2
 8004a04:	e7e2      	b.n	80049cc <__ieee754_pow+0xf4>
 8004a06:	2f00      	cmp	r7, #0
 8004a08:	f04f 0b00 	mov.w	fp, #0
 8004a0c:	f04f 0c00 	mov.w	ip, #0
 8004a10:	daf2      	bge.n	80049f8 <__ieee754_pow+0x120>
 8004a12:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8004a16:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8004a1a:	e7ed      	b.n	80049f8 <__ieee754_pow+0x120>
 8004a1c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8004a20:	d106      	bne.n	8004a30 <__ieee754_pow+0x158>
 8004a22:	4642      	mov	r2, r8
 8004a24:	464b      	mov	r3, r9
 8004a26:	4640      	mov	r0, r8
 8004a28:	4649      	mov	r1, r9
 8004a2a:	f7fb fd4d 	bl	80004c8 <__aeabi_dmul>
 8004a2e:	e770      	b.n	8004912 <__ieee754_pow+0x3a>
 8004a30:	4b3a      	ldr	r3, [pc, #232]	; (8004b1c <__ieee754_pow+0x244>)
 8004a32:	429f      	cmp	r7, r3
 8004a34:	d10a      	bne.n	8004a4c <__ieee754_pow+0x174>
 8004a36:	2d00      	cmp	r5, #0
 8004a38:	db08      	blt.n	8004a4c <__ieee754_pow+0x174>
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	4649      	mov	r1, r9
 8004a3e:	b013      	add	sp, #76	; 0x4c
 8004a40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a44:	f000 bd0a 	b.w	800545c <__ieee754_sqrt>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	4640      	mov	r0, r8
 8004a4e:	4649      	mov	r1, r9
 8004a50:	f000 fc58 	bl	8005304 <fabs>
 8004a54:	4683      	mov	fp, r0
 8004a56:	468c      	mov	ip, r1
 8004a58:	f1ba 0f00 	cmp.w	sl, #0
 8004a5c:	d128      	bne.n	8004ab0 <__ieee754_pow+0x1d8>
 8004a5e:	b124      	cbz	r4, 8004a6a <__ieee754_pow+0x192>
 8004a60:	4b2c      	ldr	r3, [pc, #176]	; (8004b14 <__ieee754_pow+0x23c>)
 8004a62:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d122      	bne.n	8004ab0 <__ieee754_pow+0x1d8>
 8004a6a:	2f00      	cmp	r7, #0
 8004a6c:	da07      	bge.n	8004a7e <__ieee754_pow+0x1a6>
 8004a6e:	465a      	mov	r2, fp
 8004a70:	4663      	mov	r3, ip
 8004a72:	2000      	movs	r0, #0
 8004a74:	4927      	ldr	r1, [pc, #156]	; (8004b14 <__ieee754_pow+0x23c>)
 8004a76:	f7fb fe51 	bl	800071c <__aeabi_ddiv>
 8004a7a:	4683      	mov	fp, r0
 8004a7c:	468c      	mov	ip, r1
 8004a7e:	2d00      	cmp	r5, #0
 8004a80:	daba      	bge.n	80049f8 <__ieee754_pow+0x120>
 8004a82:	9b00      	ldr	r3, [sp, #0]
 8004a84:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004a88:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004a8c:	431c      	orrs	r4, r3
 8004a8e:	d108      	bne.n	8004aa2 <__ieee754_pow+0x1ca>
 8004a90:	465a      	mov	r2, fp
 8004a92:	4663      	mov	r3, ip
 8004a94:	4658      	mov	r0, fp
 8004a96:	4661      	mov	r1, ip
 8004a98:	f7fb fb5e 	bl	8000158 <__aeabi_dsub>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	e790      	b.n	80049c4 <__ieee754_pow+0xec>
 8004aa2:	9b00      	ldr	r3, [sp, #0]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d1a7      	bne.n	80049f8 <__ieee754_pow+0x120>
 8004aa8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8004aac:	469c      	mov	ip, r3
 8004aae:	e7a3      	b.n	80049f8 <__ieee754_pow+0x120>
 8004ab0:	0feb      	lsrs	r3, r5, #31
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	930c      	str	r3, [sp, #48]	; 0x30
 8004ab6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ab8:	9b00      	ldr	r3, [sp, #0]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	d104      	bne.n	8004ac8 <__ieee754_pow+0x1f0>
 8004abe:	4642      	mov	r2, r8
 8004ac0:	464b      	mov	r3, r9
 8004ac2:	4640      	mov	r0, r8
 8004ac4:	4649      	mov	r1, r9
 8004ac6:	e7e7      	b.n	8004a98 <__ieee754_pow+0x1c0>
 8004ac8:	4b15      	ldr	r3, [pc, #84]	; (8004b20 <__ieee754_pow+0x248>)
 8004aca:	429e      	cmp	r6, r3
 8004acc:	f340 80f6 	ble.w	8004cbc <__ieee754_pow+0x3e4>
 8004ad0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004ad4:	429e      	cmp	r6, r3
 8004ad6:	4b10      	ldr	r3, [pc, #64]	; (8004b18 <__ieee754_pow+0x240>)
 8004ad8:	dd09      	ble.n	8004aee <__ieee754_pow+0x216>
 8004ada:	429c      	cmp	r4, r3
 8004adc:	dc0c      	bgt.n	8004af8 <__ieee754_pow+0x220>
 8004ade:	2f00      	cmp	r7, #0
 8004ae0:	da0c      	bge.n	8004afc <__ieee754_pow+0x224>
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	b013      	add	sp, #76	; 0x4c
 8004ae6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aea:	f000 bcb2 	b.w	8005452 <__math_oflow>
 8004aee:	429c      	cmp	r4, r3
 8004af0:	dbf5      	blt.n	8004ade <__ieee754_pow+0x206>
 8004af2:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <__ieee754_pow+0x23c>)
 8004af4:	429c      	cmp	r4, r3
 8004af6:	dd15      	ble.n	8004b24 <__ieee754_pow+0x24c>
 8004af8:	2f00      	cmp	r7, #0
 8004afa:	dcf2      	bgt.n	8004ae2 <__ieee754_pow+0x20a>
 8004afc:	2000      	movs	r0, #0
 8004afe:	b013      	add	sp, #76	; 0x4c
 8004b00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b04:	f000 bca0 	b.w	8005448 <__math_uflow>
 8004b08:	fff00000 	.word	0xfff00000
 8004b0c:	7ff00000 	.word	0x7ff00000
 8004b10:	433fffff 	.word	0x433fffff
 8004b14:	3ff00000 	.word	0x3ff00000
 8004b18:	3fefffff 	.word	0x3fefffff
 8004b1c:	3fe00000 	.word	0x3fe00000
 8004b20:	41e00000 	.word	0x41e00000
 8004b24:	4661      	mov	r1, ip
 8004b26:	2200      	movs	r2, #0
 8004b28:	4658      	mov	r0, fp
 8004b2a:	4b5f      	ldr	r3, [pc, #380]	; (8004ca8 <__ieee754_pow+0x3d0>)
 8004b2c:	f7fb fb14 	bl	8000158 <__aeabi_dsub>
 8004b30:	a355      	add	r3, pc, #340	; (adr r3, 8004c88 <__ieee754_pow+0x3b0>)
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	4604      	mov	r4, r0
 8004b38:	460d      	mov	r5, r1
 8004b3a:	f7fb fcc5 	bl	80004c8 <__aeabi_dmul>
 8004b3e:	a354      	add	r3, pc, #336	; (adr r3, 8004c90 <__ieee754_pow+0x3b8>)
 8004b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b44:	4606      	mov	r6, r0
 8004b46:	460f      	mov	r7, r1
 8004b48:	4620      	mov	r0, r4
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	f7fb fcbc 	bl	80004c8 <__aeabi_dmul>
 8004b50:	2200      	movs	r2, #0
 8004b52:	4682      	mov	sl, r0
 8004b54:	468b      	mov	fp, r1
 8004b56:	4620      	mov	r0, r4
 8004b58:	4629      	mov	r1, r5
 8004b5a:	4b54      	ldr	r3, [pc, #336]	; (8004cac <__ieee754_pow+0x3d4>)
 8004b5c:	f7fb fcb4 	bl	80004c8 <__aeabi_dmul>
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	a14c      	add	r1, pc, #304	; (adr r1, 8004c98 <__ieee754_pow+0x3c0>)
 8004b66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b6a:	f7fb faf5 	bl	8000158 <__aeabi_dsub>
 8004b6e:	4622      	mov	r2, r4
 8004b70:	462b      	mov	r3, r5
 8004b72:	f7fb fca9 	bl	80004c8 <__aeabi_dmul>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	494c      	ldr	r1, [pc, #304]	; (8004cb0 <__ieee754_pow+0x3d8>)
 8004b7e:	f7fb faeb 	bl	8000158 <__aeabi_dsub>
 8004b82:	4622      	mov	r2, r4
 8004b84:	462b      	mov	r3, r5
 8004b86:	4680      	mov	r8, r0
 8004b88:	4689      	mov	r9, r1
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	4629      	mov	r1, r5
 8004b8e:	f7fb fc9b 	bl	80004c8 <__aeabi_dmul>
 8004b92:	4602      	mov	r2, r0
 8004b94:	460b      	mov	r3, r1
 8004b96:	4640      	mov	r0, r8
 8004b98:	4649      	mov	r1, r9
 8004b9a:	f7fb fc95 	bl	80004c8 <__aeabi_dmul>
 8004b9e:	a340      	add	r3, pc, #256	; (adr r3, 8004ca0 <__ieee754_pow+0x3c8>)
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	f7fb fc90 	bl	80004c8 <__aeabi_dmul>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4650      	mov	r0, sl
 8004bae:	4659      	mov	r1, fp
 8004bb0:	f7fb fad2 	bl	8000158 <__aeabi_dsub>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4604      	mov	r4, r0
 8004bba:	460d      	mov	r5, r1
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	4639      	mov	r1, r7
 8004bc0:	f7fb facc 	bl	800015c <__adddf3>
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	4632      	mov	r2, r6
 8004bc8:	463b      	mov	r3, r7
 8004bca:	4682      	mov	sl, r0
 8004bcc:	468b      	mov	fp, r1
 8004bce:	f7fb fac3 	bl	8000158 <__aeabi_dsub>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	4629      	mov	r1, r5
 8004bda:	f7fb fabd 	bl	8000158 <__aeabi_dsub>
 8004bde:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004be2:	9b00      	ldr	r3, [sp, #0]
 8004be4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004be6:	3b01      	subs	r3, #1
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f04f 0600 	mov.w	r6, #0
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	bf0c      	ite	eq
 8004bf4:	4b2f      	ldreq	r3, [pc, #188]	; (8004cb4 <__ieee754_pow+0x3dc>)
 8004bf6:	4b2c      	ldrne	r3, [pc, #176]	; (8004ca8 <__ieee754_pow+0x3d0>)
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	460d      	mov	r5, r1
 8004bfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c00:	e9cd 2300 	strd	r2, r3, [sp]
 8004c04:	4632      	mov	r2, r6
 8004c06:	463b      	mov	r3, r7
 8004c08:	f7fb faa6 	bl	8000158 <__aeabi_dsub>
 8004c0c:	4652      	mov	r2, sl
 8004c0e:	465b      	mov	r3, fp
 8004c10:	f7fb fc5a 	bl	80004c8 <__aeabi_dmul>
 8004c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c18:	4680      	mov	r8, r0
 8004c1a:	4689      	mov	r9, r1
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	4629      	mov	r1, r5
 8004c20:	f7fb fc52 	bl	80004c8 <__aeabi_dmul>
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4640      	mov	r0, r8
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	f7fb fa96 	bl	800015c <__adddf3>
 8004c30:	4632      	mov	r2, r6
 8004c32:	463b      	mov	r3, r7
 8004c34:	4680      	mov	r8, r0
 8004c36:	4689      	mov	r9, r1
 8004c38:	4650      	mov	r0, sl
 8004c3a:	4659      	mov	r1, fp
 8004c3c:	f7fb fc44 	bl	80004c8 <__aeabi_dmul>
 8004c40:	4604      	mov	r4, r0
 8004c42:	460d      	mov	r5, r1
 8004c44:	460b      	mov	r3, r1
 8004c46:	4602      	mov	r2, r0
 8004c48:	4649      	mov	r1, r9
 8004c4a:	4640      	mov	r0, r8
 8004c4c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004c50:	f7fb fa84 	bl	800015c <__adddf3>
 8004c54:	4b18      	ldr	r3, [pc, #96]	; (8004cb8 <__ieee754_pow+0x3e0>)
 8004c56:	4682      	mov	sl, r0
 8004c58:	4299      	cmp	r1, r3
 8004c5a:	460f      	mov	r7, r1
 8004c5c:	460e      	mov	r6, r1
 8004c5e:	f340 82e7 	ble.w	8005230 <__ieee754_pow+0x958>
 8004c62:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004c66:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004c6a:	4303      	orrs	r3, r0
 8004c6c:	f000 81e2 	beq.w	8005034 <__ieee754_pow+0x75c>
 8004c70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c74:	2200      	movs	r2, #0
 8004c76:	2300      	movs	r3, #0
 8004c78:	f7fb fe98 	bl	80009ac <__aeabi_dcmplt>
 8004c7c:	3800      	subs	r0, #0
 8004c7e:	bf18      	it	ne
 8004c80:	2001      	movne	r0, #1
 8004c82:	e72f      	b.n	8004ae4 <__ieee754_pow+0x20c>
 8004c84:	f3af 8000 	nop.w
 8004c88:	60000000 	.word	0x60000000
 8004c8c:	3ff71547 	.word	0x3ff71547
 8004c90:	f85ddf44 	.word	0xf85ddf44
 8004c94:	3e54ae0b 	.word	0x3e54ae0b
 8004c98:	55555555 	.word	0x55555555
 8004c9c:	3fd55555 	.word	0x3fd55555
 8004ca0:	652b82fe 	.word	0x652b82fe
 8004ca4:	3ff71547 	.word	0x3ff71547
 8004ca8:	3ff00000 	.word	0x3ff00000
 8004cac:	3fd00000 	.word	0x3fd00000
 8004cb0:	3fe00000 	.word	0x3fe00000
 8004cb4:	bff00000 	.word	0xbff00000
 8004cb8:	408fffff 	.word	0x408fffff
 8004cbc:	4bd4      	ldr	r3, [pc, #848]	; (8005010 <__ieee754_pow+0x738>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	402b      	ands	r3, r5
 8004cc2:	b943      	cbnz	r3, 8004cd6 <__ieee754_pow+0x3fe>
 8004cc4:	4658      	mov	r0, fp
 8004cc6:	4661      	mov	r1, ip
 8004cc8:	4bd2      	ldr	r3, [pc, #840]	; (8005014 <__ieee754_pow+0x73c>)
 8004cca:	f7fb fbfd 	bl	80004c8 <__aeabi_dmul>
 8004cce:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004cd2:	4683      	mov	fp, r0
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	1523      	asrs	r3, r4, #20
 8004cd8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004cdc:	4413      	add	r3, r2
 8004cde:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ce0:	4bcd      	ldr	r3, [pc, #820]	; (8005018 <__ieee754_pow+0x740>)
 8004ce2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004ce6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004cea:	429c      	cmp	r4, r3
 8004cec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004cf0:	dd08      	ble.n	8004d04 <__ieee754_pow+0x42c>
 8004cf2:	4bca      	ldr	r3, [pc, #808]	; (800501c <__ieee754_pow+0x744>)
 8004cf4:	429c      	cmp	r4, r3
 8004cf6:	f340 8164 	ble.w	8004fc2 <__ieee754_pow+0x6ea>
 8004cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cfc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004d00:	3301      	adds	r3, #1
 8004d02:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d04:	2600      	movs	r6, #0
 8004d06:	00f3      	lsls	r3, r6, #3
 8004d08:	930d      	str	r3, [sp, #52]	; 0x34
 8004d0a:	4bc5      	ldr	r3, [pc, #788]	; (8005020 <__ieee754_pow+0x748>)
 8004d0c:	4658      	mov	r0, fp
 8004d0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004d12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d16:	4629      	mov	r1, r5
 8004d18:	461a      	mov	r2, r3
 8004d1a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004d1e:	4623      	mov	r3, r4
 8004d20:	f7fb fa1a 	bl	8000158 <__aeabi_dsub>
 8004d24:	46da      	mov	sl, fp
 8004d26:	462b      	mov	r3, r5
 8004d28:	4652      	mov	r2, sl
 8004d2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004d2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004d32:	f7fb fa13 	bl	800015c <__adddf3>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	49b9      	ldr	r1, [pc, #740]	; (8005024 <__ieee754_pow+0x74c>)
 8004d3e:	f7fb fced 	bl	800071c <__aeabi_ddiv>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d4a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004d4e:	f7fb fbbb 	bl	80004c8 <__aeabi_dmul>
 8004d52:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004d56:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004d5a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	2200      	movs	r2, #0
 8004d62:	46ab      	mov	fp, r5
 8004d64:	106d      	asrs	r5, r5, #1
 8004d66:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004d6a:	9304      	str	r3, [sp, #16]
 8004d6c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004d70:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004d74:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8004d78:	4640      	mov	r0, r8
 8004d7a:	4649      	mov	r1, r9
 8004d7c:	4614      	mov	r4, r2
 8004d7e:	461d      	mov	r5, r3
 8004d80:	f7fb fba2 	bl	80004c8 <__aeabi_dmul>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004d8c:	f7fb f9e4 	bl	8000158 <__aeabi_dsub>
 8004d90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d94:	4606      	mov	r6, r0
 8004d96:	460f      	mov	r7, r1
 8004d98:	4620      	mov	r0, r4
 8004d9a:	4629      	mov	r1, r5
 8004d9c:	f7fb f9dc 	bl	8000158 <__aeabi_dsub>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4650      	mov	r0, sl
 8004da6:	4659      	mov	r1, fp
 8004da8:	f7fb f9d6 	bl	8000158 <__aeabi_dsub>
 8004dac:	4642      	mov	r2, r8
 8004dae:	464b      	mov	r3, r9
 8004db0:	f7fb fb8a 	bl	80004c8 <__aeabi_dmul>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4630      	mov	r0, r6
 8004dba:	4639      	mov	r1, r7
 8004dbc:	f7fb f9cc 	bl	8000158 <__aeabi_dsub>
 8004dc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004dc4:	f7fb fb80 	bl	80004c8 <__aeabi_dmul>
 8004dc8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004dcc:	4682      	mov	sl, r0
 8004dce:	468b      	mov	fp, r1
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	f7fb fb78 	bl	80004c8 <__aeabi_dmul>
 8004dd8:	a37b      	add	r3, pc, #492	; (adr r3, 8004fc8 <__ieee754_pow+0x6f0>)
 8004dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dde:	4604      	mov	r4, r0
 8004de0:	460d      	mov	r5, r1
 8004de2:	f7fb fb71 	bl	80004c8 <__aeabi_dmul>
 8004de6:	a37a      	add	r3, pc, #488	; (adr r3, 8004fd0 <__ieee754_pow+0x6f8>)
 8004de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dec:	f7fb f9b6 	bl	800015c <__adddf3>
 8004df0:	4622      	mov	r2, r4
 8004df2:	462b      	mov	r3, r5
 8004df4:	f7fb fb68 	bl	80004c8 <__aeabi_dmul>
 8004df8:	a377      	add	r3, pc, #476	; (adr r3, 8004fd8 <__ieee754_pow+0x700>)
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	f7fb f9ad 	bl	800015c <__adddf3>
 8004e02:	4622      	mov	r2, r4
 8004e04:	462b      	mov	r3, r5
 8004e06:	f7fb fb5f 	bl	80004c8 <__aeabi_dmul>
 8004e0a:	a375      	add	r3, pc, #468	; (adr r3, 8004fe0 <__ieee754_pow+0x708>)
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	f7fb f9a4 	bl	800015c <__adddf3>
 8004e14:	4622      	mov	r2, r4
 8004e16:	462b      	mov	r3, r5
 8004e18:	f7fb fb56 	bl	80004c8 <__aeabi_dmul>
 8004e1c:	a372      	add	r3, pc, #456	; (adr r3, 8004fe8 <__ieee754_pow+0x710>)
 8004e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e22:	f7fb f99b 	bl	800015c <__adddf3>
 8004e26:	4622      	mov	r2, r4
 8004e28:	462b      	mov	r3, r5
 8004e2a:	f7fb fb4d 	bl	80004c8 <__aeabi_dmul>
 8004e2e:	a370      	add	r3, pc, #448	; (adr r3, 8004ff0 <__ieee754_pow+0x718>)
 8004e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e34:	f7fb f992 	bl	800015c <__adddf3>
 8004e38:	4622      	mov	r2, r4
 8004e3a:	4606      	mov	r6, r0
 8004e3c:	460f      	mov	r7, r1
 8004e3e:	462b      	mov	r3, r5
 8004e40:	4620      	mov	r0, r4
 8004e42:	4629      	mov	r1, r5
 8004e44:	f7fb fb40 	bl	80004c8 <__aeabi_dmul>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4630      	mov	r0, r6
 8004e4e:	4639      	mov	r1, r7
 8004e50:	f7fb fb3a 	bl	80004c8 <__aeabi_dmul>
 8004e54:	4604      	mov	r4, r0
 8004e56:	460d      	mov	r5, r1
 8004e58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e5c:	4642      	mov	r2, r8
 8004e5e:	464b      	mov	r3, r9
 8004e60:	f7fb f97c 	bl	800015c <__adddf3>
 8004e64:	4652      	mov	r2, sl
 8004e66:	465b      	mov	r3, fp
 8004e68:	f7fb fb2e 	bl	80004c8 <__aeabi_dmul>
 8004e6c:	4622      	mov	r2, r4
 8004e6e:	462b      	mov	r3, r5
 8004e70:	f7fb f974 	bl	800015c <__adddf3>
 8004e74:	4642      	mov	r2, r8
 8004e76:	4606      	mov	r6, r0
 8004e78:	460f      	mov	r7, r1
 8004e7a:	464b      	mov	r3, r9
 8004e7c:	4640      	mov	r0, r8
 8004e7e:	4649      	mov	r1, r9
 8004e80:	f7fb fb22 	bl	80004c8 <__aeabi_dmul>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	4b66      	ldr	r3, [pc, #408]	; (8005028 <__ieee754_pow+0x750>)
 8004e90:	f7fb f964 	bl	800015c <__adddf3>
 8004e94:	4632      	mov	r2, r6
 8004e96:	463b      	mov	r3, r7
 8004e98:	f7fb f960 	bl	800015c <__adddf3>
 8004e9c:	2400      	movs	r4, #0
 8004e9e:	460d      	mov	r5, r1
 8004ea0:	4622      	mov	r2, r4
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4640      	mov	r0, r8
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	f7fb fb0e 	bl	80004c8 <__aeabi_dmul>
 8004eac:	2200      	movs	r2, #0
 8004eae:	4680      	mov	r8, r0
 8004eb0:	4689      	mov	r9, r1
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	4b5c      	ldr	r3, [pc, #368]	; (8005028 <__ieee754_pow+0x750>)
 8004eb8:	f7fb f94e 	bl	8000158 <__aeabi_dsub>
 8004ebc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004ec0:	f7fb f94a 	bl	8000158 <__aeabi_dsub>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4630      	mov	r0, r6
 8004eca:	4639      	mov	r1, r7
 8004ecc:	f7fb f944 	bl	8000158 <__aeabi_dsub>
 8004ed0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ed4:	f7fb faf8 	bl	80004c8 <__aeabi_dmul>
 8004ed8:	4622      	mov	r2, r4
 8004eda:	4606      	mov	r6, r0
 8004edc:	460f      	mov	r7, r1
 8004ede:	462b      	mov	r3, r5
 8004ee0:	4650      	mov	r0, sl
 8004ee2:	4659      	mov	r1, fp
 8004ee4:	f7fb faf0 	bl	80004c8 <__aeabi_dmul>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4630      	mov	r0, r6
 8004eee:	4639      	mov	r1, r7
 8004ef0:	f7fb f934 	bl	800015c <__adddf3>
 8004ef4:	2400      	movs	r4, #0
 8004ef6:	4606      	mov	r6, r0
 8004ef8:	460f      	mov	r7, r1
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	4640      	mov	r0, r8
 8004f00:	4649      	mov	r1, r9
 8004f02:	f7fb f92b 	bl	800015c <__adddf3>
 8004f06:	a33c      	add	r3, pc, #240	; (adr r3, 8004ff8 <__ieee754_pow+0x720>)
 8004f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	460d      	mov	r5, r1
 8004f10:	f7fb fada 	bl	80004c8 <__aeabi_dmul>
 8004f14:	4642      	mov	r2, r8
 8004f16:	464b      	mov	r3, r9
 8004f18:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	4629      	mov	r1, r5
 8004f20:	f7fb f91a 	bl	8000158 <__aeabi_dsub>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4630      	mov	r0, r6
 8004f2a:	4639      	mov	r1, r7
 8004f2c:	f7fb f914 	bl	8000158 <__aeabi_dsub>
 8004f30:	a333      	add	r3, pc, #204	; (adr r3, 8005000 <__ieee754_pow+0x728>)
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	f7fb fac7 	bl	80004c8 <__aeabi_dmul>
 8004f3a:	a333      	add	r3, pc, #204	; (adr r3, 8005008 <__ieee754_pow+0x730>)
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	4606      	mov	r6, r0
 8004f42:	460f      	mov	r7, r1
 8004f44:	4620      	mov	r0, r4
 8004f46:	4629      	mov	r1, r5
 8004f48:	f7fb fabe 	bl	80004c8 <__aeabi_dmul>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4630      	mov	r0, r6
 8004f52:	4639      	mov	r1, r7
 8004f54:	f7fb f902 	bl	800015c <__adddf3>
 8004f58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f5a:	4b34      	ldr	r3, [pc, #208]	; (800502c <__ieee754_pow+0x754>)
 8004f5c:	4413      	add	r3, r2
 8004f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f62:	f7fb f8fb 	bl	800015c <__adddf3>
 8004f66:	4680      	mov	r8, r0
 8004f68:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004f6a:	4689      	mov	r9, r1
 8004f6c:	f7fb fa42 	bl	80003f4 <__aeabi_i2d>
 8004f70:	4604      	mov	r4, r0
 8004f72:	460d      	mov	r5, r1
 8004f74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f7a:	4b2d      	ldr	r3, [pc, #180]	; (8005030 <__ieee754_pow+0x758>)
 8004f7c:	4413      	add	r3, r2
 8004f7e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004f82:	4642      	mov	r2, r8
 8004f84:	464b      	mov	r3, r9
 8004f86:	f7fb f8e9 	bl	800015c <__adddf3>
 8004f8a:	4632      	mov	r2, r6
 8004f8c:	463b      	mov	r3, r7
 8004f8e:	f7fb f8e5 	bl	800015c <__adddf3>
 8004f92:	4622      	mov	r2, r4
 8004f94:	462b      	mov	r3, r5
 8004f96:	f7fb f8e1 	bl	800015c <__adddf3>
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	4622      	mov	r2, r4
 8004f9e:	462b      	mov	r3, r5
 8004fa0:	4682      	mov	sl, r0
 8004fa2:	468b      	mov	fp, r1
 8004fa4:	f7fb f8d8 	bl	8000158 <__aeabi_dsub>
 8004fa8:	4632      	mov	r2, r6
 8004faa:	463b      	mov	r3, r7
 8004fac:	f7fb f8d4 	bl	8000158 <__aeabi_dsub>
 8004fb0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004fb4:	f7fb f8d0 	bl	8000158 <__aeabi_dsub>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4640      	mov	r0, r8
 8004fbe:	4649      	mov	r1, r9
 8004fc0:	e60b      	b.n	8004bda <__ieee754_pow+0x302>
 8004fc2:	2601      	movs	r6, #1
 8004fc4:	e69f      	b.n	8004d06 <__ieee754_pow+0x42e>
 8004fc6:	bf00      	nop
 8004fc8:	4a454eef 	.word	0x4a454eef
 8004fcc:	3fca7e28 	.word	0x3fca7e28
 8004fd0:	93c9db65 	.word	0x93c9db65
 8004fd4:	3fcd864a 	.word	0x3fcd864a
 8004fd8:	a91d4101 	.word	0xa91d4101
 8004fdc:	3fd17460 	.word	0x3fd17460
 8004fe0:	518f264d 	.word	0x518f264d
 8004fe4:	3fd55555 	.word	0x3fd55555
 8004fe8:	db6fabff 	.word	0xdb6fabff
 8004fec:	3fdb6db6 	.word	0x3fdb6db6
 8004ff0:	33333303 	.word	0x33333303
 8004ff4:	3fe33333 	.word	0x3fe33333
 8004ff8:	e0000000 	.word	0xe0000000
 8004ffc:	3feec709 	.word	0x3feec709
 8005000:	dc3a03fd 	.word	0xdc3a03fd
 8005004:	3feec709 	.word	0x3feec709
 8005008:	145b01f5 	.word	0x145b01f5
 800500c:	be3e2fe0 	.word	0xbe3e2fe0
 8005010:	7ff00000 	.word	0x7ff00000
 8005014:	43400000 	.word	0x43400000
 8005018:	0003988e 	.word	0x0003988e
 800501c:	000bb679 	.word	0x000bb679
 8005020:	08005668 	.word	0x08005668
 8005024:	3ff00000 	.word	0x3ff00000
 8005028:	40080000 	.word	0x40080000
 800502c:	08005688 	.word	0x08005688
 8005030:	08005678 	.word	0x08005678
 8005034:	a39c      	add	r3, pc, #624	; (adr r3, 80052a8 <__ieee754_pow+0x9d0>)
 8005036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503a:	4640      	mov	r0, r8
 800503c:	4649      	mov	r1, r9
 800503e:	f7fb f88d 	bl	800015c <__adddf3>
 8005042:	4622      	mov	r2, r4
 8005044:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005048:	462b      	mov	r3, r5
 800504a:	4650      	mov	r0, sl
 800504c:	4639      	mov	r1, r7
 800504e:	f7fb f883 	bl	8000158 <__aeabi_dsub>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800505a:	f7fb fcc5 	bl	80009e8 <__aeabi_dcmpgt>
 800505e:	2800      	cmp	r0, #0
 8005060:	f47f ae06 	bne.w	8004c70 <__ieee754_pow+0x398>
 8005064:	4aa2      	ldr	r2, [pc, #648]	; (80052f0 <__ieee754_pow+0xa18>)
 8005066:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800506a:	4293      	cmp	r3, r2
 800506c:	f340 8100 	ble.w	8005270 <__ieee754_pow+0x998>
 8005070:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005074:	151b      	asrs	r3, r3, #20
 8005076:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800507a:	fa4a fa03 	asr.w	sl, sl, r3
 800507e:	44b2      	add	sl, r6
 8005080:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005084:	489b      	ldr	r0, [pc, #620]	; (80052f4 <__ieee754_pow+0xa1c>)
 8005086:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800508a:	4108      	asrs	r0, r1
 800508c:	ea00 030a 	and.w	r3, r0, sl
 8005090:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005094:	f1c1 0114 	rsb	r1, r1, #20
 8005098:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800509c:	fa4a fa01 	asr.w	sl, sl, r1
 80050a0:	2e00      	cmp	r6, #0
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	4620      	mov	r0, r4
 80050a8:	4629      	mov	r1, r5
 80050aa:	bfb8      	it	lt
 80050ac:	f1ca 0a00 	rsblt	sl, sl, #0
 80050b0:	f7fb f852 	bl	8000158 <__aeabi_dsub>
 80050b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050bc:	2400      	movs	r4, #0
 80050be:	4642      	mov	r2, r8
 80050c0:	464b      	mov	r3, r9
 80050c2:	f7fb f84b 	bl	800015c <__adddf3>
 80050c6:	a37a      	add	r3, pc, #488	; (adr r3, 80052b0 <__ieee754_pow+0x9d8>)
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	4620      	mov	r0, r4
 80050ce:	460d      	mov	r5, r1
 80050d0:	f7fb f9fa 	bl	80004c8 <__aeabi_dmul>
 80050d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050d8:	4606      	mov	r6, r0
 80050da:	460f      	mov	r7, r1
 80050dc:	4620      	mov	r0, r4
 80050de:	4629      	mov	r1, r5
 80050e0:	f7fb f83a 	bl	8000158 <__aeabi_dsub>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4640      	mov	r0, r8
 80050ea:	4649      	mov	r1, r9
 80050ec:	f7fb f834 	bl	8000158 <__aeabi_dsub>
 80050f0:	a371      	add	r3, pc, #452	; (adr r3, 80052b8 <__ieee754_pow+0x9e0>)
 80050f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f6:	f7fb f9e7 	bl	80004c8 <__aeabi_dmul>
 80050fa:	a371      	add	r3, pc, #452	; (adr r3, 80052c0 <__ieee754_pow+0x9e8>)
 80050fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005100:	4680      	mov	r8, r0
 8005102:	4689      	mov	r9, r1
 8005104:	4620      	mov	r0, r4
 8005106:	4629      	mov	r1, r5
 8005108:	f7fb f9de 	bl	80004c8 <__aeabi_dmul>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4640      	mov	r0, r8
 8005112:	4649      	mov	r1, r9
 8005114:	f7fb f822 	bl	800015c <__adddf3>
 8005118:	4604      	mov	r4, r0
 800511a:	460d      	mov	r5, r1
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4630      	mov	r0, r6
 8005122:	4639      	mov	r1, r7
 8005124:	f7fb f81a 	bl	800015c <__adddf3>
 8005128:	4632      	mov	r2, r6
 800512a:	463b      	mov	r3, r7
 800512c:	4680      	mov	r8, r0
 800512e:	4689      	mov	r9, r1
 8005130:	f7fb f812 	bl	8000158 <__aeabi_dsub>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4620      	mov	r0, r4
 800513a:	4629      	mov	r1, r5
 800513c:	f7fb f80c 	bl	8000158 <__aeabi_dsub>
 8005140:	4642      	mov	r2, r8
 8005142:	4606      	mov	r6, r0
 8005144:	460f      	mov	r7, r1
 8005146:	464b      	mov	r3, r9
 8005148:	4640      	mov	r0, r8
 800514a:	4649      	mov	r1, r9
 800514c:	f7fb f9bc 	bl	80004c8 <__aeabi_dmul>
 8005150:	a35d      	add	r3, pc, #372	; (adr r3, 80052c8 <__ieee754_pow+0x9f0>)
 8005152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005156:	4604      	mov	r4, r0
 8005158:	460d      	mov	r5, r1
 800515a:	f7fb f9b5 	bl	80004c8 <__aeabi_dmul>
 800515e:	a35c      	add	r3, pc, #368	; (adr r3, 80052d0 <__ieee754_pow+0x9f8>)
 8005160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005164:	f7fa fff8 	bl	8000158 <__aeabi_dsub>
 8005168:	4622      	mov	r2, r4
 800516a:	462b      	mov	r3, r5
 800516c:	f7fb f9ac 	bl	80004c8 <__aeabi_dmul>
 8005170:	a359      	add	r3, pc, #356	; (adr r3, 80052d8 <__ieee754_pow+0xa00>)
 8005172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005176:	f7fa fff1 	bl	800015c <__adddf3>
 800517a:	4622      	mov	r2, r4
 800517c:	462b      	mov	r3, r5
 800517e:	f7fb f9a3 	bl	80004c8 <__aeabi_dmul>
 8005182:	a357      	add	r3, pc, #348	; (adr r3, 80052e0 <__ieee754_pow+0xa08>)
 8005184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005188:	f7fa ffe6 	bl	8000158 <__aeabi_dsub>
 800518c:	4622      	mov	r2, r4
 800518e:	462b      	mov	r3, r5
 8005190:	f7fb f99a 	bl	80004c8 <__aeabi_dmul>
 8005194:	a354      	add	r3, pc, #336	; (adr r3, 80052e8 <__ieee754_pow+0xa10>)
 8005196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519a:	f7fa ffdf 	bl	800015c <__adddf3>
 800519e:	4622      	mov	r2, r4
 80051a0:	462b      	mov	r3, r5
 80051a2:	f7fb f991 	bl	80004c8 <__aeabi_dmul>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4640      	mov	r0, r8
 80051ac:	4649      	mov	r1, r9
 80051ae:	f7fa ffd3 	bl	8000158 <__aeabi_dsub>
 80051b2:	4604      	mov	r4, r0
 80051b4:	460d      	mov	r5, r1
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4640      	mov	r0, r8
 80051bc:	4649      	mov	r1, r9
 80051be:	f7fb f983 	bl	80004c8 <__aeabi_dmul>
 80051c2:	2200      	movs	r2, #0
 80051c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051cc:	4620      	mov	r0, r4
 80051ce:	4629      	mov	r1, r5
 80051d0:	f7fa ffc2 	bl	8000158 <__aeabi_dsub>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051dc:	f7fb fa9e 	bl	800071c <__aeabi_ddiv>
 80051e0:	4632      	mov	r2, r6
 80051e2:	4604      	mov	r4, r0
 80051e4:	460d      	mov	r5, r1
 80051e6:	463b      	mov	r3, r7
 80051e8:	4640      	mov	r0, r8
 80051ea:	4649      	mov	r1, r9
 80051ec:	f7fb f96c 	bl	80004c8 <__aeabi_dmul>
 80051f0:	4632      	mov	r2, r6
 80051f2:	463b      	mov	r3, r7
 80051f4:	f7fa ffb2 	bl	800015c <__adddf3>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4620      	mov	r0, r4
 80051fe:	4629      	mov	r1, r5
 8005200:	f7fa ffaa 	bl	8000158 <__aeabi_dsub>
 8005204:	4642      	mov	r2, r8
 8005206:	464b      	mov	r3, r9
 8005208:	f7fa ffa6 	bl	8000158 <__aeabi_dsub>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	2000      	movs	r0, #0
 8005212:	4939      	ldr	r1, [pc, #228]	; (80052f8 <__ieee754_pow+0xa20>)
 8005214:	f7fa ffa0 	bl	8000158 <__aeabi_dsub>
 8005218:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800521c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005220:	da29      	bge.n	8005276 <__ieee754_pow+0x99e>
 8005222:	4652      	mov	r2, sl
 8005224:	f000 f874 	bl	8005310 <scalbn>
 8005228:	e9dd 2300 	ldrd	r2, r3, [sp]
 800522c:	f7ff bbfd 	b.w	8004a2a <__ieee754_pow+0x152>
 8005230:	4b32      	ldr	r3, [pc, #200]	; (80052fc <__ieee754_pow+0xa24>)
 8005232:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005236:	429f      	cmp	r7, r3
 8005238:	f77f af14 	ble.w	8005064 <__ieee754_pow+0x78c>
 800523c:	4b30      	ldr	r3, [pc, #192]	; (8005300 <__ieee754_pow+0xa28>)
 800523e:	440b      	add	r3, r1
 8005240:	4303      	orrs	r3, r0
 8005242:	d009      	beq.n	8005258 <__ieee754_pow+0x980>
 8005244:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005248:	2200      	movs	r2, #0
 800524a:	2300      	movs	r3, #0
 800524c:	f7fb fbae 	bl	80009ac <__aeabi_dcmplt>
 8005250:	3800      	subs	r0, #0
 8005252:	bf18      	it	ne
 8005254:	2001      	movne	r0, #1
 8005256:	e452      	b.n	8004afe <__ieee754_pow+0x226>
 8005258:	4622      	mov	r2, r4
 800525a:	462b      	mov	r3, r5
 800525c:	f7fa ff7c 	bl	8000158 <__aeabi_dsub>
 8005260:	4642      	mov	r2, r8
 8005262:	464b      	mov	r3, r9
 8005264:	f7fb fbb6 	bl	80009d4 <__aeabi_dcmpge>
 8005268:	2800      	cmp	r0, #0
 800526a:	f43f aefb 	beq.w	8005064 <__ieee754_pow+0x78c>
 800526e:	e7e9      	b.n	8005244 <__ieee754_pow+0x96c>
 8005270:	f04f 0a00 	mov.w	sl, #0
 8005274:	e720      	b.n	80050b8 <__ieee754_pow+0x7e0>
 8005276:	4621      	mov	r1, r4
 8005278:	e7d6      	b.n	8005228 <__ieee754_pow+0x950>
 800527a:	f04f 0b00 	mov.w	fp, #0
 800527e:	f8df c078 	ldr.w	ip, [pc, #120]	; 80052f8 <__ieee754_pow+0xa20>
 8005282:	f7ff bbb9 	b.w	80049f8 <__ieee754_pow+0x120>
 8005286:	f04f 0b00 	mov.w	fp, #0
 800528a:	f04f 0c00 	mov.w	ip, #0
 800528e:	f7ff bbb3 	b.w	80049f8 <__ieee754_pow+0x120>
 8005292:	4640      	mov	r0, r8
 8005294:	4649      	mov	r1, r9
 8005296:	f7ff bb3c 	b.w	8004912 <__ieee754_pow+0x3a>
 800529a:	9200      	str	r2, [sp, #0]
 800529c:	f7ff bb88 	b.w	80049b0 <__ieee754_pow+0xd8>
 80052a0:	2300      	movs	r3, #0
 80052a2:	f7ff bb72 	b.w	800498a <__ieee754_pow+0xb2>
 80052a6:	bf00      	nop
 80052a8:	652b82fe 	.word	0x652b82fe
 80052ac:	3c971547 	.word	0x3c971547
 80052b0:	00000000 	.word	0x00000000
 80052b4:	3fe62e43 	.word	0x3fe62e43
 80052b8:	fefa39ef 	.word	0xfefa39ef
 80052bc:	3fe62e42 	.word	0x3fe62e42
 80052c0:	0ca86c39 	.word	0x0ca86c39
 80052c4:	be205c61 	.word	0xbe205c61
 80052c8:	72bea4d0 	.word	0x72bea4d0
 80052cc:	3e663769 	.word	0x3e663769
 80052d0:	c5d26bf1 	.word	0xc5d26bf1
 80052d4:	3ebbbd41 	.word	0x3ebbbd41
 80052d8:	af25de2c 	.word	0xaf25de2c
 80052dc:	3f11566a 	.word	0x3f11566a
 80052e0:	16bebd93 	.word	0x16bebd93
 80052e4:	3f66c16c 	.word	0x3f66c16c
 80052e8:	5555553e 	.word	0x5555553e
 80052ec:	3fc55555 	.word	0x3fc55555
 80052f0:	3fe00000 	.word	0x3fe00000
 80052f4:	fff00000 	.word	0xfff00000
 80052f8:	3ff00000 	.word	0x3ff00000
 80052fc:	4090cbff 	.word	0x4090cbff
 8005300:	3f6f3400 	.word	0x3f6f3400

08005304 <fabs>:
 8005304:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005308:	4619      	mov	r1, r3
 800530a:	4770      	bx	lr
 800530c:	0000      	movs	r0, r0
	...

08005310 <scalbn>:
 8005310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005312:	4616      	mov	r6, r2
 8005314:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005318:	4604      	mov	r4, r0
 800531a:	460d      	mov	r5, r1
 800531c:	460b      	mov	r3, r1
 800531e:	b992      	cbnz	r2, 8005346 <scalbn+0x36>
 8005320:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005324:	4303      	orrs	r3, r0
 8005326:	d03c      	beq.n	80053a2 <scalbn+0x92>
 8005328:	4b31      	ldr	r3, [pc, #196]	; (80053f0 <scalbn+0xe0>)
 800532a:	2200      	movs	r2, #0
 800532c:	f7fb f8cc 	bl	80004c8 <__aeabi_dmul>
 8005330:	4b30      	ldr	r3, [pc, #192]	; (80053f4 <scalbn+0xe4>)
 8005332:	4604      	mov	r4, r0
 8005334:	429e      	cmp	r6, r3
 8005336:	460d      	mov	r5, r1
 8005338:	da0f      	bge.n	800535a <scalbn+0x4a>
 800533a:	a329      	add	r3, pc, #164	; (adr r3, 80053e0 <scalbn+0xd0>)
 800533c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005340:	f7fb f8c2 	bl	80004c8 <__aeabi_dmul>
 8005344:	e006      	b.n	8005354 <scalbn+0x44>
 8005346:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800534a:	42ba      	cmp	r2, r7
 800534c:	d109      	bne.n	8005362 <scalbn+0x52>
 800534e:	4602      	mov	r2, r0
 8005350:	f7fa ff04 	bl	800015c <__adddf3>
 8005354:	4604      	mov	r4, r0
 8005356:	460d      	mov	r5, r1
 8005358:	e023      	b.n	80053a2 <scalbn+0x92>
 800535a:	460b      	mov	r3, r1
 800535c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005360:	3a36      	subs	r2, #54	; 0x36
 8005362:	f24c 3150 	movw	r1, #50000	; 0xc350
 8005366:	428e      	cmp	r6, r1
 8005368:	dd0e      	ble.n	8005388 <scalbn+0x78>
 800536a:	a31f      	add	r3, pc, #124	; (adr r3, 80053e8 <scalbn+0xd8>)
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005374:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8005378:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800537c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8005380:	481d      	ldr	r0, [pc, #116]	; (80053f8 <scalbn+0xe8>)
 8005382:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8005386:	e7db      	b.n	8005340 <scalbn+0x30>
 8005388:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800538c:	4432      	add	r2, r6
 800538e:	428a      	cmp	r2, r1
 8005390:	dceb      	bgt.n	800536a <scalbn+0x5a>
 8005392:	2a00      	cmp	r2, #0
 8005394:	dd08      	ble.n	80053a8 <scalbn+0x98>
 8005396:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800539a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800539e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80053a2:	4620      	mov	r0, r4
 80053a4:	4629      	mov	r1, r5
 80053a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053a8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80053ac:	da0c      	bge.n	80053c8 <scalbn+0xb8>
 80053ae:	a30c      	add	r3, pc, #48	; (adr r3, 80053e0 <scalbn+0xd0>)
 80053b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80053b8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80053bc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80053c0:	480e      	ldr	r0, [pc, #56]	; (80053fc <scalbn+0xec>)
 80053c2:	f041 011f 	orr.w	r1, r1, #31
 80053c6:	e7bb      	b.n	8005340 <scalbn+0x30>
 80053c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80053cc:	3236      	adds	r2, #54	; 0x36
 80053ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80053d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80053d6:	4620      	mov	r0, r4
 80053d8:	4629      	mov	r1, r5
 80053da:	2200      	movs	r2, #0
 80053dc:	4b08      	ldr	r3, [pc, #32]	; (8005400 <scalbn+0xf0>)
 80053de:	e7af      	b.n	8005340 <scalbn+0x30>
 80053e0:	c2f8f359 	.word	0xc2f8f359
 80053e4:	01a56e1f 	.word	0x01a56e1f
 80053e8:	8800759c 	.word	0x8800759c
 80053ec:	7e37e43c 	.word	0x7e37e43c
 80053f0:	43500000 	.word	0x43500000
 80053f4:	ffff3cb0 	.word	0xffff3cb0
 80053f8:	8800759c 	.word	0x8800759c
 80053fc:	c2f8f359 	.word	0xc2f8f359
 8005400:	3c900000 	.word	0x3c900000

08005404 <with_errno>:
 8005404:	b570      	push	{r4, r5, r6, lr}
 8005406:	4604      	mov	r4, r0
 8005408:	460d      	mov	r5, r1
 800540a:	4616      	mov	r6, r2
 800540c:	f7ff f9cc 	bl	80047a8 <__errno>
 8005410:	4629      	mov	r1, r5
 8005412:	6006      	str	r6, [r0, #0]
 8005414:	4620      	mov	r0, r4
 8005416:	bd70      	pop	{r4, r5, r6, pc}

08005418 <xflow>:
 8005418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800541a:	4615      	mov	r5, r2
 800541c:	461c      	mov	r4, r3
 800541e:	b180      	cbz	r0, 8005442 <xflow+0x2a>
 8005420:	4610      	mov	r0, r2
 8005422:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005426:	e9cd 0100 	strd	r0, r1, [sp]
 800542a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800542e:	4628      	mov	r0, r5
 8005430:	4621      	mov	r1, r4
 8005432:	f7fb f849 	bl	80004c8 <__aeabi_dmul>
 8005436:	2222      	movs	r2, #34	; 0x22
 8005438:	b003      	add	sp, #12
 800543a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800543e:	f7ff bfe1 	b.w	8005404 <with_errno>
 8005442:	4610      	mov	r0, r2
 8005444:	4619      	mov	r1, r3
 8005446:	e7ee      	b.n	8005426 <xflow+0xe>

08005448 <__math_uflow>:
 8005448:	2200      	movs	r2, #0
 800544a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800544e:	f7ff bfe3 	b.w	8005418 <xflow>

08005452 <__math_oflow>:
 8005452:	2200      	movs	r2, #0
 8005454:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005458:	f7ff bfde 	b.w	8005418 <xflow>

0800545c <__ieee754_sqrt>:
 800545c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8005600 <__ieee754_sqrt+0x1a4>
 8005460:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005464:	ea3c 0c01 	bics.w	ip, ip, r1
 8005468:	460b      	mov	r3, r1
 800546a:	4606      	mov	r6, r0
 800546c:	460d      	mov	r5, r1
 800546e:	460a      	mov	r2, r1
 8005470:	4604      	mov	r4, r0
 8005472:	d10e      	bne.n	8005492 <__ieee754_sqrt+0x36>
 8005474:	4602      	mov	r2, r0
 8005476:	f7fb f827 	bl	80004c8 <__aeabi_dmul>
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	4630      	mov	r0, r6
 8005480:	4629      	mov	r1, r5
 8005482:	f7fa fe6b 	bl	800015c <__adddf3>
 8005486:	4606      	mov	r6, r0
 8005488:	460d      	mov	r5, r1
 800548a:	4630      	mov	r0, r6
 800548c:	4629      	mov	r1, r5
 800548e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005492:	2900      	cmp	r1, #0
 8005494:	dc0d      	bgt.n	80054b2 <__ieee754_sqrt+0x56>
 8005496:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800549a:	ea5c 0c00 	orrs.w	ip, ip, r0
 800549e:	d0f4      	beq.n	800548a <__ieee754_sqrt+0x2e>
 80054a0:	b139      	cbz	r1, 80054b2 <__ieee754_sqrt+0x56>
 80054a2:	4602      	mov	r2, r0
 80054a4:	f7fa fe58 	bl	8000158 <__aeabi_dsub>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	f7fb f936 	bl	800071c <__aeabi_ddiv>
 80054b0:	e7e9      	b.n	8005486 <__ieee754_sqrt+0x2a>
 80054b2:	1512      	asrs	r2, r2, #20
 80054b4:	f000 8089 	beq.w	80055ca <__ieee754_sqrt+0x16e>
 80054b8:	2500      	movs	r5, #0
 80054ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054be:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80054c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054c6:	07d2      	lsls	r2, r2, #31
 80054c8:	bf5c      	itt	pl
 80054ca:	005b      	lslpl	r3, r3, #1
 80054cc:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80054d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80054d4:	bf58      	it	pl
 80054d6:	0064      	lslpl	r4, r4, #1
 80054d8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80054dc:	0062      	lsls	r2, r4, #1
 80054de:	2016      	movs	r0, #22
 80054e0:	4629      	mov	r1, r5
 80054e2:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80054e6:	1076      	asrs	r6, r6, #1
 80054e8:	190f      	adds	r7, r1, r4
 80054ea:	429f      	cmp	r7, r3
 80054ec:	bfde      	ittt	le
 80054ee:	1bdb      	suble	r3, r3, r7
 80054f0:	1939      	addle	r1, r7, r4
 80054f2:	192d      	addle	r5, r5, r4
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	3801      	subs	r0, #1
 80054f8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80054fc:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005500:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005504:	d1f0      	bne.n	80054e8 <__ieee754_sqrt+0x8c>
 8005506:	4604      	mov	r4, r0
 8005508:	2720      	movs	r7, #32
 800550a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800550e:	428b      	cmp	r3, r1
 8005510:	eb0c 0e00 	add.w	lr, ip, r0
 8005514:	dc02      	bgt.n	800551c <__ieee754_sqrt+0xc0>
 8005516:	d113      	bne.n	8005540 <__ieee754_sqrt+0xe4>
 8005518:	4596      	cmp	lr, r2
 800551a:	d811      	bhi.n	8005540 <__ieee754_sqrt+0xe4>
 800551c:	f1be 0f00 	cmp.w	lr, #0
 8005520:	eb0e 000c 	add.w	r0, lr, ip
 8005524:	da56      	bge.n	80055d4 <__ieee754_sqrt+0x178>
 8005526:	2800      	cmp	r0, #0
 8005528:	db54      	blt.n	80055d4 <__ieee754_sqrt+0x178>
 800552a:	f101 0801 	add.w	r8, r1, #1
 800552e:	1a5b      	subs	r3, r3, r1
 8005530:	4641      	mov	r1, r8
 8005532:	4596      	cmp	lr, r2
 8005534:	bf88      	it	hi
 8005536:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800553a:	eba2 020e 	sub.w	r2, r2, lr
 800553e:	4464      	add	r4, ip
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	3f01      	subs	r7, #1
 8005544:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005548:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800554c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005550:	d1dd      	bne.n	800550e <__ieee754_sqrt+0xb2>
 8005552:	4313      	orrs	r3, r2
 8005554:	d01b      	beq.n	800558e <__ieee754_sqrt+0x132>
 8005556:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005604 <__ieee754_sqrt+0x1a8>
 800555a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8005608 <__ieee754_sqrt+0x1ac>
 800555e:	e9da 0100 	ldrd	r0, r1, [sl]
 8005562:	e9db 2300 	ldrd	r2, r3, [fp]
 8005566:	f7fa fdf7 	bl	8000158 <__aeabi_dsub>
 800556a:	e9da 8900 	ldrd	r8, r9, [sl]
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	4640      	mov	r0, r8
 8005574:	4649      	mov	r1, r9
 8005576:	f7fb fa23 	bl	80009c0 <__aeabi_dcmple>
 800557a:	b140      	cbz	r0, 800558e <__ieee754_sqrt+0x132>
 800557c:	e9da 0100 	ldrd	r0, r1, [sl]
 8005580:	e9db 2300 	ldrd	r2, r3, [fp]
 8005584:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005588:	d126      	bne.n	80055d8 <__ieee754_sqrt+0x17c>
 800558a:	463c      	mov	r4, r7
 800558c:	3501      	adds	r5, #1
 800558e:	106b      	asrs	r3, r5, #1
 8005590:	0864      	lsrs	r4, r4, #1
 8005592:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005596:	07ea      	lsls	r2, r5, #31
 8005598:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800559c:	bf48      	it	mi
 800559e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80055a2:	4620      	mov	r0, r4
 80055a4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80055a8:	e76d      	b.n	8005486 <__ieee754_sqrt+0x2a>
 80055aa:	0ae3      	lsrs	r3, r4, #11
 80055ac:	3915      	subs	r1, #21
 80055ae:	0564      	lsls	r4, r4, #21
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0fa      	beq.n	80055aa <__ieee754_sqrt+0x14e>
 80055b4:	02d8      	lsls	r0, r3, #11
 80055b6:	d50a      	bpl.n	80055ce <__ieee754_sqrt+0x172>
 80055b8:	f1c2 0020 	rsb	r0, r2, #32
 80055bc:	fa24 f000 	lsr.w	r0, r4, r0
 80055c0:	1e55      	subs	r5, r2, #1
 80055c2:	4094      	lsls	r4, r2
 80055c4:	4303      	orrs	r3, r0
 80055c6:	1b4a      	subs	r2, r1, r5
 80055c8:	e776      	b.n	80054b8 <__ieee754_sqrt+0x5c>
 80055ca:	4611      	mov	r1, r2
 80055cc:	e7f0      	b.n	80055b0 <__ieee754_sqrt+0x154>
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	3201      	adds	r2, #1
 80055d2:	e7ef      	b.n	80055b4 <__ieee754_sqrt+0x158>
 80055d4:	4688      	mov	r8, r1
 80055d6:	e7aa      	b.n	800552e <__ieee754_sqrt+0xd2>
 80055d8:	f7fa fdc0 	bl	800015c <__adddf3>
 80055dc:	e9da 8900 	ldrd	r8, r9, [sl]
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4640      	mov	r0, r8
 80055e6:	4649      	mov	r1, r9
 80055e8:	f7fb f9e0 	bl	80009ac <__aeabi_dcmplt>
 80055ec:	b120      	cbz	r0, 80055f8 <__ieee754_sqrt+0x19c>
 80055ee:	1ca1      	adds	r1, r4, #2
 80055f0:	bf08      	it	eq
 80055f2:	3501      	addeq	r5, #1
 80055f4:	3402      	adds	r4, #2
 80055f6:	e7ca      	b.n	800558e <__ieee754_sqrt+0x132>
 80055f8:	3401      	adds	r4, #1
 80055fa:	f024 0401 	bic.w	r4, r4, #1
 80055fe:	e7c6      	b.n	800558e <__ieee754_sqrt+0x132>
 8005600:	7ff00000 	.word	0x7ff00000
 8005604:	20000070 	.word	0x20000070
 8005608:	20000078 	.word	0x20000078

0800560c <_init>:
 800560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560e:	bf00      	nop
 8005610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005612:	bc08      	pop	{r3}
 8005614:	469e      	mov	lr, r3
 8005616:	4770      	bx	lr

08005618 <_fini>:
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	bf00      	nop
 800561c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561e:	bc08      	pop	{r3}
 8005620:	469e      	mov	lr, r3
 8005622:	4770      	bx	lr
